for(i in 1:nrow(QUAC_k4)){
for(c in 1:ncol(QUAC_k4))  QUAC_k4$Decision[i] <- names(which(table(QUAC_k4[QUAC_k4[,c] > 0.6,]$Pop) > 2))
}
for(i in 1:nrow(QUAC_k4)){
for(c in 1:ncol(QUAC_k4))  QUAC_k4$Decision[i] <- names(which(table(QUAC_k4[QUAC_k4[,2+c] > 0.6,]$Pop) > 2))
}
names(which(table(QUAC_k4[QUAC_k4[,2+c] > 0.6,]$Pop)
)
))))
ncol(QUAC_k4)
names(which(table(QUAC_k4[QUAC_k4[,c] > 0.6,]$Pop) > 2))
names(which(table(QUAC_k4[QUAC_k4[,3] > 0.6,]$Pop) > 2))
for(c in 3:ncol(QUAC_k4)) QUAC_k4$Decision <- names(which(table(QUAC_k4[QUAC_k4[,c] > 0.6,]$Pop) > 2))
for(i in 1:ncol(QUAC_k4)){
for(c in 3:ncol(QUAC_k4)) QUAC_k4$Decision[i] <- names(which(table(QUAC_k4[QUAC_k4[,c] > 0.6,]$Pop) > 2))
}
for(c in 3:ncol(QUAC_k4)) QUAC_k4$Decision <- names(which(table(QUAC_k4[QUAC_k4[,c] > 0.6,]$Pop) > 2))
which(QUAC_k4[,3:7] > 0.6)
which(QUAC_k4[1,3:7] > 0.6)
QUAC_k4[1,3:7] > 0.6
QUAC_k4 <- read.csv("QUAC_wild_woK_k4.csv")
QUAC_k4[1,3:7] > 0.6
QUAC_k4[1,3:6] > 0.6
which(QUAC_k4[1,3:6] > 0.6)
as.character(QUAC_k4[1,3:6] > 0.6)
names(QUAC_k4[1,3:6] > 0.6)
QUAC_k4[2,3:6] > 0.6
QUAC_k4[17,3:6] > 0.6
QUAC_k4$Cluster <- NA
for(c in 1:nrow(QUAC_k4)){
col_name <- QUAC_k4[c,3:6] > 0.6
if(col_name == TRUE) {
QUAC_k4$Cluster[c] <- paste0("Cluster", col_name)
}else{
QUAC_k4$Cluster[c] <- "None"
}
}
col_name
which(QUAC_k4[c,3:6] > 0.6)
col_name
which(QUAC_k4[17,3:6] > 0.6)
col_name
QUAC_k4[17,3:6] > 0.6
col_name <- QUAC_k4[1,3:6] > 0.6
any(col_name)
col_name <- QUAC_k4[17,3:6] > 0.6
any(col_name)
QUAC_k4[17,3:6] > 0.6
any(QUAC_k4[17,3:6] > 0.6)
any(QUAC_k4[1,3:6] > 0.6)
col_name <- QUAC_k4[1,3:6] > 0.6
which(col_name)
for(c in 1:nrow(QUAC_k4)){
col_name <- QUAC_k4[1,3:6] > 0.6
if(any(col_name) == TRUE) {
QUAC_k4$Cluster[c] <- paste0("Cluster", which(col_name))
}else{
QUAC_k4$Cluster[c] <- "None"
}
}
for(c in 1:nrow(QUAC_k4)){
col_name <- QUAC_k4[c,3:6] > 0.6
if(any(col_name) == TRUE) {
QUAC_k4$Cluster[c] <- paste0("Cluster", which(col_name))
}else{
QUAC_k4$Cluster[c] <- "None"
}
}
library(dplyr)
count(QUAC_k4$Pop)
group_by(QUAC_k4, Pop)
QUAC_k4[QUAC_k4$Cluster == "Cluster2",]
table(QUAC_k4[QUAC_k4$Cluster == "Cluster2",]$Pop)
table(QUAC_k4[QUAC_k4$Cluster == "Cluster2",]$Pop) > 1
names(table(QUAC_k4[QUAC_k4$Cluster == "Cluster2",]$Pop))
names(table(QUAC_k4[QUAC_k4$Cluster == "Cluster2",]$Pop)) > 1
length(names(table(QUAC_k4[QUAC_k4$Cluster == "Cluster2",]$Pop)))
length(unique(QUAC_k4$Cluster))
cluster_list <- c("Cluster1", "Cluster2", "Cluster3", "Cluster4")
paste0(QUAC_k4$Pop[1], QUAC_k4$Cluster[1])
paste0(QUAC_k4$Pop[1], "_", QUAC_k4$Cluster[1])
#create a column to link populations to each cluster
QUAC_k4$cluster_pop <- NA
QUAC_k4[QUAC_k4$Pop == "Porter",]
na.omit(QUAC_k4)
QUAC_k4 <- na.omit(QUAC_k4)
QUAC_k4 <- read.csv("QUAC_wild_woK_k4.csv")
QUAC_k4 <- na.omit(QUAC_k4)
#loop to assign structure clusters
for(c in 1:nrow(QUAC_k4)){
col_name <- QUAC_k4[c,3:6] > 0.6
if(any(col_name) == TRUE) {
QUAC_k4$Cluster[c] <- paste0("Cluster", which(col_name))
}else{
QUAC_k4$Cluster[c] <- "None"
}
}
summary(QUAC_k4$Cluster)
table(QUAC_k4$Cluster)
QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster
table(QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster)
table(QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster)[1]
names(table(QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster)[1])
paste0("Porter","_",names(table(QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster)[1]))
pop_list <- unique(QUAC_k4$Pop)
#create a column to link populations to each cluster
QUAC_k4$cluster_pop <- NA
names(table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)[1])
table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)[1])
table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)[1]
table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)[2]
table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)[3]
table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)
max(table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster))
which(max(table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)))
which.max(table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster))
table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)
names(which.max(table(QUAC_k4[QUAC_k4$Pop == "Pryor",]$Cluster)))
pop_list
1:pop_list
for(cl in pop_list){
cluster_pop <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == cl,]$Cluster)))
}
cluster_pop
QUAC_k4[QUAC_k4$Pop == "Porter",]
QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop[1]
QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop[1] <- "Cluster1"
for(cl in pop_list){
cluster_pop <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == cl,]$Cluster)))
for(ind in 1:nrow(QUAC_k4)){
QUAC_k4[QUAC_k4$Pop == pop_list,]$cluster_pop[ind] <- paste0(cluster_pop, "_", pop_list)
}
}
nrow(QUAC_k4)
for(cl in pop_list){
cluster_pop <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == cl,]$Cluster)))
for(ind in 1:nrow(QUAC_k4)){
QUAC_k4$cluster_pop[ind] <- paste0(cluster_pop, "_", pop_list)
}
}
cluster_pop <- list()
#create a column to link populations to each cluster
for(cl in pop_list){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == cl,]$Cluster)))
}
cluster_pop
cluster_pop$Porter
QUAC_k4[QUAC_k4$Pop == "Porter",]
nrow(QUAC_k4[QUAC_k4$Pop == "Porter",])
pop_list[1]
paste0(cluster_pop[[cl]], "_", pop_list[[cl]])
paste0(cluster_pop[[1]], "_", pop_list[[1]])
#create a column to link populations to each cluster
for(cl in pop_list){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == cl,]$Cluster)))
QUAC_k4[QUAC_k4$Pop == cl,] <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == cl,]))
}
pop_list[[3]]
pop_list[[4]]
#create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster)))
QUAC_k4[QUAC_k4$Pop == cl,] <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == cl,]))
}
#create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster)))
QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],] <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == cl,]))
}
QUAC_k4[QUAC_k4$Pop == "Porter",]
#create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster)))
QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],] <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]))
}
QUAC_k4 <- na.omit(QUAC_k4)
QUAC_k4$Cluster <- NA
QUAC_k4 <- read.csv("QUAC_wild_woK_k4.csv")
QUAC_k4 <- na.omit(QUAC_k4)
QUAC_k4$Cluster <- NA
#loop to assign structure clusters
for(c in 1:nrow(QUAC_k4)){
col_name <- QUAC_k4[c,3:6] > 0.6
if(any(col_name) == TRUE) {
QUAC_k4$Cluster[c] <- paste0("Cluster", which(col_name))
}else{
QUAC_k4$Cluster[c] <- "None"
}
}
QUAC_k4$cluster_pop
QUAC_k4$cluster_pop <- NA
#create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster)))
QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]))
}
QUAC_k4[QUAC_k4$Pop == "Porter",]
QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster
QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop
gsub("\\_*", "", QUAC_k4[QUAC_k4$Pop == "Porter",])
gsub("_*", "", QUAC_k4[QUAC_k4$Pop == "Porter",])
gsub("_*", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("\\_*", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("\\_^*", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("*_\\", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("*_", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("*\\_", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub(".*_", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("_.*\\", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("_.*", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop)
gsub("_.*", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop) == QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster
sum(gsub("_.*", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop) == QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster)
QUAC_k4$cluster_match <- NA
#create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster)))
QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]))
QUAC_k4$cluster_match <- gsub("_.*", "", QUAC_k4[QUAC_k4$Pop == "Porter",]$cluster_pop) == QUAC_k4[QUAC_k4$Pop == "Porter",]$Cluster
}
sum(QUAC_k4$cluster_match)
144/164
#create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster)))
QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]))
#calculate if the match is correct
QUAC_k4$cluster_match <- gsub("_.*", "", QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$cluster_pop) == QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster
}
View(QUAC_k4)
gsub("_.*", "", QUAC_k4$cluster_pop)
#create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
cluster_pop[[cl]] <- names(which.max(table(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$Cluster)))
QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(QUAC_k4[QUAC_k4$Pop == pop_list[[cl]],]))
#calculate if the match is correct
QUAC_k4$cluster_match <- gsub("_.*", "", QUAC_k4$cluster_pop) == QUAC_k4$Cluster
}
sum(QUAC_k4$cluster_match)
157/164
ncol(QUAC_k4)
ncol(QUAC_k4)-4
ncol(QUAC_k4)-3
getwd
getwd()
#structure cluster match function
str_clust_match <- function(x){
#first, if there are rows with NA in the structure output, remove them
x <- na.omit(x)
##create columns that will save the clusters and match assignments
#create a column for the cluster result from structure
x$Cluster <- NA
#create a column cluster with a population attached column
x$cluster_pop <- NA
#create a column for matching
x$cluster_match <- NA
##loop to assign structure clusters to their referenced wild population
#for each row of the data frame, compare the cluster
for(c in 1:nrow(x)){
#first, determine the structure cluster for each wild population
#each structure output file should have the first column for individual name
#the second column is populations
#following that, all the numbers are cluster assignments
#3 is the first cluster column and the last 3 columns are the added columns
col_name <- x[c,3:ncol(x)-3] > 0.6
#if there is a "true" value, that means there is a major cluster for the pop
#assign it the name of the cluster that it is
if(any(col_name) == TRUE) {
x$Cluster[c] <- paste0("Cluster", which(col_name))
#if there is no true value, that means it was not assigned to a major cluster
#name these cases 'none'
}else{
x$Cluster[c] <- "None"
}
}
##now create a list of all the populations
#pop names need to stored in the second column
pop_list <- unique(x[,2])
#also, create a list to store all the cluster names
cluster_pop <- list()
#loop to create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
#determines the cluster assignment associated with the most individuals
cluster_pop[[cl]] <- names(which.max(table(x[x$Pop == pop_list[[cl]],]$Cluster)))
#saves cluster assignment to the data frame attached to its population
x[x$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(x[x$Pop == pop_list[[cl]],]))
#added column to determine if the match is correct
x$cluster_match <- gsub("_.*", "", x$cluster_pop) == x$Cluster
#output final data frame
return(x)
}
}
QUAC_q4 <- str_clust_match(QUAC_k4)
View(QUAC_q4)
QUAC_k4[c,3:ncol(QUAC_k4)-3] > 0.6
colnames(QUAC_k4)
colnames(QUAC_k4[c,3:ncol(QUAC_k4)-3] > 0.6)
QUAC_k4[(QUAC_k4[c,3:ncol(QUAC_k4)-3] > 0.6) == TRUE,]
QUAC_k4[(QUAC_k4[1,3:ncol(QUAC_k4)-3] > 0.6) == TRUE,]
row_name <- QUAC_k4[1,3:ncol(QUAC_k4)-3] > 0.6
row_name
names(which(row_name ))
colnames(which(row_name))
colnames(row_name)
apply(row_name, 1, function(u) paste( names(which(u)), collapse="," ) )
which(row_name)
which(QUAC_k4[c,3:ncol(QUAC_k4)-3] > 0.6)
which(QUAC_k4[1,3:ncol(QUAC_k4)-3] > 0.6)
row_name
row_name[,-c(1:2)]
col_name <- apply(row_name[,-c(1:2)], 1, function(u) paste(names(which(u))))
col_name <- apply(row_name[,c(3:6)], 1, function(u) paste(names(which(u))))
row_name[,c(3:6)]
dim(row_name[,c(3:6)],)
dim(row_name[,c(3:6)])
which(row_name[,c(3:6)])
names(which(row_name[,c(3:6)]))
col_name <- names(which(row_name[,c(3:6)]))
gsub(".*", "", col_name)
gsub("character", "", col_name)
gsub("C", "", col_name)
##loop to assign structure clusters to their referenced wild population
#for each row of the data frame, compare the cluster
for(c in 1:nrow(x)){
#first, determine the structure cluster for each wild population
#each structure output file should have the first column for individual name
#the second column is populations
#following that, all the numbers are cluster assignments
#3 is the first cluster column and the last 3 columns are the added columns
row_name <- x[c,3:ncol(x)-3] > 0.6
col_name <- names(which(row_name[,c(3:6)]))
#if there is a "true" value, that means there is a major cluster for the pop
#assign it the name of the cluster that it is
if(any(col_name) == TRUE) {
x$Cluster[c] <- paste0("Cluster", gsub("C", "", col_name))
#if there is no true value, that means it was not assigned to a major cluster
#name these cases 'none'
}else{
x$Cluster[c] <- "None"
}
}
#structure cluster match function
str_clust_match <- function(x){
#first, if there are rows with NA in the structure output, remove them
x <- na.omit(x)
##create columns that will save the clusters and match assignments
#create a column for the cluster result from structure
x$Cluster <- NA
#create a column cluster with a population attached column
x$cluster_pop <- NA
#create a column for matching
x$cluster_match <- NA
##loop to assign structure clusters to their referenced wild population
#for each row of the data frame, compare the cluster
for(c in 1:nrow(x)){
#first, determine the structure cluster for each wild population
#each structure output file should have the first column for individual name
#the second column is populations
#following that, all the numbers are cluster assignments
#3 is the first cluster column and the last 3 columns are the added columns
row_name <- x[c,3:ncol(x)-3] > 0.6
col_name <- names(which(row_name[,c(3:ncol(x)-3)]))
#if there is a "true" value, that means there is a major cluster for the pop
#assign it the name of the cluster that it is
if(any(col_name) == TRUE) {
x$Cluster[c] <- paste0("Cluster", gsub("C", "", col_name))
#if there is no true value, that means it was not assigned to a major cluster
#name these cases 'none'
}else{
x$Cluster[c] <- "None"
}
}
##now create a list of all the populations
#pop names need to stored in the second column
pop_list <- unique(x[,2])
#also, create a list to store all the cluster names
cluster_pop <- list()
#loop to create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
#determines the cluster assignment associated with the most individuals
cluster_pop[[cl]] <- names(which.max(table(x[x$Pop == pop_list[[cl]],]$Cluster)))
#saves cluster assignment to the data frame attached to its population
x[x$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(x[x$Pop == pop_list[[cl]],]))
#added column to determine if the match is correct
x$cluster_match <- gsub("_.*", "", x$cluster_pop) == x$Cluster
#output final data frame
return(x)
}
}
QUAC_q4 <- str_clust_match(QUAC_k4)
#structure cluster match function
str_clust_match <- function(x){
#first, if there are rows with NA in the structure output, remove them
x <- na.omit(x)
##create columns that will save the clusters and match assignments
#create a column for the cluster result from structure
x$Cluster <- NA
#create a column cluster with a population attached column
x$cluster_pop <- NA
#create a column for matching
x$cluster_match <- NA
##loop to assign structure clusters to their referenced wild population
#for each row of the data frame, compare the cluster
for(c in 1:nrow(x)){
#first, determine the structure cluster for each wild population
#each structure output file should have the first column for individual name
#the second column is populations
#following that, all the numbers are cluster assignments
#3 is the first cluster column and the last 3 columns are the added columns
row_name <- x[c,3:ncol(x)-3] > 0.6
#if there is a "true" value, that means there is a major cluster for the pop
#assign it the name of the cluster that it is
if(any(row_name) == TRUE) {
#first reduce the cluster name to a number
col_name <- names(which(row_name[,c(3:ncol(x)-3)]))
#then combine with the word cluster
x$Cluster[c] <- paste0("Cluster", gsub("C", "", col_name))
#if there is no true value, that means it was not assigned to a major cluster
#name these cases 'none'
}else{
x$Cluster[c] <- "None"
}
}
##now create a list of all the populations
#pop names need to stored in the second column
pop_list <- unique(x[,2])
#also, create a list to store all the cluster names
cluster_pop <- list()
#loop to create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
#determines the cluster assignment associated with the most individuals
cluster_pop[[cl]] <- names(which.max(table(x[x$Pop == pop_list[[cl]],]$Cluster)))
#saves cluster assignment to the data frame attached to its population
x[x$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(x[x$Pop == pop_list[[cl]],]))
#added column to determine if the match is correct
x$cluster_match <- gsub("_.*", "", x$cluster_pop) == x$Cluster
#output final data frame
return(x)
}
}
str_clust_match(QUAC_k4)
##create columns that will save the clusters and match assignments
#create a column for the cluster result from structure
x$Cluster <- NA
#create a column cluster with a population attached column
x$cluster_pop <- NA
#create a column for matching
x$cluster_match <- NA
names(which(row_name[,c(3:ncol(QUAC_k4)-3)]))
names(which(row_name[,c(3:ncol(QUAC_k4)-3)]))[3]
#structure cluster match function
str_clust_match <- function(x){
#first, if there are rows with NA in the structure output, remove them
x <- na.omit(x)
##create columns that will save the clusters and match assignments
#create a column for the cluster result from structure
x$Cluster <- NA
#create a column cluster with a population attached column
x$cluster_pop <- NA
#create a column for matching
x$cluster_match <- NA
##loop to assign structure clusters to their referenced wild population
#for each row of the data frame, compare the cluster
for(c in 1:nrow(x)){
#first, determine the structure cluster for each wild population
#each structure output file should have the first column for individual name
#the second column is populations
#following that, all the numbers are cluster assignments
#3 is the first cluster column and the last 3 columns are the added columns
row_name <- x[c,3:ncol(x)-3] > 0.6
#if there is a "true" value, that means there is a major cluster for the pop
#assign it the name of the cluster that it is
if(any(row_name) == TRUE) {
#first reduce the cluster name to a number
col_name <- names(which(row_name[,c(3:ncol(x)-3)]))[3]
#then combine with the word cluster
x$Cluster[c] <- paste0("Cluster", gsub("C", "", col_name))
#if there is no true value, that means it was not assigned to a major cluster
#name these cases 'none'
}else{
x$Cluster[c] <- "None"
}
}
##now create a list of all the populations
#pop names need to stored in the second column
pop_list <- unique(x[,2])
#also, create a list to store all the cluster names
cluster_pop <- list()
#loop to create a column to link populations to each cluster
for(cl in 1:length(pop_list)){
#determines the cluster assignment associated with the most individuals
cluster_pop[[cl]] <- names(which.max(table(x[x$Pop == pop_list[[cl]],]$Cluster)))
#saves cluster assignment to the data frame attached to its population
x[x$Pop == pop_list[[cl]],]$cluster_pop <- rep(paste0(cluster_pop[[cl]], "_", pop_list[[cl]]),
nrow(x[x$Pop == pop_list[[cl]],]))
#added column to determine if the match is correct
x$cluster_match <- gsub("_.*", "", x$cluster_pop) == x$Cluster
#output final data frame
return(x)
}
}
str_clust_match(QUAC_k4)
