#list of scenarios
species_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#load in function to calculate allele frequency categories
source("../Analyses/RScripts/Fa_sample_funcs.R")
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling <- function(sp_wild_genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_sp_wild_genind <- seppop(sp_wild_genind)[[2]]
n_total_indivs <- length(sp_wild_sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind_temp@tab[sample(1:nrow(sp_wild_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(sp,"_resampling", n_drop_file, ".csv"))
}
}
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling <- function(genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_wild_genind <- seppop(genind)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(sp,"_resampling", n_drop_file, ".csv"))
}
}
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling <- function(genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(genind)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(sp,"_resampling", n_drop_file, ".csv"))
}
}
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
sp_resample <- resampling[-1,c(2:6)]
resampling_df <- sp_resample[-1,c(2:6)]
###This function is run to output the resampling graphs for
##
sp_resample <- read.csv("../Results/Garden_Wild_Comparison/QUAC_wK_resampling_ndrop0.csv")
###This function is run to output the resampling graphs for
##
sp_resample <- read.csv("../Analyses/Results/Garden_Wild_Comparison/QUAC_wK_resampling_ndrop0.csv")
resampling_df <- sp_resample[-1,c(2:6)]
#add points
plot(sp_resample[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,200), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
sp_resample[-1,c(2:6)]
#add points
plot(resampling_df[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,200), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
#add points
plot(resampling_df[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,172), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
points(resampling_df[,2], col = "firebrick", pch = 20, cex = 1.2)
points(resampling_df[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(resampling_df[,4], col = "coral", pch = 20, cex = 1.2)
points(resampling_df[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"))
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pch = "-")
#add points
plot(resampling_df[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,172), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
points(resampling_df[,2], col = "firebrick", pch = 20, cex = 1.2)
points(resampling_df[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(resampling_df[,4], col = "coral", pch = 20, cex = 1.2)
points(resampling_df[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pch = 17)
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pch = "_")
resampling_plot <- function(resampling){
resampling_df <- sp_resample[-1,c(2:6)]
#write PDF with name
pdf(paste0(sp, n_drop,".pdf"))
#add points
plot(resampling_df[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,172), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
points(resampling_df[,2], col = "firebrick", pch = 20, cex = 1.2)
points(resampling_df[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(resampling_df[,4], col = "coral", pch = 20, cex = 1.2)
points(resampling_df[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pch = "_")
dev.off()
}
########################################
#     Reporting Resampling Results     #
########################################
setwd("../Analyses/Results/Garden_Wild_Comparison")
resampling_list <- list.files(pattern = "resampling")
resampling_list
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling <- function(genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(genind)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(sp,"_resampling_df", n_drop_file, ".csv"))
}
}
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
#######################
#     Load files      #
#######################
#set working directory to load in data files
setwd("../../Data_Files")
setwd("../../../Data_Files")
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling <- function(genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(genind)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
setwd("../../Analyses/Results/Garden_Wild_Comparison")
write.csv(all_mean, paste0(sp,"_resampling_df", n_drop_file, ".csv"))
}
}
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling <- function(genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(genind)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(sp,"_resampling_df", n_drop_file, ".csv"))
}
}
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
resampling_plot <- function(resampling){
resampling_df <- sp_resample[-1,c(2:6)]
#write PDF with name
pdf(paste0(sp,".pdf"))
#add points
plot(resampling_df[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,172), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
points(resampling_df[,2], col = "firebrick", pch = 20, cex = 1.2)
points(resampling_df[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(resampling_df[,4], col = "coral", pch = 20, cex = 1.2)
points(resampling_df[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pch = "_")
dev.off()
}
########################################
#     Reporting Resampling Results     #
########################################
setwd("../Analyses/Results/Garden_Wild_Comparison")
resampling_list <- list.files(pattern = "resampling_df")
for(sp in 1:length(resampling_list)){
#load in data files
sp_resampling <- read.csv(resampling_list[[sp]])
#export plots for each
sp_resampling_plot <- resampling_plot(sp_resampling, )
}
resampling_list
gsub("\\_.*","",resampling_list)
gsub("\\..*","",resampling_list)
resampling_plot <- function(resampling, sp){
resampling_df <- resampling[-1,c(2:6)]
#write PDF with name
pdf(paste0(sp,"_resample_plot.pdf"))
#add points
plot(resampling_df[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,172), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
points(resampling_df[,2], col = "firebrick", pch = 20, cex = 1.2)
points(resampling_df[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(resampling_df[,4], col = "coral", pch = 20, cex = 1.2)
points(resampling_df[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pch = "_")
dev.off()
}
for(sp in 1:length(resampling_list)){
#load in data files
sp_resampling <- read.csv(resampling_list[[sp]])
#export plots for each
sp_resampling_plot <- resampling_plot(sp_resampling, gsub("\\..*","",resampling_list))
}
resampling_list <- list.files(pattern = "resampling_df")
resampling_list
dev.off()
dev.off()
resampling_plot <- function(resampling, sp){
resampling_df <- resampling[-1,c(2:6)]
#write PDF with name
pdf(paste0(sp,"_resample_plot.pdf"))
#add points
plot(resampling_df[,1], col = "red", pch = 20, xlab = "Number of Individuals",
ylab = "Percent Diversity Capture", xlim = c(0,172), ylim = c(0,100), cex = 1.2,
main = "Percent Diversity Capture (All Alleles Included)")
points(resampling_df[,2], col = "firebrick", pch = 20, cex = 1.2)
points(resampling_df[,3], col = "darkorange3", pch = 20, cex = 1.2)
points(resampling_df[,4], col = "coral", pch = 20, cex = 1.2)
points(resampling_df[,5], col = "deeppink4", pch = 20, cex = 1.2)
legend('bottomright', legend = c("Global", "Very Common", "Common", "Uncommon","Rare"),
col = c("red", "firebrick", "darkorange3", "coral", "deeppink4"), pch = "_")
dev.off()
}
for(sp in 1:length(resampling_list)){
#load in data files
sp_resampling <- read.csv(resampling_list[[sp]])
#export plots for each
sp_resampling_plot <- resampling_plot(sp_resampling, gsub("\\..*","",resampling_list))
}
sp_resampling
resampling_list <- list.files(pattern = "resampling_df")
#load in data files
sp_resampling <- read.csv(resampling_list[[sp]])
resampling_list
#load in data files
sp_resampling <- read.csv(resampling_list[[sp]])
resampling_list <- list.files(pattern = "resampling_df")
