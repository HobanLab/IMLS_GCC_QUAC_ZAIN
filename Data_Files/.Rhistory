##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[1+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[1+4]]))
#repool to calculate diversity stats
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#if statement for EST and gSSR comparison - QUAC only, sp == 1, sp == 2
if(sp == 1|sp == 2){
###calculate diversity stats for all scenarios
##just determine wild and garden diversity levels
#calculate allelic richness and create data frame
sp_allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#calculate heterozygosity and create data frame
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp, summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
sp_hexp_df <- gather(sp_hexp)
#name for category
sp_allrich_df$cat_type <- paste0(sp_allrich_df[,1],"_allrich")
sp_hexp_df$cat_type <- paste0(sp_hexp_df[,1],"hexp")
##separate by loci combination
#gSSR genind object
sp_gSSR_genind <- sp_garden_wild_genind[loc = QUAC_gSSR_loci]
#calculate allelic richness and create data frame
sp_gSSR_allrich <- gather(allelic.richness(sp_gSSR_genind)$Ar)
#calculate hexp and create data frame
sp_gSSR_hexp <- as.data.frame(cbind( summary(seppop(sp_gSSR_genind)[[1]])$Hexp,  summary(seppop(sp_gSSR_genind)[[2]])$Hexp))
colnames(sp_gSSR_hexp) <- c("Garden", "Wild")
sp_gSSR_hexp <- gather(sp_gSSR_hexp)
#create rownames with sections of names
sp_gSSR_allrich$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_allrich")
sp_gSSR_hexp$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_hexp")
###calculate diversity stats for all scenarios
##separate by loci combination
#EST SSR genind object
sp_EST_genind <- sp_garden_wild_genind[loc = QUAC_EST_loci]
#calculate allelic richness and create data frame
sp_EST_allrich <- gather(allelic.richness(sp_EST_genind)$Ar)
#calculate hexp and create data frame
sp_EST_hexp <- as.data.frame(cbind(summary(seppop(sp_EST_genind)[[1]])$Hexp,  summary(seppop(sp_EST_genind)[[2]])$Hexp))
colnames(sp_EST_hexp) <- c("Garden", "Wild")
sp_EST_hexp <- gather(sp_EST_hexp)
#create rownames with sections of names
sp_EST_allrich$cat_type <- paste0(sp_EST_allrich[,1], "_EST_allrich")
sp_EST_hexp$cat_type <- paste0(sp_EST_hexp[,1], "_EST_hexp")
##combine all categories for statistical tests
#all rich
sp_allrich_allcat_df <- rbind(sp_allrich_df, sp_gSSR_allrich, sp_EST_allrich)
#hexp
sp_hexp_allcat_df <- rbind(sp_hexp_df, sp_gSSR_hexp, sp_EST_hexp)
#summary data frames
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(sp_allrich_allcat_df[,2]~sp_allrich_allcat_df[,3])[3]$p.value
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_allcat_df[,2]~sp_hexp_allcat_df[,3])[3]$p.value
}else{
#combining into a df
allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#run t-test
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(allrich_df[,2]~allrich_df[,1])[3]$p.value
#run hexp code
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp,  summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
#create data frame for hexp
sp_hexp_df <- gather(sp_hexp)
#save p-value for hexp
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_df[,2]~sp_hexp_df[,1])[3]$p.value
}
}
sp_allrich_hexp_pvalue
#pvalue data frame
sp_allrich_hexp_pvalue <- matrix(nrow = length(sp_genind_list), ncol = 2)
colnames(sp_allrich_hexp_pvalue) <- c("All_Rich", "Hexp")
rownames(sp_allrich_hexp_pvalue) <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(sp_genind_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(pop_list[[sp]]))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[sp+4]]))
#repool to calculate diversity stats
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#if statement for EST and gSSR comparison - QUAC only, sp == 1, sp == 2
if(sp == 1|sp == 2){
###calculate diversity stats for all scenarios
##just determine wild and garden diversity levels
#calculate allelic richness and create data frame
sp_allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#calculate heterozygosity and create data frame
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp, summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
sp_hexp_df <- gather(sp_hexp)
#name for category
sp_allrich_df$cat_type <- paste0(sp_allrich_df[,1],"_allrich")
sp_hexp_df$cat_type <- paste0(sp_hexp_df[,1],"hexp")
##separate by loci combination
#gSSR genind object
sp_gSSR_genind <- sp_garden_wild_genind[loc = QUAC_gSSR_loci]
#calculate allelic richness and create data frame
sp_gSSR_allrich <- gather(allelic.richness(sp_gSSR_genind)$Ar)
#calculate hexp and create data frame
sp_gSSR_hexp <- as.data.frame(cbind( summary(seppop(sp_gSSR_genind)[[1]])$Hexp,  summary(seppop(sp_gSSR_genind)[[2]])$Hexp))
colnames(sp_gSSR_hexp) <- c("Garden", "Wild")
sp_gSSR_hexp <- gather(sp_gSSR_hexp)
#create rownames with sections of names
sp_gSSR_allrich$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_allrich")
sp_gSSR_hexp$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_hexp")
###calculate diversity stats for all scenarios
##separate by loci combination
#EST SSR genind object
sp_EST_genind <- sp_garden_wild_genind[loc = QUAC_EST_loci]
#calculate allelic richness and create data frame
sp_EST_allrich <- gather(allelic.richness(sp_EST_genind)$Ar)
#calculate hexp and create data frame
sp_EST_hexp <- as.data.frame(cbind(summary(seppop(sp_EST_genind)[[1]])$Hexp,  summary(seppop(sp_EST_genind)[[2]])$Hexp))
colnames(sp_EST_hexp) <- c("Garden", "Wild")
sp_EST_hexp <- gather(sp_EST_hexp)
#create rownames with sections of names
sp_EST_allrich$cat_type <- paste0(sp_EST_allrich[,1], "_EST_allrich")
sp_EST_hexp$cat_type <- paste0(sp_EST_hexp[,1], "_EST_hexp")
##combine all categories for statistical tests
#all rich
sp_allrich_allcat_df <- rbind(sp_allrich_df, sp_gSSR_allrich, sp_EST_allrich)
#hexp
sp_hexp_allcat_df <- rbind(sp_hexp_df, sp_gSSR_hexp, sp_EST_hexp)
#summary data frames
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(sp_allrich_allcat_df[,2]~sp_allrich_allcat_df[,3])[3]$p.value
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_allcat_df[,2]~sp_hexp_allcat_df[,3])[3]$p.value
}else{
#combining into a df
allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#run t-test
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(allrich_df[,2]~allrich_df[,1])[3]$p.value
#run hexp code
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp,  summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
#create data frame for hexp
sp_hexp_df <- gather(sp_hexp)
#save p-value for hexp
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_df[,2]~sp_hexp_df[,1])[3]$p.value
}
}
sp_allrich_hexp_pvalue
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[1]]), ncode = 3)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[1]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(pop_list[[1]]))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[1+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[1+4]]))
#repool to calculate diversity stats
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#if statement for EST and gSSR comparison - QUAC only, sp == 1, sp == 2
if(sp == 1|sp == 2){
###calculate diversity stats for all scenarios
##just determine wild and garden diversity levels
#calculate allelic richness and create data frame
sp_allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#calculate heterozygosity and create data frame
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp, summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
sp_hexp_df <- gather(sp_hexp)
#name for category
sp_allrich_df$cat_type <- paste0(sp_allrich_df[,1],"_allrich")
sp_hexp_df$cat_type <- paste0(sp_hexp_df[,1],"hexp")
##separate by loci combination
#gSSR genind object
sp_gSSR_genind <- sp_garden_wild_genind[loc = QUAC_gSSR_loci]
#calculate allelic richness and create data frame
sp_gSSR_allrich <- gather(allelic.richness(sp_gSSR_genind)$Ar)
#calculate hexp and create data frame
sp_gSSR_hexp <- as.data.frame(cbind( summary(seppop(sp_gSSR_genind)[[1]])$Hexp,  summary(seppop(sp_gSSR_genind)[[2]])$Hexp))
colnames(sp_gSSR_hexp) <- c("Garden", "Wild")
sp_gSSR_hexp <- gather(sp_gSSR_hexp)
#create rownames with sections of names
sp_gSSR_allrich$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_allrich")
sp_gSSR_hexp$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_hexp")
###calculate diversity stats for all scenarios
##separate by loci combination
#EST SSR genind object
sp_EST_genind <- sp_garden_wild_genind[loc = QUAC_EST_loci]
#calculate allelic richness and create data frame
sp_EST_allrich <- gather(allelic.richness(sp_EST_genind)$Ar)
#calculate hexp and create data frame
sp_EST_hexp <- as.data.frame(cbind(summary(seppop(sp_EST_genind)[[1]])$Hexp,  summary(seppop(sp_EST_genind)[[2]])$Hexp))
colnames(sp_EST_hexp) <- c("Garden", "Wild")
sp_EST_hexp <- gather(sp_EST_hexp)
#create rownames with sections of names
sp_EST_allrich$cat_type <- paste0(sp_EST_allrich[,1], "_EST_allrich")
sp_EST_hexp$cat_type <- paste0(sp_EST_hexp[,1], "_EST_hexp")
##combine all categories for statistical tests
#all rich
sp_allrich_allcat_df <- rbind(sp_allrich_df, sp_gSSR_allrich, sp_EST_allrich)
#hexp
sp_hexp_allcat_df <- rbind(sp_hexp_df, sp_gSSR_hexp, sp_EST_hexp)
#summary data frames
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(sp_allrich_allcat_df[,2]~sp_allrich_allcat_df[,3])[3]$p.value
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_allcat_df[,2]~sp_hexp_allcat_df[,3])[3]$p.value
}else{
#combining into a df
allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#run t-test
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(allrich_df[,2]~allrich_df[,1])[3]$p.value
#run hexp code
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp,  summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
#create data frame for hexp
sp_hexp_df <- gather(sp_hexp)
#save p-value for hexp
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_df[,2]~sp_hexp_df[,1])[3]$p.value
}
sp_allrich_hexp_pvalue
sp_allrich_allcat_df
allrich_final_df <- sp_allrich_allcat_df %>%
mutate(Treatment = gsub("^.*_","",sp_allrich_allcat_df$cat_type))
allrich_final_df
boxplot(sp_allrich_allcat_df[,2]~sp_allrich_allcat_df[,3])
allrich_final_df <- sp_allrich_allcat_df %>%
mutate(Treatment = gsub("\\*_","",sp_allrich_allcat_df$cat_type))
allrich_final_df
is.data.frame(sp_allrich_allcat_df)
colnames(sp_allrich_allcat_df)
ggplot(sp_allrich_allcat_df, aes(x=key, y=value, fill=cat_type))
library(ggplot2)
ggplot(sp_allrich_allcat_df, aes(x=key, y=value, fill=cat_type))
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value))
sp_allrich_allcat_df[,2]
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value))  +
geom_boxplot()
allrich_final_df <- sp_allrich_allcat_df %>%
mutate(Treatment = gsub(".*_","",sp_allrich_allcat_df$cat_type))
allrich_final_df
allrich_final_df <- sp_allrich_allcat_df %>%
mutate(Treatment = gsub('_.*',"",sp_allrich_allcat_df$cat_type))
View(allrich_final_df)
allrich_final_df <- sp_allrich_allcat_df %>%
mutate(Treatment = gsub('_.*',"",sp_allrich_allcat_df$cat_type))
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)
ggplot(allrich_final_df, aes(x=cat_type, y=value, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)
ggplot(allrich_final_df, aes(x=cat_type, y=value, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
#theme_bw() + facet_wrap(~Species, scale="free") +
#scale_x_discrete(labels=c("Garden","Wild", "gSSR_Garden", "EST_Garden","gSSR_Wild", "EST_Wild")) +
scale_fill_manual(values = c("darkseagreen1", "darkgreen"))
ggplot(allrich_final_df, aes(x=cat_type, y=value, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
#theme_bw() + facet_wrap(~Species, scale="free") +
#scale_x_discrete(labels=c("Garden","Wild", "gSSR_Garden", "EST_Garden","gSSR_Wild", "EST_Wild")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen3"))
ggplot(allrich_final_df, aes(x=cat_type, y=value, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
#theme_bw() + facet_wrap(~Species, scale="free") +
#scale_x_discrete(labels=c("Garden","Wild", "gSSR_Garden", "EST_Garden","gSSR_Wild", "EST_Wild")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
ggplot(allrich_final_df, aes(x=cat_type, y=value, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() + facet_wrap(~Species, scale="free") +
#scale_x_discrete(labels=c("Garden","Wild", "gSSR_Garden", "EST_Garden","gSSR_Wild", "EST_Wild")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
allrich_final_df
sp_allrich_allcat_df
colnames(sp_allrich_allcat_df) <- c("Treatment", "All_Rich", "Category")
ggplot(allrich_final_df, aes(x=Category, y=All_Rich, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "gSSR_Garden", "EST_Garden","gSSR_Wild", "EST_Wild")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
colnames(sp_allrich_allcat_df) <- c("Treatment", "All_Rich", "Category")
ggplot(allrich_final_df, aes(x=Category, y=All_Rich, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "gSSR_Garden", "EST_Garden","gSSR_Wild", "EST_Wild")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
ggplot(sp_allrich_allcat_df, aes(x=Category, y=All_Rich, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "gSSR_Garden", "EST_Garden","gSSR_Wild", "EST_Wild")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
gsub("_allrich","", sp_allrich_allcat_df[,3])
sp_allrich_allcat_df <- sp_allrich_allcat_df %>%
mutate(clean_cat = gsub("_allrich","", sp_allrich_allcat_df[,3]))
sp_allrich_allcat_df
ggplot(sp_allrich_allcat_df, aes(x=Category, y=All_Rich, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "Garden_gSSR", "Wild_gSSR", "Garden_EST", "Wild_EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
ggplot(sp_allrich_allcat_df, aes(x=Category, y=All_Rich, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "Garden_gSSR", "Wild_gSSR", "Garden_EST", "Wild_EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"),
labels = expression("Garden", "Wild"))
as.factor(sp_allrich_allcat_df[,1])
as.factor(sp_allrich_allcat_df[,4])
sp_allrich_allcat_df <- as.factor(sp_allrich_allcat_df[,4])
sp_allrich_allcat_df
##combine all categories for statistical tests
#all rich
sp_allrich_allcat_df <- rbind(sp_allrich_df, sp_gSSR_allrich, sp_EST_allrich)
levels(sp_allrich_allcat_df)
levels(sp_allrich_allcat_df[,4])
levels(sp_allrich_allcat_df[,3])
sp_allrich_allcat_df[,3]
as.factor( sp_allrich_allcat_df[,3])
as.factor(sp_allrich_allcat_df[,3])
length(levels(as.factor(sp_allrich_allcat_df[,3])))
levels(as.factor(sp_allrich_allcat_df[,3])) <- 1:6
levels(as.factor(sp_allrich_allcat_df[,3])) <- c(1:6)
as.factor()
levels(sp_allrich_allcat_df[,3]) <- c(1:6)
sp_allrich_allcat_df[,3]
ggplot(sp_allrich_allcat_df, aes(x=Category, y=All_Rich, fill = Treatment))  +
geom_boxplot() + xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "Garden_gSSR", "Wild_gSSR", "Garden_EST", "Wild_EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"),
labels = expression("Garden", "Wild"))
colanmes(sp_allrich_allcat_df)
colnames(sp_allrich_allcat_df)
ggplot(sp_allrich_allcat_df, aes(x=key, y=value))  + geom_boxplot()
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value))  + geom_boxplot()
##combine all categories for statistical tests
#all rich
sp_allrich_allcat_df <- rbind(sp_allrich_df, sp_gSSR_allrich, sp_EST_allrich)
sp_allrich_allcat_df$cat_type <- factor(sp_allrich_allcat_df$cat_type , levels=c("Garden_allrich", "Wild_allrich",
"Garden_gSSR_allrich", "Wild_gSSR_allrich",
"Garden_EST_allrich", "Wild_EST_allrich"))
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value))  + geom_boxplot()
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value))  + geom_boxplot()
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value))  + geom_boxplot() +
xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "Garden_gSSR", "Wild_gSSR", "Garden_EST", "Wild_EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value, fill = key))  + geom_boxplot() +
xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden","Wild", "Garden_gSSR", "Wild_gSSR", "Garden_EST", "Wild_EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
ggplot(sp_allrich_allcat_df, aes(x=cat_type, y=value, fill = key))  + geom_boxplot() +
xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden", "Wild", "Garden gSSR", "Wild gSSR", "Garden EST", "Wild EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
c
colnames(sp_allrich_allcat_df) <- c("Pop_Type", "All_Rich", "Category")
ggplot(sp_allrich_allcat_df, aes(x=Category, y=All_Rich, fill = Pop_Type))  + geom_boxplot() +
xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden", "Wild", "Garden gSSR", "Wild gSSR", "Garden EST", "Wild EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
#set factor levels to compare between
sp_allrich_allcat_df$cat_type <- factor(x$cat_type, levels=c("Garden_allrich", "Wild_allrich",
"Garden_gSSR_allrich", "Wild_gSSR_allrich",
"Garden_EST_allrich", "Wild_EST_allrich"))
#set factor levels to compare between
sp_allrich_allcat_df$cat_type <- factor(sp_allrich_allcat_df$cat_type, levels=c("Garden_allrich", "Wild_allrich",
"Garden_gSSR_allrich", "Wild_gSSR_allrich",
"Garden_EST_allrich", "Wild_EST_allrich"))
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[1]]), ncode = 3)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[1]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(pop_list[[1]]))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[1+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[1+4]]))
#repool to calculate diversity stats
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#if statement for EST and gSSR comparison - QUAC only, sp == 1, sp == 2
if(sp == 1|sp == 2){
###calculate diversity stats for all scenarios
##just determine wild and garden diversity levels
#calculate allelic richness and create data frame
sp_allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#calculate heterozygosity and create data frame
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp, summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
sp_hexp_df <- gather(sp_hexp)
#name for category
sp_allrich_df$cat_type <- paste0(sp_allrich_df[,1],"_allrich")
sp_hexp_df$cat_type <- paste0(sp_hexp_df[,1],"hexp")
##separate by loci combination
#gSSR genind object
sp_gSSR_genind <- sp_garden_wild_genind[loc = QUAC_gSSR_loci]
#calculate allelic richness and create data frame
sp_gSSR_allrich <- gather(allelic.richness(sp_gSSR_genind)$Ar)
#calculate hexp and create data frame
sp_gSSR_hexp <- as.data.frame(cbind( summary(seppop(sp_gSSR_genind)[[1]])$Hexp,  summary(seppop(sp_gSSR_genind)[[2]])$Hexp))
colnames(sp_gSSR_hexp) <- c("Garden", "Wild")
sp_gSSR_hexp <- gather(sp_gSSR_hexp)
#create rownames with sections of names
sp_gSSR_allrich$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_allrich")
sp_gSSR_hexp$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_hexp")
###calculate diversity stats for all scenarios
##separate by loci combination
#EST SSR genind object
sp_EST_genind <- sp_garden_wild_genind[loc = QUAC_EST_loci]
#calculate allelic richness and create data frame
sp_EST_allrich <- gather(allelic.richness(sp_EST_genind)$Ar)
#calculate hexp and create data frame
sp_EST_hexp <- as.data.frame(cbind(summary(seppop(sp_EST_genind)[[1]])$Hexp,  summary(seppop(sp_EST_genind)[[2]])$Hexp))
colnames(sp_EST_hexp) <- c("Garden", "Wild")
sp_EST_hexp <- gather(sp_EST_hexp)
#create rownames with sections of names
sp_EST_allrich$cat_type <- paste0(sp_EST_allrich[,1], "_EST_allrich")
sp_EST_hexp$cat_type <- paste0(sp_EST_hexp[,1], "_EST_hexp")
##combine all categories for statistical tests
#all rich
sp_allrich_allcat_df <- rbind(sp_allrich_df, sp_gSSR_allrich, sp_EST_allrich)
#hexp
sp_hexp_allcat_df <- rbind(sp_hexp_df, sp_gSSR_hexp, sp_EST_hexp)
#summary data frames
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(sp_allrich_allcat_df[,2]~sp_allrich_allcat_df[,3])[3]$p.value
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_allcat_df[,2]~sp_hexp_allcat_df[,3])[3]$p.value
}else{
#combining into a df
allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#run t-test
sp_allrich_hexp_pvalue[sp,1] <- kruskal.test(allrich_df[,2]~allrich_df[,1])[3]$p.value
#run hexp code
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp,  summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
#create data frame for hexp
sp_hexp_df <- gather(sp_hexp)
#save p-value for hexp
sp_allrich_hexp_pvalue[sp,2] <- kruskal.test(sp_hexp_df[,2]~sp_hexp_df[,1])[3]$p.value
}
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[1]]), ncode = 3)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[1]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(pop_list[[1]]))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[1+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[1+4]]))
#repool to calculate diversity stats
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
###calculate diversity stats for all scenarios
##just determine wild and garden diversity levels
#calculate allelic richness and create data frame
sp_allrich_df <- gather(allelic.richness(sp_garden_wild_genind)$Ar)
#calculate heterozygosity and create data frame
sp_hexp <- as.data.frame(cbind(summary(seppop(sp_garden_wild_genind)[[1]])$Hexp, summary(seppop(sp_garden_wild_genind)[[2]])$Hexp))
colnames(sp_hexp) <- c("Garden", "Wild")
sp_hexp_df <- gather(sp_hexp)
#name for category
sp_allrich_df$cat_type <- paste0(sp_allrich_df[,1],"_allrich")
sp_hexp_df$cat_type <- paste0(sp_hexp_df[,1],"hexp")
##separate by loci combination
#gSSR genind object
sp_gSSR_genind <- sp_garden_wild_genind[loc = QUAC_gSSR_loci]
#calculate allelic richness and create data frame
sp_gSSR_allrich <- gather(allelic.richness(sp_gSSR_genind)$Ar)
#calculate hexp and create data frame
sp_gSSR_hexp <- as.data.frame(cbind( summary(seppop(sp_gSSR_genind)[[1]])$Hexp,  summary(seppop(sp_gSSR_genind)[[2]])$Hexp))
colnames(sp_gSSR_hexp) <- c("Garden", "Wild")
sp_gSSR_hexp <- gather(sp_gSSR_hexp)
#create rownames with sections of names
sp_gSSR_allrich$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_allrich")
sp_gSSR_hexp$cat_type <- paste0(sp_gSSR_allrich[,1], "_gSSR_hexp")
###calculate diversity stats for all scenarios
##separate by loci combination
#EST SSR genind object
sp_EST_genind <- sp_garden_wild_genind[loc = QUAC_EST_loci]
#calculate allelic richness and create data frame
sp_EST_allrich <- gather(allelic.richness(sp_EST_genind)$Ar)
#calculate hexp and create data frame
sp_EST_hexp <- as.data.frame(cbind(summary(seppop(sp_EST_genind)[[1]])$Hexp,  summary(seppop(sp_EST_genind)[[2]])$Hexp))
colnames(sp_EST_hexp) <- c("Garden", "Wild")
sp_EST_hexp <- gather(sp_EST_hexp)
#create rownames with sections of names
sp_EST_allrich$cat_type <- paste0(sp_EST_allrich[,1], "_EST_allrich")
sp_EST_hexp$cat_type <- paste0(sp_EST_hexp[,1], "_EST_hexp")
##combine all categories for statistical tests
#all rich
sp_allrich_allcat_df <- rbind(sp_allrich_df, sp_gSSR_allrich, sp_EST_allrich)
#hexp
sp_hexp_allcat_df <- rbind(sp_hexp_df, sp_gSSR_hexp, sp_EST_hexp)
sp_allrich_allcat_df
#set factor levels to compare between
sp_allrich_allcat_df$cat_type <- factor(sp_allrich_allcat_df$cat_type, levels=c("Garden_allrich", "Wild_allrich",
"Garden_gSSR_allrich", "Wild_gSSR_allrich",
"Garden_EST_allrich", "Wild_EST_allrich"))
colnames(sp_allrich_allcat_df) <- c("Pop_Type", "All_Rich", "Category")
ggplot(sp_allrich_allcat_df, aes(x=Category, y=All_Rich, fill = Pop_Type))  + geom_boxplot() +
xlab("Population Type") + ylab("Allelic Richness") + ylim(0,20)  +
theme_bw() +
scale_x_discrete(labels=c("Garden", "Wild", "Garden gSSR", "Wild gSSR", "Garden EST", "Wild EST")) +
scale_fill_manual(values = c("darkseagreen1", "darkseagreen4"))
