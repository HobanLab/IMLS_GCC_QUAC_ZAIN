fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of half-sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(x[x[,2] == pop_names[[pop]],][,1])
}
#calculate percent of half sibs
fullsib_wild_relate_sum <- colSums(relate_pop_df)
#save output
fullsib_wild_sum <- fullsib_wild_relate_sum[2]/fullsib_wild_relate_sum[1]
#name columns
return(fullsib_wild_sum)
}
#########################################
#           Relatedness Df Code         #
#########################################
##halfsibs
#function to output the % of halfsibs in all garden pops
halfsib_loiselle_sum_garden <- function(x){
#first need to run the relatedness analysis with just garden/wild designation
relatedness_df <- Demerelate(x[,-2], object = T, value = "loiselle", NA.rm	= TRUE)
#next, determine the names of halfsibs
halfsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness$Garden) > 0.125))
#clean front characters
halfsibs_clean_front <- gsub("^.*\\.","", halfsibs_names)
#clean the duplicate name
halfsibs_clean_back <- gsub("^.*\\_","", halfsibs_clean_front)
#create list of unique individuals greater than and equal to half-sib relatedness
halfsib_list <- unique(halfsibs_clean_back)
#calculate percent of half-sibs
halfsib_sum <- length(halfsib_list)/length(x[x[,3] == "Garden",][,1])
#name columns
return(halfsib_sum)
}
#function to output the % of halfsibs in wild populations
halfsib_loiselle_sum_wild <- function(x){
#limit data frame to just wild populations
relate_wild_df <- x[x[,3] == "Wild",]
#run relatedness analysis with just wild population names - remove pop type
relatedness_df <- Demerelate(relate_wild_df[,-3], object = T, value = "loiselle", NA.rm	= TRUE, )
#create a population name list for each data frame
pop_names <- unique(x[x[,3] == "Wild",][,2])
#create a matrix to store # of related individuals
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 1)
#then create a loop to take the name of every population and assess the level of relatedness in each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
halfsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.125))
#now clean the front
halfsibs_clean_front <- gsub("^.*\\.","", halfsibs_names)
#clean the back for the list of halfsibs
halfsibs_clean_back <- gsub("^.*\\_","", halfsibs_clean_front)
#create list of half-sibs
halfsib_list <- unique(halfsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of half-sibs
relate_pop_df[pop,1] <- length(x[x[,2] == pop_names[[pop]],][,1])
}
#calculate percent of half sibs
halfsib_wild_relate_sum <- colSums(relate_pop_df)
#save output
halfsib_allwild_sum_df <- halfsib_wild_relate_sum[2]/halfsib_wild_relate_sum[1]
#name columns
return(halfsib_allwild_sum_df)
}
##full-sibs
#function to output the % of full sibs in all garden pops
fullsib_loiselle_sum_garden <- function(x){
#run relatedness analysis on individuals with only pop type - garden or wild
relatedness_df <- Demerelate(x[,-2], object = T, value = "loiselle", NA.rm	= TRUE)
#next, determine the names of full sibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness$Garden) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of sibs
fullsib_list <- unique(fullsibs_clean_back)
#calculate percent of sibs
fullsib_garden_sum <- length(fullsib_list)/length(x[x[,3] == "Garden",][,1])
#return percent of sibs
return(fullsib_garden_sum)
}
#function to output the % of full sibs in wild populations
fullsib_loiselle_sum_wild <- function(x){
#limit data frame to just wild individuals
relate_wild_df <- x[x[,3] == "Wild",]
#run relatedness analysis with wild individuals
relatedness_df <- Demerelate(relate_wild_df[,-3], object = T, value = "loiselle", NA.rm	= TRUE)
#create a population name list for each data frame
pop_names <- unique(x[x[,3] == "Wild",][,2])
#create a matrix for relatedness
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 1)
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(x[x[,2] == pop_names[[pop]],][,1])
}
#calculate percent of full sibs
fullsib_wild_relate_sum <- colSums(relate_pop_df)
#save output
fullsib_wild_sum <- fullsib_wild_relate_sum[2]/fullsib_wild_relate_sum[1]
#name columns
return(fullsib_wild_sum)
}
#################################
#      Relatedness Analysis     #
#################################
##code to reduce data frames by half-sibling relatedness
#create a data frame to store results of half sib
sib_df <- matrix(nrow = length(scenario_list), ncol = 4)
#list clean data frames
sp_clean_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
#list clean genepop files
sp_clean_genepop_list <- list.files(path = "Adegenet_Files", pattern = "allpop_clean.gen")
#loop over species data frames
for(sp in 1:length(scenario_list)){
#load in garden data frame
sp_clean_temp_df <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[sp]]))
#convert genepop files to genind objects
sp_clean_temp_gen <- read.genepop(paste0("Adegenet_Files/",sp_clean_genepop_list[[sp]]), ncode = 3)
#name individuals in genind
rownames(sp_clean_temp_gen@tab) <- sp_clean_temp_df[,1]
#name pops
levels(sp_clean_temp_gen@pop) <- unique(sp_clean_temp_df[,2])
###Run relatedness reduction code
##Half-sibs
#Garden
sib_df[sp,1] <- halfsib_loiselle_sum_garden(sp_clean_temp_df)
#Wild
sib_df[sp,2] <- halfsib_loiselle_sum_wild(sp_clean_temp_df)
##Full sibs
#Garden
sib_df[sp,3] <- fullsib_loiselle_sum_garden(sp_clean_temp_df)
#Wild
sib_df[sp,4] <- fullsib_loiselle_sum_wild(sp_clean_temp_df)
}
sib_df
fullsib_loiselle_sum_garden(sp_clean_temp_df)
warnings()
#run relatedness analysis on individuals with only pop type - garden or wild
relatedness_df <- Demerelate(sp_clean_df[,-2], object = T, value = "loiselle", NA.rm	= TRUE)
#next, determine the names of full sibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness$Garden) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of sibs
fullsib_list <- unique(fullsibs_clean_back)
#calculate percent of sibs
fullsib_garden_sum <- length(fullsib_list)/length(x[x[,3] == "Garden",][,1])
#calculate percent of sibs
fullsib_garden_sum <- length(fullsib_list)/length(sp_clean_df[sp_clean_df[,3] == "Garden",][,1])
fullsib_garden_sum
sib_df
#limit data frame to just wild individuals
relate_wild_df <- sp_clean_df[sp_clean_df[,3] == "Wild",]
relate_wild_df
#run relatedness analysis with wild individuals
relatedness_df <- Demerelate(relate_wild_df[,-3], object = T, value = "loiselle", NA.rm	= TRUE)
#create a population name list for each data frame
pop_names <- unique(x[x[,3] == "Wild",][,2])
#create a population name list for each data frame
pop_names <- unique(sp_clean_df[sp_clean_df[,3] == "Wild",][,2])
pop_names
#create a matrix for relatedness
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 1)
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(x[x[,2] == pop_names[[pop]],][,1])
}
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(sp_clean_df[sp_clean_df[,2] == pop_names[[pop]],][,1])
}
relate_pop_df
#calculate percent of full sibs
fullsib_wild_relate_sum <- colSums(relate_pop_df)
fullsib_wild_relate_sum
#calculate percent of full sibs
fullsib_wild_relate_sum <- colSums(relate_pop_df)
#save output
fullsib_wild_sum <- fullsib_wild_relate_sum[2]/fullsib_wild_relate_sum[1]
fullsib_wild_sum
sum(relate_pop_df)
fullsib_list
relate_wild_df
#create a population name list for each data frame
pop_names <- unique(relate_wild_df[relate_wild_df[,3] == "Wild",][,2])
pop_names
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[1]]]) > 0.25))
fullsibs_names
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(relatedness_df[relatedness_df[,2] == pop_names[[1]],][,1])
relatedness_df
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(relate_wild_df[relate_wild_df[,2] == pop_names[[1]],][,1])
relate_pop_df
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[1,1] <- length(relate_wild_df[relate_wild_df[,2] == pop_names[[1]],][,1])
relate_pop_df
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(relate_wild_df[relate_wild_df[,2] == pop_names[[pop]],][,1])
}
relate_pop_df
#calculate percent of full sibs
fullsib_wild_relate_sum <- sum(relate_pop_df)
fullsib_wild_relate_sum
length(relate_wild_df[,1])
relate_wild_df[relate_wild_df$Pop == "ZFB",]
length(relate_wild_df[relate_wild_df$Pop == "ZFB",][,1])
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[1]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
length(fullsib_list)
#create a matrix for relatedness
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 1)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(fullsib_list)
relate_pop_df
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[1]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(fullsib_list)
}
relate_pop_df
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(fullsib_list)
}
relate_pop_df
sum(relate_pop_df)
682/751
#save output
fullsib_wild_sum <- fullsib_wild_relate_sum/length(relate_wild_df[,1])
fullsib_wild_sum
fullsib_wild_relate_sum
#calculate percent of full sibs
fullsib_wild_relate_sum <- sum(relate_pop_df)
#save output
fullsib_wild_sum <- fullsib_wild_relate_sum/length(relate_wild_df[,1])
fullsib_wild_sum
#function to output the % of full sibs in wild populations
fullsib_loiselle_sum_wild <- function(x){
#limit data frame to just wild individuals
relate_wild_df <- x[x[,3] == "Wild",]
#run relatedness analysis with wild individuals
relatedness_df <- Demerelate(relate_wild_df[,-3], object = T, value = "loiselle", NA.rm	= TRUE)
#create a population name list for each data frame
pop_names <- unique(relate_wild_df[relate_wild_df[,3] == "Wild",][,2])
#create a matrix for relatedness
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 1)
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(fullsib_list)
}
#calculate percent of full sibs
fullsib_wild_relate_sum <- sum(relate_pop_df)
#save output
fullsib_wild_sum <- fullsib_wild_relate_sum/length(relate_wild_df[,1])
#name columns
return(fullsib_wild_sum)
}
#################################
#      Relatedness Analysis     #
#################################
##code to reduce data frames by half-sibling relatedness
#create a data frame to store results of half sib
sib_df <- matrix(nrow = length(scenario_list), ncol = 4)
#list clean data frames
sp_clean_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
#list clean genepop files
sp_clean_genepop_list <- list.files(path = "Adegenet_Files", pattern = "allpop_clean.gen")
#loop over species data frames
for(sp in 1:length(scenario_list)){
#load in garden data frame
sp_clean_temp_df <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[sp]]))
#convert genepop files to genind objects
sp_clean_temp_gen <- read.genepop(paste0("Adegenet_Files/",sp_clean_genepop_list[[sp]]), ncode = 3)
#name individuals in genind
rownames(sp_clean_temp_gen@tab) <- sp_clean_temp_df[,1]
#name pops
levels(sp_clean_temp_gen@pop) <- unique(sp_clean_temp_df[,2])
###Run relatedness reduction code
##Half-sibs
#Garden
sib_df[sp,1] <- halfsib_loiselle_sum_garden(sp_clean_temp_df)
#Wild
sib_df[sp,2] <- halfsib_loiselle_sum_wild(sp_clean_temp_df)
##Full sibs
#Garden
sib_df[sp,3] <- fullsib_loiselle_sum_garden(sp_clean_temp_df)
#Wild
sib_df[sp,4] <- fullsib_loiselle_sum_wild(sp_clean_temp_df)
}
sib_df
#########################################
#           Relatedness Df Code         #
#########################################
##halfsibs
#function to output the % of halfsibs in all garden pops
halfsib_loiselle_sum_garden <- function(x){
#first need to run the relatedness analysis with just garden/wild designation
relatedness_df <- Demerelate(x[,-2], object = T, value = "loiselle", NA.rm	= TRUE)
#next, determine the names of halfsibs
halfsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness$Garden) > 0.125))
#clean front characters
halfsibs_clean_front <- gsub("^.*\\.","", halfsibs_names)
#clean the duplicate name
halfsibs_clean_back <- gsub("^.*\\_","", halfsibs_clean_front)
#create list of unique individuals greater than and equal to half-sib relatedness
halfsib_list <- unique(halfsibs_clean_back)
#calculate percent of half-sibs
halfsib_garden_sum <- length(halfsib_list)/length(x[x[,3] == "Garden",][,1])
#name columns
return(halfsib_garden_sum)
}
#function to output the % of halfsibs in wild populations
halfsib_loiselle_sum_wild <- function(x){
#limit data frame to just wild populations
relate_wild_df <- x[x[,3] == "Wild",]
#run relatedness analysis with just wild population names - remove pop type
relatedness_df <- Demerelate(relate_wild_df[,-3], object = T, value = "loiselle", NA.rm	= TRUE, )
#create a population name list for each data frame
pop_names <- unique(x[x[,3] == "Wild",][,2])
#create a matrix to store # of related individuals
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 1)
#then create a loop to take the name of every population and assess the level of relatedness in each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
halfsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.125))
#now clean the front
halfsibs_clean_front <- gsub("^.*\\.","", halfsibs_names)
#clean the back for the list of halfsibs
halfsibs_clean_back <- gsub("^.*\\_","", halfsibs_clean_front)
#create list of half-sibs
halfsib_list <- unique(halfsibs_clean_back)
#create a list with all of the numbers of related individuals
relate_pop_df[pop,1] <- length(halfsib_list)
}
#calculate percent of half sibs
halfsib_wild_relate_sum <- sum(relate_pop_df)
#save output
halfsib_wild_sum <- halfsib_wild_relate_sum/length(relate_wild_df[,1])
#name columns
return(halfsib_wild_sum)
}
##full-sibs
#function to output the % of full sibs in all garden pops
fullsib_loiselle_sum_garden <- function(x){
#run relatedness analysis on individuals with only pop type - garden or wild
relatedness_df <- Demerelate(x[,-2], object = T, value = "loiselle", NA.rm	= TRUE)
#next, determine the names of full sibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness$Garden) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of sibs
fullsib_list <- unique(fullsibs_clean_back)
#calculate percent of sibs
fullsib_garden_sum <- length(fullsib_list)/length(x[x[,3] == "Garden",][,1])
#return percent of sibs
return(fullsib_garden_sum)
}
#function to output the % of full sibs in wild populations
fullsib_loiselle_sum_wild <- function(x){
#limit data frame to just wild individuals
relate_wild_df <- x[x[,3] == "Wild",]
#run relatedness analysis with wild individuals
relatedness_df <- Demerelate(relate_wild_df[,-3], object = T, value = "loiselle", NA.rm	= TRUE)
#create a population name list for each data frame
pop_names <- unique(relate_wild_df[,2])
#create a matrix for relatedness
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 1)
#assess the level of relatedness in wild each pop
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
fullsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.25))
#now clean the front
fullsibs_clean_front <- gsub("^.*\\.","", fullsibs_names)
#clean the back for the list of sibs
fullsibs_clean_back <- gsub("^.*\\_","", fullsibs_clean_front)
#create list of full sibs
fullsib_list <- unique(fullsibs_clean_back)
#create data frame by pop with the total individual numbers and the # of full sibs
relate_pop_df[pop,1] <- length(fullsib_list)
}
#calculate percent of full sibs
fullsib_wild_relate_sum <- sum(relate_pop_df)
#save output
fullsib_wild_sum <- fullsib_wild_relate_sum/length(relate_wild_df[,1])
#return percent of full siblings
return(fullsib_wild_sum)
}
#################################
#      Relatedness Analysis     #
#################################
##code to reduce data frames by half-sibling relatedness
#create a data frame to store results of half sib
sib_df <- matrix(nrow = length(scenario_list), ncol = 4)
#list clean data frames
sp_clean_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
#list clean genepop files
sp_clean_genepop_list <- list.files(path = "Adegenet_Files", pattern = "allpop_clean.gen")
#loop over species data frames
for(sp in 1:length(scenario_list)){
#load in garden data frame
sp_clean_temp_df <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[sp]]))
#convert genepop files to genind objects
sp_clean_temp_gen <- read.genepop(paste0("Adegenet_Files/",sp_clean_genepop_list[[sp]]), ncode = 3)
#name individuals in genind
rownames(sp_clean_temp_gen@tab) <- sp_clean_temp_df[,1]
#name pops
levels(sp_clean_temp_gen@pop) <- unique(sp_clean_temp_df[,2])
###Run relatedness reduction code
##Half-sibs
#Garden
sib_df[sp,1] <- halfsib_loiselle_sum_garden(sp_clean_temp_df)
#Wild
sib_df[sp,2] <- halfsib_loiselle_sum_wild(sp_clean_temp_df)
##Full sibs
#Garden
sib_df[sp,3] <- fullsib_loiselle_sum_garden(sp_clean_temp_df)
#Wild
sib_df[sp,4] <- fullsib_loiselle_sum_wild(sp_clean_temp_df)
}
sib_df
#write out summary table
rownames(sib_df) <- scenario_list
sib_df
colnames(sib_df) <- c("Garden_HalfSibs", "Wild_Halfsibs", "Garden_FullSibs", "Wild_FullSibs")
sib_df
signif(sib_df*100,3)
#multiply by 100 and round
sib_df <- signif(sib_df*100,3)
#write out df
write.csv(sib_df, "../Analyses/Results/Garden_Wild_Comparison/sib_df.csv")
