rownames(allrich_df) <- scenario_list
###write out summary tables for allelic richness and hexp comparisons
##label data frames
colnames(allrich_df) <- c(species_list, "ZAIN_og_wo_smallpops",
"ZAIN_rebinned_wo_smallpops", "ZAIN_sample_wo_smallpops")
rownames(allrich_df) <- scenario_list
colnames(hexp_df) <- c(species_list, "ZAIN_og_wo_smallpops",
"ZAIN_rebinned_wo_smallpops", "ZAIN_sample_wo_smallpops")
rownames(hexp_df) <- scenario_list
#write out data frames
write.csv(allrich_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_ZAIN_sp_allrich_df.csv")
write.csv(hexp_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_ZAIN_sp_hexp_df.csv")
write.csv(sp_allrich_hexp_pvalue, "../Analyses/Results/Garden_Wild_Comparison/QUAC_ZAIN_sp_allrich_hexp_pvalue_df.csv")
########################################
#     Allelic representation code      #
########################################
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#create allele existing df
sp_all_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#create df of wild alleles captured by gardens
sp_wild_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##data frame to record allele capture code
sp_allele_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+4]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
}
}
pop_list
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
}
}
ZAIN_wild_red_list
species_list
#without ZAIN small pops - create allele existing df
sp_all_red_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create allele existing df
sp_all_red_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create df of wild alleles captured by gardens
sp_wild_red_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - data frame to record allele capture code
sp_allele_red_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_red_exist_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "% (", signif(sp_all_red_exist_df[dup,cat],3), ")")
}
}
}
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, "_wo_smallpops.csv"))
}
}
sp_genind_temp
ZAIN_wild_red_list
ZAIN_wild_red_list[[1]]
length(ZAIN_wild_red_list)
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_wild_red_genind)[2]$Wild)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_red_exist_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "% (", signif(sp_all_red_exist_df[dup,cat],3), ")")
}
}
}
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], n_drop_file, "_wo_smallpops.csv"))
}
}
n_drop_file
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_red_exist_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "% (", signif(sp_all_red_exist_df[dup,cat],3), ")")
}
}
}
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap", n_drop_file, "_wo_smallpops.csv"))
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist", n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap", n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap", n_drop_file, ".csv"))
}
}
