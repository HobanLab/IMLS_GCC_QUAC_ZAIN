#wild and garden together with pops labeled separately
if(r == 1|r == 2){
#remove pop type column to run relatedness - wild and garden individuals grouped
#into large metapopulations
QUAC_scen_rel_df <- QUAC_rel_df[,-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[1,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[2,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#wild and garden together with pops grouped by garden and wild
if(r == 3|r == 4){
#remove separate garden and wild populations column
QUAC_scen_rel_df <- QUAC_rel_df[,-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[3,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[4,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
}
rel_popstr_table
#loop to calculate relatedness in different pop structures
for(r in 1:length(rel_scen)){
#wild and garden together with pops labeled separately
if(r == 1|r == 2){
#remove pop type column to run relatedness - wild and garden individuals grouped
#into large metapopulations
QUAC_scen_rel_df <- QUAC_rel_df[,-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[1,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[2,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#wild and garden together with pops grouped by garden and wild
if(r == 3|r == 4){
#remove separate garden and wild populations column
QUAC_scen_rel_df <- QUAC_rel_df[,-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[3,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
#wild relatedness
rel_popstr_table[4,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
}
rel_popstr_table
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-3]
QUAC_scen_rel_df
View(QUAC_scen_rel_df)
#loop to calculate relatedness in different pop structures
for(r in 1:length(rel_scen)){
#wild and garden together with pops labeled separately
if(r == 1|r == 2){
#remove pop type column to run relatedness - wild and garden individuals grouped
#into large metapopulations
QUAC_scen_rel_df <- QUAC_rel_df[,-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[1,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[2,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#wild and garden together with pops grouped by garden and wild
if(r == 3|r == 4){
#remove separate garden and wild populations column
QUAC_scen_rel_df <- QUAC_rel_df[,-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[3,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
#wild relatedness
rel_popstr_table[4,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
#garden separate with pops separated
if(r == 5){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[5,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
}
}
rel_popstr_table
#loop to calculate relatedness in different pop structures
for(r in 1:length(rel_scen)){
#wild and garden together with pops labeled separately
if(r == 1|r == 2){
#remove pop type column to run relatedness - wild and garden individuals grouped
#into large metapopulations
QUAC_scen_rel_df <- QUAC_rel_df[,-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[1,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[2,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#wild and garden together with pops grouped by garden and wild
if(r == 3|r == 4){
#remove separate garden and wild populations column
QUAC_scen_rel_df <- QUAC_rel_df[,-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[3,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
#wild relatedness
rel_popstr_table[4,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
#garden separate with pops separated
if(r == 5){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[5,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
}
#wild separate with pops separated
if(r == 6){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[6,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
}
rel_popstr_table
#loop to calculate relatedness in different pop structures
for(r in 1:length(rel_scen)){
#wild and garden together with pops labeled separately
if(r == 1|r == 2){
#remove pop type column to run relatedness - wild and garden individuals grouped
#into large metapopulations
QUAC_scen_rel_df <- QUAC_rel_df[,-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[1,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[2,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#wild and garden together with pops grouped by garden and wild
if(r == 3|r == 4){
#remove separate garden and wild populations column
QUAC_scen_rel_df <- QUAC_rel_df[,-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[3,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
#wild relatedness
rel_popstr_table[4,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
#garden separate with pops separated
if(r == 5){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[5,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
}
#wild separate with pops separated
if(r == 6){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[6,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#garden populations pooled with just garden individuals
if(r == 7){
#select only garden individuals and remove the sep pop labels
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[7,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness) > 0.25))))
}
#wild populations pooled with just wild individuals
if(r == 8){
#select only garden individuals and remove the sep pop labels
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "wild",-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[8,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness) > 0.25))))
}
}
rel_popstr_table
#loop to calculate relatedness in different pop structures
for(r in 1:length(rel_scen)){
#wild and garden together with pops labeled separately
if(r == 1|r == 2){
#remove pop type column to run relatedness - wild and garden individuals grouped
#into large metapopulations
QUAC_scen_rel_df <- QUAC_rel_df[,-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[1,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[2,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#wild and garden together with pops grouped by garden and wild
if(r == 3|r == 4){
#remove separate garden and wild populations column
QUAC_scen_rel_df <- QUAC_rel_df[,-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[3,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
#wild relatedness
rel_popstr_table[4,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
#garden separate with pops separated
if(r == 5){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[5,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
}
#wild separate with pops separated
if(r == 6){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[6,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#garden populations pooled with just garden individuals
if(r == 7){
#select only garden individuals and remove the sep pop labels
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[7,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
}
#wild populations pooled with just wild individuals
if(r == 8){
#select only garden individuals and remove the sep pop labels
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "wild",-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[8,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
}
QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild", -2]
#select only garden individuals and remove the sep pop labels
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild", -2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[8,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
rel_popstr_table
#loop to calculate relatedness in different pop structures
for(r in 1:length(rel_scen)){
#wild and garden together with pops labeled separately
if(r == 1|r == 2){
#remove pop type column to run relatedness - wild and garden individuals grouped
#into large metapopulations
QUAC_scen_rel_df <- QUAC_rel_df[,-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[1,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
#wild relatedness
rel_popstr_table[2,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#wild and garden together with pops grouped by garden and wild
if(r == 3|r == 4){
#remove separate garden and wild populations column
QUAC_scen_rel_df <- QUAC_rel_df[,-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[3,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
#wild relatedness
rel_popstr_table[4,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
#garden separate with pops separated
if(r == 5){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[5,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[garden_pops]) > 0.25))))
}
#wild separate with pops separated
if(r == 6){
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[6,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness[wild_pops]) > 0.25))))
}
#garden populations pooled with just garden individuals
if(r == 7){
#select only garden individuals and remove the sep pop labels
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Garden",-2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[7,1] <- 277 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25))))
}
#wild populations pooled with just wild individuals
if(r == 8){
#select only garden individuals and remove the sep pop labels
QUAC_scen_rel_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild", -2]
#run relatedness analysis for garden and wild pop types
QUAC_relate_df <- Demerelate(QUAC_scen_rel_df, tab.dist = "NA", object = TRUE, value = "loiselle")
#garden relatedness
rel_popstr_table[8,1] <- 172 - length(fullsib_loiselle_rel_fun(names(which(unlist(QUAC_relate_df$Empirical_Relatedness$Wild) > 0.25))))
}
}
rel_popstr_table
#write out table
write.csv(rel_popstr_table, "../Analyses/Results/Relatedness/rel_popstr_table.csv")
##write out data table from the different pop structures analysis
#name rows and columns
rownames(rel_popstr_table) <- rel_scen
colnames(rel_popstr_table) <- c("non_halfsibs")
#write out table
write.csv(rel_popstr_table, "../Analyses/Results/Relatedness/rel_popstr_table.csv")
147/277
113/172
146/277
1-(146/277)
#list clean data frames
sp_clean_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
sp_clean_df_list
#create scenario list
scenario_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#create a list of the relatedness tests
relatedness_analyses_list <- c("loiselle", "wang", "ritland")
#save summary df
relate_ind_fullsib_df <- matrix(nrow = length(scenario_list), ncol =
length(relatedness_analyses_list)*2)
fullsib_loiselle_rel_fun
unlist(QUAC_relate_df$Empirical_Relatedness$Garden) > 0.25
#load in clean data frames to perform relatedness analysis on
sp_clean_temp_df[[1]] <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[1]]))
#list clean data frames
sp_clean_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
#list of data frames
sp_clean_temp_df <- list()
#load in clean data frames to perform relatedness analysis on
sp_clean_temp_df[[1]] <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[1]]))
head(sp_clean_temp_df[[1]])
##Run relate red code
#Garden
sp_garden_clean_temp_df <- sp_clean_temp_df[[1]][,-2]
#limit data frame by garden only
sp_garden_only_temp_df <- sp_garden_clean_temp_df[sp_garden_clean_temp_df[,2] == "Garden",]
relatedness_analyses_list[[1]]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_clean_temp_df, object = T, value = relatedness_analyses_list[[1]])
unlist(sp_garden_rel_df$Empirical_Relatedness[garden_pops]) > 0.25
sp_garden_rel_df
sp_garden_rel_df$Empirical_Relatedness
unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25
#relatedness lists for all analyses
sp_relate_levels <- list()
names(which(unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25))
#species full siblings
sp_garden_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25)))
sp_garden_fullsib_list
length(sp_garden_fullsib_list)
277-197
#limit data frame by garden only
sp_garden_only_temp_df <- sp_garden_clean_temp_df[sp_garden_clean_temp_df[,2] == "Garden",]
sp_garden_fullsib_list
#reduce data frame by sibling list
sp_garden_relate_red_df <- sp_garden_only_temp_df[!sp_garden_only_temp_df[,1] %in% sp_garden_halfsib_list,]
#species full siblings
sp_garden_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25)))
#reduce data frame by sibling list
sp_garden_relate_red_df <- sp_garden_only_temp_df[!sp_garden_only_temp_df[,1] %in% sp_garden_halfsib_list,]
#reduce data frame by sibling list
sp_garden_relate_red_df <- sp_garden_only_temp_df[!sp_garden_only_temp_df[,1] %in% sp_garden_fullsib_list,]
sp_garden_relate_red_df
length(sp_garden_relate_red_df[,1])
length(sp_garden_only_temp_df[,1])
length(sp_garden_only_temp_df[,1])-length(sp_garden_fullsib_list))
length(sp_garden_only_temp_df[,1])-length(sp_garden_fullsib_list)
paste0(signif(((length(sp_garden_only_temp_df[,1])-length(sp_garden_fullsib_list))/
length(sp_garden_only_temp_df[,1])),3)*100, "% (",
length(sp_garden_relate_red_df[,1]),")")
90/277
80/277
277-80
197/277
length(sp_garden_fullsib_list)
paste0(signif(((length(sp_garden_fullsib_list))/length(sp_garden_only_temp_df[,1])),3)*100, "% (",
length(sp_garden_relate_red_df[,1]),")")
###this analysis compares the number of full siblings determined by different
##relatedness indicators
#this loop runs over the main data files
for(sp in 1:length(scenario_list)){
#this loop runs over different relatedness analyses
for(relate in 1:length(relatedness_analyses_list)){
#load in clean data frames to perform relatedness analysis on
sp_clean_temp_df <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[sp]]))
##Run relate red code
#Garden
sp_garden_clean_temp_df <- sp_clean_temp_df[,-2]
#limit data frame by garden only
sp_garden_only_temp_df <- sp_garden_clean_temp_df[sp_garden_clean_temp_df[,2] == "Garden",]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#save relatedness levels for each scenario to graph
sp_relate_levels[[sp]] <- sp_garden_rel_df$Empirical_Relatedness$Garden
#species full siblings
sp_garden_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25)))
#save in df
relate_ind_fullsib_df[sp, relate] <- paste0(signif(((length(sp_garden_fullsib_list))/length(sp_garden_only_temp_df[,1])),3)*100, "% (",
length(sp_garden_relate_red_df[,1]),")")
#write out
#write.csv(sp_garden_relate_red_df, paste0("Data_Frames/Relate_Red/",  species_list[[sp]],
#                                          "_Garden_relate_red_", relatedness_analyses_list[[relate]], "_df.csv"),
#          row.names = FALSE)
##Wild relatedness analysis
#sp_wild_clean_temp_df <- sp_clean_temp_df[[sp]][sp_clean_temp_df[[sp]][,3] == "Wild",][,-3]
#now run relatedness analysis
#sp_wild_rel_df <- Demerelate(sp_wild_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#limit by analysis halfsibs
#sp_wild_halfsib_list <- half_sibling_reduction(sp_wild_rel_df)
#reduce data frame by list of half-siblings
#sp_wild_relate_red_df <- sp_wild_clean_temp_df[!sp_wild_clean_temp_df[,1] %in% sp_wild_halfsib_list,]
#number of ind removed
#halfsib_df[sp, relate+3] <-paste0(signif(((length(sp_wild_clean_temp_df[,1])-length(sp_wild_relate_red_df[,1]))/
#                                            length(sp_wild_clean_temp_df[,1])),3)*100, "% (",
#                                  length(sp_wild_relate_red_df[,1]), ")")
#write csv of the reduced data frame
#write.csv(sp_wild_relate_red_df, paste0("Data_Frames/Relate_Red/", species_list[[sp]],
#                                        "_Wild_relate_red_", relatedness_analyses_list[[relate]], "_df.csv"),
#          row.names = FALSE)
}
}
relate_ind_fullsib_df
##wild pops for all species
sp_wild_pops <- c(1:5, 1:4,1:25,1:25)
##Wild relatedness analysis
sp_wild_clean_temp_df <- sp_clean_temp_df[sp_clean_temp_df[,3] == "Wild",][,-3]
head(sp_wild_clean_temp_df)
#now run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#limit by analysis halfsibs
sp_wild_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_wild_rel_df$Empirical_Relatedness) > 0.25)))
sp_wild_fullsib_list
length(sp_wild_fullsib_list)
length(sp_wild_fullsib_list)/length(sp_wild_clean_temp_df[,1])
signif(length(sp_wild_fullsib_list)/length(sp_wild_clean_temp_df[,1]), 3)
signif(length(sp_wild_fullsib_list)/length(sp_wild_clean_temp_df[,1])*100, 3)
length(sp_wild_fullsib_list)
length(sp_wild_clean_temp_df[,1]) - length(sp_wild_fullsib_list)
paste0(signif(length(sp_wild_fullsib_list)/
length(sp_wild_clean_temp_df[,1])*100, 3), "%",
"(", length(sp_wild_clean_temp_df[,1]) - length(sp_wild_fullsib_list), ")")
paste0(signif(length(sp_wild_fullsib_list)/
length(sp_wild_clean_temp_df[,1])*100, 3), "% ",
"(", length(sp_wild_clean_temp_df[,1]) - length(sp_wild_fullsib_list), ")")
relatedness_analyses_list
###this analysis compares the number of full siblings determined by different
##relatedness indicators
#this loop runs over the main data files
for(sp in 1:length(scenario_list)){
#this loop runs over different relatedness analyses
for(relate in 1:length(relatedness_analyses_list)){
#load in clean data frames to perform relatedness analysis on
sp_clean_temp_df <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[sp]]))
##Run relate red code
#Garden
sp_garden_clean_temp_df <- sp_clean_temp_df[,-2]
#limit data frame by garden only
sp_garden_only_temp_df <- sp_garden_clean_temp_df[sp_garden_clean_temp_df[,2] == "Garden",]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#save relatedness levels for each scenario to graph
sp_relate_levels[[sp]] <- sp_garden_rel_df$Empirical_Relatedness$Garden
#species full siblings
sp_garden_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25)))
#save in df
relate_ind_fullsib_df[sp, relate] <- paste0(signif(((length(sp_garden_fullsib_list))/length(sp_garden_only_temp_df[,1])),3)*100, "% (",
length(sp_garden_relate_red_df[,1]),")")
##Wild relatedness analysis
sp_wild_clean_temp_df <- sp_clean_temp_df[sp_clean_temp_df[,3] == "Wild",][,-3]
#now run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#limit by analysis halfsibs
sp_wild_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_wild_rel_df$Empirical_Relatedness) > 0.25)))
#number of ind removed
relate_ind_fullsib_df[sp, relate+3] <- paste0(signif(length(sp_wild_fullsib_list)/
length(sp_wild_clean_temp_df[,1])*100, 3), "% ",
"(", length(sp_wild_clean_temp_df[,1]) - length(sp_wild_fullsib_list), ")")
}
}
#write out summary table
rownames(relate_ind_fullsib_df) <- scenario_list
colnames(relate_ind_fullsib_df) <- rep(relatedness_analyses_list, 2)
relate_ind_fullsib_df
#write out summary table
rownames(relate_ind_fullsib_df) <- scenario_list
colnames(relate_ind_fullsib_df) <- rep(relatedness_analyses_list, 2)
write.csv(relate_ind_fullsib_df, "../Analyses/Results/Relatedness/relate_ind_fullsib_df.csv")
