##
setwd('Data_Files/Adegenet_Files')
##
setwd('../Data_Files/Adegenet_Files')
##
setwd('../../Data_Files/Adegenet_Files')
QUAC_genind <- read.genepop("QUAC_woK_allpop_clean.gen",
ncode = 3)
library(adegenet)
QUAC_genind <- read.genepop("QUAC_woK_allpop_clean.gen",
ncode = 3)
setwd("..")
#load in function to calculate allele frequency categories
source("../Analyses/Functions/Fa_sample_funcs.R")
#create functions to run code
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#reorg genind objects
QUAC_garden_genind <- repool(seppop(QUAC_genind)[1:17])
#rename pops
levels(QUAC_garden_genind@pop) <- rep("Garden", 17)
QUAC_garden_genind
#wild
QUAC_wild_genind <- repool(seppop(QUAC_genind)[18:21])
QUAC_wild_genind
#rename
levels(QUAC_wild_genind@pop) <- rep("Wild", 4)
#rejoin tables
QUAC_garden_wild_genind <- repool(QUAC_garden_genind, QUAC_wild_genind)
genind2genpop(seppop(QUAC_garden_wild_genind[[2]]))
seppop(QUAC_garden_wild_genind[[2]])
seppop(QUAC_garden_wild_genind)[[2]]
QUAC_garden_wild_genind
#now convert to genpop
QUAC_wild_genpop <- repool(seppop(QUAC_garden_wild_genind)[[2]])
#now convert to genpop
QUAC_wild_genpop <- genind2genpop(seppop(QUAC_garden_wild_genind)[[2]])
tab(QUAC_garden_wild_genind)
tab(QUAC_wild_genpop)
#create documents for comparison
n_ind_W <- nrow(QUAC_wild_genind@tab)
n_ind_G <- nrow(QUAC_garden_genind@tab)
QUAC_all_rep <- colSums(seppop(QUAC_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
QUAC_all_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, n_ind_W,
n_drop = 0, glob_only = TRUE)
QUAC_all_cat
#remove regional alleles
QUAC_all_cat <- QUAC_all_cat[1:5]
QUAC_rep_per <- matrix(nrow = 1, ncol = length(QUAC_all_cat))
#now determine how many wild alleles were captured per category
QUAC_rep_per[,cat] <- round(sum(QUAC_all_rep[QUAC_all_cat[[cat]]] > 0
))/
length(QUAC_all_cat[[cat]]),4)
#now determine how many wild alleles were captured per category
QUAC_rep_per[,cat] <- round(sum(QUAC_all_rep[QUAC_all_cat[[cat]]] > 0)/
length(QUAC_all_cat[[cat]]),4)
#now determine how many wild alleles were captured per category
QUAC_rep_per[,cat] <- round(sum(QUAC_all_rep[QUAC_all_cat[[cat]]] > 0)/length(QUAC_all_cat[[cat]]),4)
#now determine how many wild alleles were captured per category
for(cat in 1:length(QUAC_all_cat)) QUAC_rep_per[,cat] <- round(sum(QUAC_all_rep[QUAC_all_cat[[cat]]] > 0)/length(QUAC_all_cat[[cat]]),4)
QUAC_rep_per
#now determine how many wild alleles were captured per category
for(cat in 1:length(QUAC_all_cat)) QUAC_rep_per[,cat] <- round(sum(QUAC_all_rep[QUAC_all_cat[[cat]]] > 0)/
length(QUAC_all_cat[[cat]]),4)
QUAC_rep_per
QUAC_all_exist <- matrix(nrow = 1, ncol = length(QUAC_all_cat))
#calculating alleles that exist by allelic category
for(cat in 1:length) QUAC_all_exist[,cat] <- length(QUAC_all_cat[[cat]])
#calculating alleles that exist by allelic category
for(cat in 1:length(QUAC_all_cat)) QUAC_all_exist[,cat] <- length(QUAC_all_cat[[cat]])
QUAC_all_exist
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
library(tidyr)
########################################
#     Allelic representation code      #
########################################
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "CSV_Files", pattern = "_clean_df.csv")
#load in function to calculate allele frequency categories
source("../Analyses/Functions/Fa_sample_funcs.R")
#create functions to run code
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#list out species
species_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned", "ZAIN_red_sample")
#list scenarios
scenario_list <- c("Garden_allSSR", "Wild_allSSR", "Garden_gSSR", "Wild_gSSR",
"Garden_EST", "Wild_EST")
#population lists for separating by garden/wild
#the first five are garden pops
#the last five are wild pops for both species
pop_list <- list(c(1:17), c(1:17), c(1:10), c(1:10), c(1:10),
c(18:22), c(18:21), c(11:35), c(11:35), c(11:35))
ZAIN_garden_list <- list(c(1:10), c(1:10), c(1:10))
ZAIN_wild_red_list <- list( c(11:19, 23:26, 28:32, 34:35),
c(11:19, 23:26, 28:32, 34:35),
c(11:19, 23:26, 28:32, 34:35))
#QUAC loci lists - EST vs. gSSRs
QUAC_EST_loci <- c("FIR031", "GOT009", "POR016", "FIR013", "FIR043", "GOTO40",
"PIE039", "FIR53", "FIR048", "PIE125")
QUAC_gSSR_loci <- c("0C11", "1G13", "G07", "1F02","QpZAG9")
#allele frequency category lists
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare",
"reg_rare","loc_com_d1","loc_com_d2","loc_rare")
########################################
#     Allelic representation code      #
########################################
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#create allele existing df
sp_all_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#create df of wild alleles captured by gardens
sp_wild_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##data frame to record allele capture code
sp_allele_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create allele existing df
sp_all_red_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create df of wild alleles captured by gardens
sp_wild_red_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - data frame to record allele capture code
sp_allele_red_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("CSV_Files/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- length(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_red_exist_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "% (", signif(sp_all_red_exist_df[dup,cat],3), ")")
}
}
}
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap", n_drop_file, "_wo_smallpops.csv"))
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist", n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap", n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap", n_drop_file, ".csv"))
}
}
#write session info out
sessionInfo()
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("CSV_Files/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_red_exist_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "% (", signif(sp_all_red_exist_df[dup,cat],3), ")")
}
}
}
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap", n_drop_file, "_wo_smallpops.csv"))
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist", n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap", n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap", n_drop_file, ".csv"))
}
}
