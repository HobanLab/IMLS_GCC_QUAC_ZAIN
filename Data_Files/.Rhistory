as.numeric("74%")
str_detect(percent_string, "[$\\%\\]")
percent_string <- "74%"
pattern <- "\\$%\\"
str_detect(percent_string, pattern)
library(sp)
sessionInfo
sessionInfo()
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
library(tidyr)
#######################
#     Load files      #
#######################
#set working directory to load in data files
setwd("../../Data_Files")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/Garden_Wild", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "Data_Frames", pattern = "_clean_df.csv")
#list out allele categories
list_sp_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#list of scenarios
species_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#load in function to calculate allele frequency categories
source("../Analyses/RScripts/Fa_sample_funcs.R")
install.packages("hiphop")
library(hiphop)
###############################
#     Parentage Analysis      #
###############################
#create genotype file
genotype <- c("AA", "Aa", "aa")
#hiphop table
gentable_name <- c("offspring","dam","sire","hot.dam","hot.sire","hot.parents", "hiphop","hothiphop.parents")
#hiphop table
gentable_names <- c("offspring","dam","sire","hot.dam","hot.sire","hot.parents", "hiphop","hothiphop.parents")
#fill in table
gentable <- as.data.frame(array(NA,dim = c(length(genotype)^3,length(gentable_names)), dimnames=list(NULL,gentable_names)))
View(gentable)
#add genotypes
gentable$offspring<-rep(genotype, each=length(genotype)*length(genotype))
View(gentable)
gentable$dam<-rep(genotype, length(genotype)*length(genotype))
gentable$dam<-rep(genotype, length(genotype)*length(genotype))
gentable$sire<-rep(genotype, length(genotype), each=length(genotype))
#test for HOT - Homozygous Opposite Test
gentable$hot.dam<-ifelse((gentable$offspring=="AA" & gentable$dam=="aa") | (gentable$offspring=="aa" & gentable$dam=="AA"), 1,0)
gentable$hot.parents<-ifelse(((gentable$offspring=="AA" & (gentable$sire=="aa" | gentable$dam=="aa")) | (gentable$offspring=="aa" & (gentable$sire=="AA" | gentable$dam=="AA"))),1,0)
#test for HOT - Homozygous Opposite Test
#mother and child pair
gentable$hot.dam<-ifelse((gentable$offspring=="AA" & gentable$dam=="aa") | (gentable$offspring=="aa" & gentable$dam=="AA"), 1,0)
# the HOT test for the offspring-sire dyad
gentable$hot.sire<-ifelse( (gentable$offspring=="AA" & gentable$sire=="aa") | (gentable$offspring=="aa" & gentable$sire=="AA"), 1,0)
# the HOT test for the offspring-dam-sire triad
gentable$hot.parents<-ifelse(((gentable$offspring=="AA" & (gentable$sire=="aa" | gentable$dam=="aa")) | (gentable$offspring=="aa" & (gentable$sire=="AA" | gentable$dam=="AA"))),1,0)
# the hiphop for the dam-sire combination
gentable$hiphop<-ifelse( (gentable$offspring=="Aa" & gentable$sire=="aa" & gentable$dam=="aa") | (gentable$offspring=="Aa" & gentable$sire=="AA" &  gentable$dam=="AA"), 1,0)
gentable$hothiphop.parents<-gentable$hot.parents+gentable$hiphop
print(gentable)
individuals
head(individuals)
head(genotype)
head(genotypes)
genotypes
genotypes[1:5,1:13]
##working through trial dataset
ind2018 <- subset(individuals, individuals$year==2018)
inspection <- inspect(ind=ind2018, gen=genotypes)
head(inspection)
head(inspection)
inspection[which(inspection$sampled==0),]
print(c(length(unique(ind2018$individual[which(ind2018$type=="offspring")])), length(unique(ind2018$individual[which(ind2018$type=="adult female")])), length(unique(ind2018$individual[which(ind2018$type=="adult male")]))))
combinations<-hothiphop(ind=ind2018, gen=genotypes)
inspect
hothiphop
#to find the best match
best_hothiphop<-topmatch(x=combinations, ranking="hothiphop.parents")
best_hothiphop[1:8,]
install.packages("PolyPatEx")
library(PolyPatEx)
# Create data frame
example <- data.frame(indiv = c("A", "B", "C", "D", "E"),
height_0 = c(15, 10, 12, 9, 17),
height_10 = c(20, 18, 14, 15, 19),
height_20 = c(23, 24, 18, 17, 26))
# View the data frame
head(example)
# Calculating the mean for each row in the data frame
row.avg <- apply(X = example[, 2:4], MARGIN = 1, FUN = mean)
# View row.avg
row.avg
# Calculating the mean for each column in the data frame
col.avg <- apply(example[, 2:4], 2, mean)
# View col.avg
col.avg
mean(15,20,23)
mean(10,18,24)
mean(12, 14, 18)
mean(12,14,18)
mean(example[,2:4])
mean(example[1,2:4])
example[,2:4]
example[2,2:4]
mean(as.numeric(example[2,2:4]))
# Set seed so that the randomly-generated numbers are the same each time
set.seed(123)
# Create a list using randomly-generated numbers
plants <- list(height = runif(10, min = 10, max = 20),
mass = runif(10, min = 5, max = 10),
flowers = sample(1:10, 10))
# View the list
plants
lapply(plants, mean)
# Use sapply to find the mean of each list element
sapply(plants, mean)
# Load library to use the pivot_longer() function
library(tidyverse)
# Pivot the data so that the data are in long format instead of wide format
example <- pivot_longer(example, cols = 2:4, names_to = "time", values_to = "height")
# Use sub() to get rid of the string "height_" in front of the time values
example$time <- sub("height_", "", example$time)
# View data
head(example)
tapply(X = vector.to.analyze, INDEX = vector.to.group.by, FUN = function.you.want)
# Use tapply() to find average height by time grouping
tapply(X = example$height, INDEX = example$time, mean)
#list clean data frames
sp_clean_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
#########################
#   Load Data Files     #
#########################
#set working directory to load in data files
setwd("../../Data_Files")
setwd("C:/Users/eschumacher/Documents/GitHub/GCC_QUAC_ZAIN")
setwd("../../Data_Files")
setwd("Data_Files")
#load relatedness data frame for relatedness analysis
sp_df <- list.files(path = "Data_Frames", pattern = "allpop_df.csv$")
#create scenario list
scenario_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#function to output the % of sibs in all garden pops
fullsib_loiselle_rel_fun <- function(x){
#clean front characters
fullsib_clean_front <- gsub("^.*\\.","", x)
#clean the duplicate name
fullsib_clean_back <- gsub("^.*\\_","", fullsib_clean_front)
#create list of unique individuals greater than and equal to full sib relatedness
fullsib_list <- unique(fullsib_clean_back)
#return the list of full sibs
return(fullsib_list)
}
#list clean data frames
sp_clean_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
#list of data frames
sp_clean_temp_df <- list()
#relatedness lists for all analyses
sp_relate_levels <- list()
#create a list of the relatedness tests
relatedness_analyses_list <- c("loiselle", "wang", "ritland")
#save summary df
relate_ind_fullsib_df <- matrix(nrow = length(scenario_list), ncol =
length(relatedness_analyses_list)*2)
###this analysis compares the number of full siblings determined by different
##relatedness indicators
#this loop runs over the main data files
for(sp in 1:length(scenario_list)){
#this loop runs over different relatedness analyses
for(relate in 1:length(relatedness_analyses_list)){
#load in clean data frames to perform relatedness analysis on
sp_clean_temp_df <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[sp]]))
##Run relate red code
#Garden
sp_garden_clean_temp_df <- sp_clean_temp_df[,-2]
#limit data frame by garden only
sp_garden_only_temp_df <- sp_garden_clean_temp_df[sp_garden_clean_temp_df[,2] == "Garden",]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#save relatedness levels for each scenario to graph
sp_relate_levels[[sp]] <- sp_garden_rel_df$Empirical_Relatedness$Garden
#species full siblings
sp_garden_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25)))
#save in df
relate_ind_fullsib_df[sp, relate] <- paste0(signif(((length(sp_garden_fullsib_list))/length(sp_garden_only_temp_df[,1])),3)*100, "% (",
length(sp_garden_relate_red_df[,1]),")")
##Wild relatedness analysis
sp_wild_clean_temp_df <- sp_clean_temp_df[sp_clean_temp_df[,3] == "Wild",][,-3]
#now run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#limit by analysis halfsibs
sp_wild_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_wild_rel_df$Empirical_Relatedness) > 0.25)))
#number of ind removed
relate_ind_fullsib_df[sp, relate+3] <- paste0(signif(length(sp_wild_fullsib_list)/
length(sp_wild_clean_temp_df[,1])*100, 3), "% ",
"(", length(sp_wild_clean_temp_df[,1]) - length(sp_wild_fullsib_list), ")")
}
}
###this analysis compares the number of full siblings determined by different
##relatedness indicators
#this loop runs over the main data files
for(sp in 1:length(scenario_list)){
#this loop runs over different relatedness analyses
for(relate in 1:length(relatedness_analyses_list)){
#load in clean data frames to perform relatedness analysis on
sp_clean_temp_df <- read.csv(paste0("Data_Frames/",sp_clean_df_list[[sp]]))
##Run relate red code
#Garden
sp_garden_clean_temp_df <- sp_clean_temp_df[,-2]
#limit data frame by garden only
sp_garden_only_temp_df <- sp_garden_clean_temp_df[sp_garden_clean_temp_df[,2] == "Garden",]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#save relatedness levels for each scenario to graph
sp_relate_levels[[sp]] <- sp_garden_rel_df$Empirical_Relatedness$Garden
#species full siblings
sp_garden_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_garden_rel_df$Empirical_Relatedness$Garden) > 0.25)))
#save in df
relate_ind_fullsib_df[sp, relate] <- paste0(signif(((length(sp_garden_fullsib_list))/length(sp_garden_only_temp_df[,1])),3)*100, "% (",
length(sp_garden_only_temp_df[,1]),")")
##Wild relatedness analysis
sp_wild_clean_temp_df <- sp_clean_temp_df[sp_clean_temp_df[,3] == "Wild",][,-3]
#now run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_clean_temp_df, object = T, value = relatedness_analyses_list[[relate]])
#limit by analysis halfsibs
sp_wild_fullsib_list <- fullsib_loiselle_rel_fun(names(which(unlist(sp_wild_rel_df$Empirical_Relatedness) > 0.25)))
#number of ind removed
relate_ind_fullsib_df[sp, relate+3] <- paste0(signif(length(sp_wild_fullsib_list)/
length(sp_wild_clean_temp_df[,1])*100, 3), "% ",
"(", length(sp_wild_clean_temp_df[,1]) - length(sp_wild_fullsib_list), ")")
}
}
#relatedness lists for all analyses
sp_garden_relate_levels <- list()
sp_wild_relate_levels <- list()
plot(sp_garden_rel_df$Empirical_Relatedness)
hist(sp_garden_rel_df$Empirical_Relatedness)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, unlist(sp_wild_rel_df$Empirical_Relatedness))
unlist(sp_wild_rel_df$Empirical_Relatedness)
as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness))
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-2,2))
max(sp_garden_rel_df$Empirical_Relatedness$Garden)
##making histograms of relatedness
#load in QUAC with Kessler data frame
QUAC_rel_df <- read.csv("Data_Files/QUAC_allpop_clean_df.csv")
##making histograms of relatedness
#load in QUAC with Kessler data frame
QUAC_rel_df <- read.csv("Data_Frames/QUAC_allpop_clean_df.csv")
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-3]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[1]])
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[1]])
#generate histogram
#hist(sp_garden_rel_df$Empirical_Relatedness$)
}
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden)
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-1,1))
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1))
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1), ylim = c(0, 10000))
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1), ylim = c(0, 15000))
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1), ylim = c(0, 12000))
relatedness_analyses_list[[1]]
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1), ylim = c(0, 12000),
col = "darkseagreen1")
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"))
#generate histogram
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[1]]," Garden"))
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_garden_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-0.5,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"))
dev.off()
}
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_garden_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(min(sp_garden_rel_df$Empirical_Relatedness$Garden),
max(sp_garden_rel_df$Empirical_Relatedness$Garden)), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"))
dev.off()
}
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_garden_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-1,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"))
dev.off()
}
##Wild
#run relatedness analysis
sp_wild_temp_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
View(sp_wild_temp_df)
##Wild
#limit to wild pops and remove pop type column
sp_wild_temp_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_temp_df, object = T, value = relatedness_analyses_list[[1]])
unlist(sp_wild_rel_df$Empirical_Relatedness)
as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness))
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)),
xlim = c(-1,1),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"),
main = paste0("QUAC garden ",relatedness_analyses_list[[r]], " Distribution"))
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)),
xlim = c(-1,1), ylim = c(0, 1000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"),
main = paste0("QUAC Wild ",relatedness_analyses_list[[r]], " Distribution"))
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)),
xlim = c(-1,1), ylim = c(0, 1000),
col = "forestgreen", xlab = paste0(relatedness_analyses_list[[1]]," Wild"),
main = paste0("QUAC Wild ", relatedness_analyses_list[[1]], " Distribution"))
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
##Garden
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_garden_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-1,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"),
main = paste0("QUAC garden ",relatedness_analyses_list[[r]], " Distribution"))
dev.off()
##Wild
#limit to wild pops and remove pop type column
sp_wild_temp_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_temp_df, object = T, value = relatedness_analyses_list[[1]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_wild_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)),
xlim = c(-1,1), ylim = c(0, 1000),
col = "forestgreen", xlab = paste0(relatedness_analyses_list[[r]]," Wild"),
main = paste0("QUAC Wild ", relatedness_analyses_list[[r]], " Distribution"))
dev.off()
}
#matrix to store mean relatedness values for each relatedness analysis
#and p-values for comparisons
QUAC_rel_analysis_df <- matrix(nrow = 3, ncol = length(relatedness_analyses_list))
mean(sp_garden_rel_df$Empirical_Relatedness$Garden)
mean(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness))
)
kruskal.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))[3]
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))[2]
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))[1]
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))$p.value
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)), exact = TRUE)
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)), exact = TRUE)[2]
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)), exact = TRUE)[]
wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden, as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)), exact = TRUE)[3]
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
##Garden
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_garden_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-1,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"),
main = paste0("QUAC garden ",relatedness_analyses_list[[r]], " Distribution"))
dev.off()
##Wild
#limit to wild pops and remove pop type column
sp_wild_temp_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_temp_df, object = T, value = relatedness_analyses_list[[1]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_wild_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)),
xlim = c(-1,1), ylim = c(0, 1000),
col = "forestgreen", xlab = paste0(relatedness_analyses_list[[r]]," Wild"),
main = paste0("QUAC Wild ", relatedness_analyses_list[[r]], " Distribution"))
dev.off()
#store garden means for each test
QUAC_rel_analysis_df[1,r] <- mean(sp_garden_rel_df$Empirical_Relatedness$Garden)
#store wild means for each test
QUAC_rel_analysis_df[2,r] <- mean(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))
#compare distributions using nonparametric t-test
QUAC_rel_analysis_df[3,r] <- wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden,
as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)), exact = TRUE)[3]
}
QUAC_rel_analysis_df
#matrix to store mean relatedness values for each relatedness analysis
#and p-values for comparisons
QUAC_rel_analysis_df <- matrix(nrow = 3, ncol = length(relatedness_analyses_list))
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
##Garden
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_garden_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-1,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"),
main = paste0("QUAC garden ",relatedness_analyses_list[[r]], " Distribution"))
dev.off()
##Wild
#limit to wild pops and remove pop type column
sp_wild_temp_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_temp_df, object = T, value = relatedness_analyses_list[[1]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_wild_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)),
xlim = c(-1,1), ylim = c(0, 1000),
col = "forestgreen", xlab = paste0(relatedness_analyses_list[[r]]," Wild"),
main = paste0("QUAC Wild ", relatedness_analyses_list[[r]], " Distribution"))
dev.off()
#store garden means for each test
QUAC_rel_analysis_df[1,r] <- mean(sp_garden_rel_df$Empirical_Relatedness$Garden)
#store wild means for each test
QUAC_rel_analysis_df[2,r] <- mean(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))
#compare distributions using nonparametric t-test
QUAC_rel_analysis_df[3,r] <- wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden,
as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)), exact = TRUE)[3]$p.value
}
QUAC_rel_analysis_df
#loop to run relatedness analyses
for(r in 1:length(relatedness_analyses_list)){
##Garden
#create garden df
sp_garden_temp_df <- QUAC_rel_df[,-2]
#run relatedness analysis
sp_garden_rel_df <- Demerelate(sp_garden_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_garden_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(sp_garden_rel_df$Empirical_Relatedness$Garden, xlim = c(-1,1), ylim = c(0, 12000),
col = "darkseagreen1", xlab = paste0(relatedness_analyses_list[[r]]," Garden"),
main = paste0("QUAC garden ",relatedness_analyses_list[[r]], " Distribution"))
dev.off()
##Wild
#limit to wild pops and remove pop type column
sp_wild_temp_df <- QUAC_rel_df[QUAC_rel_df$Garden_Wild == "Wild",-3]
#run relatedness analysis
sp_wild_rel_df <- Demerelate(sp_wild_temp_df, object = T, value = relatedness_analyses_list[[r]])
#generate histogram
pdf(paste0("../Analyses/Results/Relatedness/QUAC_wild_", relatedness_analyses_list[[r]],
"_distribution.pdf"), width = 8, height = 8)
hist(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)),
xlim = c(-1,1), ylim = c(0, 1000),
col = "forestgreen", xlab = paste0(relatedness_analyses_list[[r]]," Wild"),
main = paste0("QUAC Wild ", relatedness_analyses_list[[r]], " Distribution"))
dev.off()
#store garden means for each test
QUAC_rel_analysis_df[1,r] <- mean(sp_garden_rel_df$Empirical_Relatedness$Garden)
#store wild means for each test
QUAC_rel_analysis_df[2,r] <- mean(as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)))
#compare distributions using nonparametric t-test
QUAC_rel_analysis_df[3,r] <- wilcox.test(sp_garden_rel_df$Empirical_Relatedness$Garden,
as.numeric(unlist(sp_wild_rel_df$Empirical_Relatedness)), exact = TRUE)[3]$p.value
}
QUAC_rel_analysis_df
rownames(QUAC_rel_analysis_df) <- c("Garden", "Wild", "p-value")
colnames(QUAC_rel_analysis_df) <- relatedness_analyses_list
QUAC_rel_analysis_df
write.csv(QUAC_rel_analysis_df, "..Analyses/Results/Relatedness/QUAC_relatedness_analyses_sum_df.csv")
