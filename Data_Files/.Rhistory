###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling_100 <- function(sp_genind_temp, ndrop){
#set rep number
num_reps <- 100
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[t,cat,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
for (n in 1:num_reps) sum_results_df[,,n]<- t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#return(sum_results_df)
}
}
}
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
library(tidyr)
#######################
#     Load files      #
#######################
#set working directory to load in data files
setwd("../../Data_Files")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/Garden_Wild", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "Data_Frames", pattern = "_clean_df.csv")
#list out allele categories
list_sp_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#list of scenarios
species_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#load in function to calculate allele frequency categories
source("../Analyses/RScripts/Fa_sample_funcs.R")
source("../Analyses/RScripts/resampling.R")
sp_genind_list <- c("Adegenet_Files/Garden_Wild/QUAC_garden_wild_wK_clean.gen",
"Adegenet_Files/Garden_Wild/QUAC_garden_wild_woK_clean.gen")
sp_df_list <- c("Data_Frames/Garden_Wild/QUAC_allpop_clean_df.csv",
"Data_Frames/Garden_Wild/QUAC_woK_allpop_clean_df.csv")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/Garden_Wild", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "Data_Frames", pattern = "_clean_df.csv")
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
for(ndrop in ndrop_list){
sp_resampling <- resampling_100(sp_genind_temp, ndrop)
#mean across reps using apply
all_mean <- apply(sp_resampling[,,1:100],c(1,2),mean,na.rm=T)*100
#write.csv(all_mean, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_", ndrop,"_resampling_df", ".csv"))
}
}
ndrop_list <- c(0,2)
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
for(ndrop in ndrop_list){
sp_resampling <- resampling_100(sp_genind_temp, ndrop)
#mean across reps using apply
all_mean <- apply(sp_resampling[,,1:100],c(1,2),mean,na.rm=T)*100
#write.csv(all_mean, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_", ndrop,"_resampling_df", ".csv"))
}
}
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling_100 <- function(sp_genind_temp, ndrop){
#set rep number
num_reps <- 100
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[,,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
for (n in 1:num_reps) sum_results_df[,,n]<- t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#return(sum_results_df)
}
}
}
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
for(ndrop in ndrop_list){
sp_resampling <- resampling_100(sp_genind_temp, ndrop)
#mean across reps using apply
all_mean <- apply(sp_resampling[,,1:100],c(1,2),mean,na.rm=T)*100
#write.csv(all_mean, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_", ndrop,"_resampling_df", ".csv"))
}
}
summ_results_tree
sum_results_df
sp_resampling
resampling_100(sp_genind_temp, ndrop)
###This function is based on code generated by Sean Hoban
##used to determine the number of wild sampled plants
#that it would take to capture each type of allele.
resampling_100 <- function(sp_genind_temp, ndrop){
#set rep number
num_reps <- 100
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[,,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
for (n in 1:num_reps) sum_results_df[,,n]<- t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
return(sum_results_df)
}
}
}
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
for(ndrop in ndrop_list){
sp_resampling <- resampling_100(sp_genind_temp, ndrop)
#mean across reps using apply
all_mean <- apply(sp_resampling[,,1:100],c(1,2),mean,na.rm=T)*100
#write.csv(all_mean, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_", ndrop,"_resampling_df", ".csv"))
}
}
sp_resampling
resampling_100(sp_genind_temp, ndrop)
sum_results_df
summ_results_tree
#set rep number
num_reps <- 100
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[,,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
for (n in 1:num_reps) sum_results_df[,,n]<- t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#return(sum_results_df)
}
}
#set rep number
num_reps <- 10
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[,,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
for (n in 1:num_reps) sum_results_df[,,n]<- t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#return(sum_results_df)
}
}
sum_results_df\
sum_results_df
summ_results_tree
#set rep number
num_reps <- 10
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[t,cat,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
#for (n in 1:num_reps) sum_results_df[,,n]<- t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#return(sum_results_df)
}
}
summ_results_tree
summ_results_tree[,,1]
summ_results_tree[,,1]/summ_results_tree[length(summ_results_tree[,1,1]),,1]
#set rep number
num_reps <- 10
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[t,cat,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
sum_results_df[t,cat,nrep] <- t(t(summ_results_tree[,,nrep])/summ_results_tree[length(summ_results_tree[,1,1]),,nrep])
#return(sum_results_df)
}
}
#set rep number
num_reps <- 10
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
sp_wild_genind <- seppop(sp_genind_temp)[[2]]
n_total_indivs <- length(sp_wild_genind@tab[,1])
n_ind_p_pop <- table(sp_wild_genind@pop)
allele_freqs <- colSums(sp_wild_genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(sp_wild_genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop, glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#create a summary table
sum_results_df <- array(dim = c((nrow(sp_wild_genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_wild_genind@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_wild_genind@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (cat in 1:length(allele_cat)) summ_results_tree[t,cat,nrep] <- sum(alleles_samp[allele_cat[[cat]]]>0, na.rm=T)
#Divide by the number of alleles
for (r in 1:num_reps) sum_results_df[,,r]<- t(t(summ_results_tree[,,r])/summ_results_tree[length(summ_results_tree[,1,1]),,r])
#return(sum_results_df)
}
}
sum_results_df
