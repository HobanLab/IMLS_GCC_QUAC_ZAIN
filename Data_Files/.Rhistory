#}
##Divide by numbers of alleles in each category to calculate % of each frequency of alleles captured
#for n to drop = 2
#for (n in 1:num_reps) summ_results_tree_ndrop2[,,n]<-t(t(summ_results_tree_ndrop2[,,n])/summ_results_tree_ndrop2[length(summ_results_tree_ndrop2[,1,1]),,n])
#for n to drop = 0
#for (n in 1:num_reps) summ_results_tree_ndrop0[,,n]<-t(t(summ_results_tree_ndrop0[,,n])/summ_results_tree_ndrop0[length(summ_results_tree_ndrop0[,1,1]),,n])
}
head(summ_results_tree_ndrop2)
#This loop will sample trees from t = 2 to the total number of trees
for (tree in 2:(nrow(sp_wild_genind@tab)-1)){ ##minus one because our number of trees is 172, have to compare between 2 trees
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), tree),],na.rm=T)
#store allele frequency summaries in an array - for dropping very rare alleles
#for (l in 1:length(sp_allele_cat)) summ_results_tree_ndrop2 <- sum(alleles_samp[sp_allele_cat[[l]]]>0, na.rm=T)
#for (l in 1:length(allele_cat)) summ_results_tree_ndrop2[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
for (cat in 1:length(allele_cat)) summ_results_tree_ndrop2[t,l,] <- sum(alleles_samp[allele_cat[[cat]]], na.rm=T)
##now add a loop to store results
#if(ndrop == 2){
#store allele frequency summaries in an array - for dropping very rare alleles
#  for (l in 1:length(sp_allele_cat)) summ_results_tree_ndrop2[(t),(l),nrep]<-sum(alleles_samp[sp_allele_cat[[l]]]>0, na.rm=T)
#}else{
#store allele frequency summaries in an array - including very rare alleles
#  for (l in 1:length(sp_allele_cat)) summ_results_tree_ndrop0[(t),(l),nrep]<-sum(alleles_samp[sp_allele_cat[[l]]]>0, na.rm=T)
#}
##Divide by numbers of alleles in each category to calculate % of each frequency of alleles captured
#for n to drop = 2
#for (n in 1:num_reps) summ_results_tree_ndrop2[,,n]<-t(t(summ_results_tree_ndrop2[,,n])/summ_results_tree_ndrop2[length(summ_results_tree_ndrop2[,1,1]),,n])
#for n to drop = 0
#for (n in 1:num_reps) summ_results_tree_ndrop0[,,n]<-t(t(summ_results_tree_ndrop0[,,n])/summ_results_tree_ndrop0[length(summ_results_tree_ndrop0[,1,1]),,n])
}
summ_results_tree_ndrop2
summ_results_tree_ndrop2[,,2]
#create empty matrix
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(allele_freqs))
#list out allele categories
list_sp_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#This loop will sample trees from t = 2 to the total number of trees
for (tree in 2:(nrow(sp_wild_genind@tab)-1)){ ##minus one because our number of trees is 172, have to compare between 2 trees
#create empty matrix
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_wild_genind@tab[sample(1:nrow(sp_wild_genind@tab), tree),],na.rm=T)
#store allele frequency summaries in an array - for dropping very rare alleles
#for (l in 1:length(sp_allele_cat)) summ_results_tree_ndrop2 <- sum(alleles_samp[sp_allele_cat[[l]]]>0, na.rm=T)
#for (l in 1:length(allele_cat)) summ_results_tree_ndrop2[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
for (cat in 1:length(allele_cat)) summ_results_tree_ndrop2[t,l,] <- sum(alleles_samp[allele_cat[[cat]]], na.rm=T)
##now add a loop to store results
#if(ndrop == 2){
#store allele frequency summaries in an array - for dropping very rare alleles
#  for (l in 1:length(sp_allele_cat)) summ_results_tree_ndrop2[(t),(l),nrep]<-sum(alleles_samp[sp_allele_cat[[l]]]>0, na.rm=T)
#}else{
#store allele frequency summaries in an array - including very rare alleles
#  for (l in 1:length(sp_allele_cat)) summ_results_tree_ndrop0[(t),(l),nrep]<-sum(alleles_samp[sp_allele_cat[[l]]]>0, na.rm=T)
#}
##Divide by numbers of alleles in each category to calculate % of each frequency of alleles captured
#for n to drop = 2
#for (n in 1:num_reps) summ_results_tree_ndrop2[,,n]<-t(t(summ_results_tree_ndrop2[,,n])/summ_results_tree_ndrop2[length(summ_results_tree_ndrop2[,1,1]),,n])
#for n to drop = 0
#for (n in 1:num_reps) summ_results_tree_ndrop0[,,n]<-t(t(summ_results_tree_ndrop0[,,n])/summ_results_tree_ndrop0[length(summ_results_tree_ndrop0[,1,1]),,n])
}
alleles_samp
summ_results_tree_ndrop2
num_reps
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
summ_results_tree <- array(dim = c(sp_genind_temp, list_sp_allele_cat, num_reps))
summ_results_tree <- array(dim=c(nrow(sp_genind_temp@tab)-1, list_sp_allele_cat, num_reps))
nrow(sp_genind_temp@tab)-1
summ_results_tree <- array(dim = c(nrow(sp_genind_temp@tab)-1, list_sp_allele_cat, num_reps))
(nrow(sp_genind_temp@tab) - 1)
list_sp_allele_cat
summ_results_tree <- array(dim = c((nrow(sp_genind_temp@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
summ_results_tree
head(summ_results_tree)
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean<-apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
head(summ_results_tree)
head(all_mean)
all_mean
colMax <- function(data) sapply(data, max, na.rm = TRUE)
source("Fa_sample_funcs.R")
View(sample.pop)
View(get.allele.cat)
View(colMax)
View(get.allele.cat)
resampling <- function(genind){
#QUAC_wild_genind <- read.genepop("QUAC_wild.gen",ncode=3);
n_total_indivs<- length(genind@tab[,1])
n_ind_p_pop<-table(genind@pop)
allele_freqs<-colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop=2,glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
}
resampling(sp_genind_temp)
ndrop
#create list for inclusion of very rare alleles or not
n_drop <- c(0,2)
#create list for inclusion of very rare alleles or not
ndrop <- c(0,2)
ndrop[[1]]
ndrop[[2]]
all_mean
resampling <- function(genind){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop0"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
n_total_indivs <- length(genind@tab[,1])
n_ind_p_pop <- table(genind@pop)
allele_freqs <- colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(summ_results_tree, paste0("resampling_", n_drop_file, ".csv"))
}
}
##run functions
resamp_try <- resampling(sp_genind_temp)
resampling <- function(genind){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
n_total_indivs <- length(genind@tab[,1])
n_ind_p_pop <- table(genind@pop)
allele_freqs <- colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0("resampling_", n_drop_file, ".csv"))
}
}
resampling <- function(genind){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
n_total_indivs <- length(genind@tab[,1])
n_ind_p_pop <- table(genind@pop)
allele_freqs <- colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0("resampling", n_drop_file, ".csv"))
}
}
#run functions
resamp_try <- resampling(sp_genind_temp)
resampling <- function(genind){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
n_total_indivs <- length(genind@tab[,1])
n_ind_p_pop <- table(genind@pop)
allele_freqs <- colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(genind,"resampling", n_drop_file, ".csv"))
}
}
#run functions
resamp_try <- resampling(sp_genind_temp)
resampling <- function(genind){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
n_total_indivs <- length(genind@tab[,1])
n_ind_p_pop <- table(genind@pop)
allele_freqs <- colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0("resampling", n_drop_file, ".csv"))
}
}
#run functions
resamp_try <- resampling(sp_genind_temp)
#run functions
resamp_try <- resampling(sp_genind_temp)
resampling <- function(genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
n_total_indivs <- length(genind@tab[,1])
n_ind_p_pop <- table(genind@pop)
allele_freqs <- colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(sp,"resampling", n_drop_file, ".csv"))
}
}
species_list
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[1]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[1]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
sp_genind_list
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[1]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
Browse()
Browser()
browser()
browser()
help
browser()
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
browser()
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[1]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
Q
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
browser()
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
resampling <- function(genind, sp){
ndrop <- c(0,2)
#outer loop will loop over how many alleles are being dropped
for(a in 1:length(ndrop)){
if(a == 1) n_drop_file <- "_ndrop0"
if(a == 2) n_drop_file <- "_ndrop2"
#set rep number
num_reps <- 1000
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#create documents for allelic categorization code
n_total_indivs <- length(genind@tab[,1])
n_ind_p_pop <- table(genind@pop)
allele_freqs <- colSums(genind@tab)/(n_total_indivs*2)
allele_cat <- get.allele.cat(genind, region_makeup=NULL, 2, n_ind_p_pop,n_drop = ndrop[[a]], glob_only=T)
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#create summary results for allelic capture
summ_results_tree <- array(dim = c((nrow(genind@tab)-1), length(list_sp_allele_cat), num_reps))
#Repeat the resampling many times
for (nrep in 1:num_reps) {
#create empty matrix to store sampling code
alleles_samp <- matrix(nrow=nrow(sp_genind_temp@tab)-1,ncol=length(list_sp_allele_cat))
#This loop will sample trees from t = 2 to the total number of trees
for (t in 2:(nrow(sp_genind_temp@tab)-1)){
#create a sample of trees of length t, by using 'sample()' which randomly samples rows
alleles_samp <- colSums(sp_genind_temp@tab[sample(1:nrow(sp_genind_temp@tab), t),],na.rm=T)
#Then simply compare that sample to your wild population with allele_cat
for (l in 1:length(allele_cat)) summ_results_tree[(t),(l),nrep]<-sum(alleles_samp[allele_cat[[l]]]>0, na.rm=T)
}
}
#Divide by the number of alleles
for (n in 1:num_reps) summ_results_tree[,,n]<-t(t(summ_results_tree[,,n])/summ_results_tree[length(summ_results_tree[,1,1]),,n])
#mean across reps using apply
all_mean <- apply(summ_results_tree[,,1:num_reps],c(1,2),mean,na.rm=T)*100
write.csv(all_mean, paste0(sp,"_resampling", n_drop_file, ".csv"))
}
}
###################################
#     Allelic Resampling Code     #
###################################
#loop to compare diversity capture in wild and botanic garden populations
for(sp in 1:length(species_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/Garden_Wild/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#run resampling code on all species
sp_resampling <- resampling(sp_genind_temp, species_list[[sp]])
}
