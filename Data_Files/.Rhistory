sp_null_all <- parSapply(cl, sp_genind_wild_temp, null.all)
parRapply(cl, sp_genind_wild_temp, null.all)
############################################################
#  Null Alleles, HWE Deviation, Linkage Disequilibrium     #
############################################################
#genind list
sp_genind_ls <- list()
############################################################
#  Null Alleles, HWE Deviation, Linkage Disequilibrium     #
############################################################
#genind list
sp_genind_ls <- list()
sp_genind_wild_ls <- list()
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#run null allele calculations over all genind objects
sp_null_all <- parLapply(cl, sp_genind_wild_ls[[sp]], null.all)
#create null allele frequency summary data frame
#sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
stopCluster(cl)
#write out to CSV
#write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
#                                 "_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
#cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#calculate linkage disequilbrium
#sp_ld <- parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
#convert to a data frame
#sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
#write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
#                           scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
# stopCluster(cl)
}
############################################################
#  Null Alleles, HWE Deviation, Linkage Disequilibrium     #
############################################################
#genind list
sp_genind_ls <- list()
sp_genind_wild_ls <- list()
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#run null allele calculations over all genind objects
sp_null_all <- parLapply(cl, sp_genind_wild_ls[[sp]], null.all)
#create null allele frequency summary data frame
#sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
stopCluster(cl)
#write out to CSV
#write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
#                                 "_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
#cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#calculate linkage disequilbrium
#sp_ld <- parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
#convert to a data frame
#sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
#write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
#                           scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
# stopCluster(cl)
}
sp_genind_wild_ls
sp_genind_wild_ls[[2]]
sp_genind_ls
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
sp_genind_ls
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_ls[[sp]]@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
#sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
#sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
# write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
#                                   "_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
# cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#run null allele calculations over all genind objects
#sp_null_all <- parLapply(cl, sp_genind_wild_ls[[sp]], null.all)
#create null allele frequency summary data frame
#sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
#stopCluster(cl)
#write out to CSV
#write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
#                                 "_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
#cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#calculate linkage disequilbrium
#sp_ld <- parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
#convert to a data frame
#sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
#write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
#                           scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
# stopCluster(cl)
}
View(sp_HWE_pop)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
View(sp_HWE_wild_df)
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_ls[[sp]]@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
# cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#run null allele calculations over all genind objects
#sp_null_all <- parLapply(cl, sp_genind_wild_ls[[sp]], null.all)
#create null allele frequency summary data frame
#sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
#stopCluster(cl)
#write out to CSV
#write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
#                                 "_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
#cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#calculate linkage disequilbrium
#sp_ld <- parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
#convert to a data frame
#sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
#write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
#                           scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
# stopCluster(cl)
}
sp_genind_wild_ls
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_ls[[sp]]@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#run null allele calculations over all genind objects
sp_null_all <- parLapply(cl, sp_genind_wild_ls, null.all)
#create null allele frequency summary data frame
sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
stopCluster(cl)
#write out to CSV
#write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
#                                 "_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
#cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#calculate linkage disequilbrium
#sp_ld <- parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
#convert to a data frame
#sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
#write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
#                           scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
# stopCluster(cl)
}
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_ls[[sp]]@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#run null allele calculations over all genind objects
sp_null_all <- parLapply(cl, sp_genind_wild_ls, null.all)
#create null allele frequency summary data frame
sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
stopCluster(cl)
#write out to CSV
#write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
#                                 "_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
#cores <- detectCores() - 1
#Initiate cluster
#cl <- makeCluster(cores)
#calculate linkage disequilbrium
#sp_ld <- parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
#convert to a data frame
#sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
#write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
#                           scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
# stopCluster(cl)
}
############################################################
#  Null Alleles, HWE Deviation, Linkage Disequilibrium     #
############################################################
#genind list
sp_genind_ls <- list()
sp_genind_wild_ls <- list()
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_ls[[sp]]@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#run null allele calculations over all genind objects
sp_null_all <- parLapply(cl, sp_genind_wild_ls, null.all)
#create null allele frequency summary data frame
sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
stopCluster(cl)
#write out to CSV
write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
"_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#calculate linkage disequilbrium
sp_ld <- parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
#convert to a data frame
sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
stopCluster(cl)
}
parLapply(cl, sp_genind_wild_temp, pair.ia, sample = 1000)
sp_genind_wild_temp
end
sp_genind_wild_temp
sp_genind_wild_ls
############################################################
#  Null Alleles, HWE Deviation, Linkage Disequilibrium     #
############################################################
#genind list
sp_genind_ls <- list()
sp_genind_wild_ls <- list()
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_ls[[sp]]@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#run null allele calculations over all genind objects
sp_null_all <- parLapply(cl, sp_genind_wild_ls, null.all)
#create null allele frequency summary data frame
sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
stopCluster(cl)
#write out to CSV
write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
"_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#calculate linkage disequilbrium
sp_ld <- parLapply(cl, sp_genind_wild_ls, pair.ia, sample = 1000)
#convert to a data frame
sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
stopCluster(cl)
}
#loop to generate genetic summary statistics for populations
for(sp in 1:length(sp_genind_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
##start genetic analyses
#create genetic summary of the genind file
sp_sum <- summary(sp_genind_temp)
#create poppr file
sp_poppr <- poppr(sp_genind_temp)
#save mean for final output table
sp_hexp_mean <- sp_poppr[1:length(levels(sp_genind_temp@pop)),10]
#allele numbers by pop
sp_nall <- sp_sum$pop.n.all
#individual numbers
sp_ind <- sp_poppr[1:length(levels(sp_genind_temp@pop)), 2:3]
#save allelic richness for comparison
sp_allrich_list <- allelic.richness(sp_genind_temp)$Ar
sp_allrich_mean <- colMeans(allelic.richness(sp_genind_temp)$Ar)
#create data frame
sp_allpop_gendiv_sumstat_df <- signif(cbind(sp_ind, sp_nall, sp_allrich_mean, sp_hexp_mean),3)
#name rows
rownames(sp_allpop_gendiv_sumstat_df) <- levels(sp_genind_temp@pop)
colnames(sp_allpop_gendiv_sumstat_df) <- c("Ind","MLG", "NAll", "All_Rich", "Hexp")
#write out data frame
write.csv(sp_allpop_gendiv_sumstat_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_gendiv_sumstats.csv"))
#also run ZAIN individuals with reduced pop size
if(sp == 3|sp == 4|sp == 5){
sp_genind_red_temp <- repool(seppop(sp_genind_temp)[c(1:19, 23:26, 28:32, 34:35)])
sp_sum <- summary(sp_genind_red_temp)
#create poppr file
sp_poppr <- poppr(sp_genind_red_temp)
#save mean for final output table
sp_hexp_mean <- sp_poppr[1:length(levels(sp_genind_red_temp@pop)),10]
#allele numbers by pop
sp_nall <- sp_sum$pop.n.all
#individual numbers
sp_ind <- sp_poppr[1:length(levels(sp_genind_red_temp@pop)), 2:3]
#save allelic richness for comparison
sp_allrich_list <- allelic.richness(sp_genind_red_temp)$Ar
sp_allrich_mean <- colMeans(allelic.richness(sp_genind_red_temp)$Ar)
#create data frame
sp_redpop_gendiv_sumstat_df <- signif(cbind(sp_ind, sp_nall, sp_allrich_mean, sp_hexp_mean),3)
#name rows
rownames(sp_redpop_gendiv_sumstat_df) <- levels(sp_genind_red_temp@pop)
colnames(sp_redpop_gendiv_sumstat_df) <- c("Ind","MLG", "NAll", "All_Rich", "Hexp")
#write out data frame
write.csv(sp_redpop_gendiv_sumstat_df, paste0("../Analyses/Results/Sum_Stats/",
scenario_list[[sp]], "gendiv_sumstats_redpop.csv"))
}
}
