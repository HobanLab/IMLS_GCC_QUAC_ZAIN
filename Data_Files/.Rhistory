library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
library(tidyr)
#######################
#     Load files      #
#######################
#set working directory to load in data files
setwd("../../Data_Files")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "CSV_Files", pattern = "_clean_df.csv")
#load in function to calculate allele frequency categories
source("../Analyses/Functions/Fa_sample_funcs.R")
#create functions to run code
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#list out species
species_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned", "ZAIN_red_sample")
#list scenarios
scenario_list <- c("Garden_allSSR", "Wild_allSSR", "Garden_gSSR", "Wild_gSSR",
"Garden_EST", "Wild_EST")
#population lists for separating by garden/wild
#the first five are garden pops
#the last five are wild pops for both species
pop_list <- list(c(1:17), c(1:17), c(1:10), c(1:10), c(1:10),
c(18:22), c(18:21), c(11:35), c(11:35), c(11:35))
ZAIN_garden_list <- list(c(1:10), c(1:10), c(1:10))
ZAIN_wild_red_list <- list( c(11:19, 23:26, 28:32, 34:35),
c(11:19, 23:26, 28:32, 34:35),
c(11:19, 23:26, 28:32, 34:35))
#QUAC loci lists - EST vs. gSSRs
QUAC_EST_loci <- c("FIR031", "GOT009", "POR016", "FIR013", "FIR043", "GOTO40",
"PIE039", "FIR53", "FIR048", "PIE125")
QUAC_gSSR_loci <- c("0C11", "1G13", "G07", "1F02","QpZAG9")
#allele frequency category lists
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare",
"reg_rare","loc_com_d1","loc_com_d2","loc_rare")
########################################
#     Allelic representation code      #
########################################
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#create allele existing df
sp_all_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#create df of wild alleles captured by gardens
sp_wild_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##data frame to record allele capture code
sp_allele_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create allele existing df
sp_all_red_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create df of wild alleles captured by gardens
sp_wild_red_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - data frame to record allele capture code
sp_allele_red_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
sp_ind_rep_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
num_rep_list <- list(list(), list(), list(), list(),
list(), list(), list(), list(),
list())
num_rep_red_list<- list(list(), list(), list(), list(),
list(), list(), list(), list(),
list())
sp_ind_rep_red_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("CSV_Files/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
#levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
sp_garden_ind <- sum(table(sp_genind_temp@pop)[pop_list[[sp]]])
sp_garden_genind <- sp_genind_temp[1:sp_garden_ind,]
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
#sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
#levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
sp_wild_ind <- sum(table(sp_genind_temp@pop)[pop_list[[sp+5]]])
sp_wild_genind <- sp_genind_temp[(sp_garden_ind+1):(sp_garden_ind+sp_wild_ind),]
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
#n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, sp_wild_ind, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- sum(sp_wild_genpop@tab[sp_allele_cat[[cat]]] > dup_reps[[dup]])
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "%")
##try to add the individual rep
#save alleles existing
num_alleles_in_cat <- length(sp_allele_cat[[cat]])
#save each category
#for(a in 1:num_alleles_in_cat){
#    num_rep_list[[cat]][a] <- sum(sp_garden_genind@tab[,sp_allele_cat[[cat]]][,a] > 0, na.rm=T)
#}
#save data frame with
#sp_ind_rep_df[dup,cat] <- sum(num_rep_list[[cat]]>dup_reps[[dup]], na.rm = TRUE)/length(num_rep_list[[cat]])
}
}
#write out ind rep df
write.csv(sp_ind_rep_df, paste0("../Analyses/Results/Garden_Wild_Comparison/", species_list[[sp]], "_sp_ind_rep_df", n_drop_file, ".csv"))
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category in the wild
sp_all_red_exist_df[dup, cat] <- sum(sp_wild_red_genpop@tab[sp_allele_cat[[cat]]] > dup_reps[[dup]])
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "%")
#reduced alleles/cat
num_alleles_red_in_cat <- length(sp_allele_red_cat[[cat]])
#save each category
#for(a in 1:num_alleles_red_in_cat){
#  num_rep_red_list[[cat]][a] <- sum(sp_garden_genind@tab[,sp_allele_red_cat[[cat]]][,a] > 0, na.rm=T)
#}
#save data frame with
#sp_ind_rep_red_df[dup,cat] <- sum(num_rep_red_list[[cat]]>dup_reps[[dup]], na.rm = TRUE)/length(num_rep_red_list[[cat]])
}
}
}
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist2", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap2", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap2", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_ind_rep_red_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_sp_ind_rep_red_df", n_drop_file, "_wo_smallpops.csv"))
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist2", n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap2", n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap2", n_drop_file, ".csv"))
}
}
library(adegenet)
###########################
#     Load Data Files     #
###########################
setwd("../../Data_Files")
#Right now just doing the first two files
gen_inp_filenames<-c("QUAC_woK_allpop_clean.gen", "ZAIN_rebinned_allpop_clean.gen",
"ZAIN_rebinned_sample_clean.gen")
outp_filenames<-c("QUAC_woK_indiv_rep_percents", "ZAIN_indiv_rep_percents", "ZAIN_red_indiv_rep_percents")
#load in fa sample functions
source("../Analyses/Functions/Fa_sample_funcs.R")
#These numbers designate the populations for wild and garden, for Quercus and Zamia
#Used in code below to subset the genpop objects by wild and garden
#The ZAIN has some wild populations excluded- NOTE come back to this to discuss
garden_pop_numbers<-list(1:17,1:10,1:10)
wild_pop_numbers<-list(18:21,c(11:19, 23:26, 28:32, 34:35),
c(11:19, 23:26, 28:32, 34:35))
for (sp in 1:3){
#Right now just doing the first two files
gen_inp_filenames<-c("Adegenet_Files/QUAC_woK_allpop_clean.gen", "Adegenet_Files/ZAIN_rebinned_allpop_clean.gen", "Adegenet_Files/ZAIN_rebinned_sample_clean.gen")
outp_filenames<-c("QUAC_woK_indiv_rep_percents", "ZAIN_indiv_rep_percents", "ZAIN_red_indiv_rep_percents")
sp_genind <- read.genepop(gen_inp_filenames[sp], ncode = 3)
#allele categories list
all_cat_list <-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare")
#vector of duplicate reps (for 1 to 10 individuals)
dup_reps <- c(0:9)
#create garden genind.
#Note this cannot be done with seppop, because seppop will count only alleles in your subset, thus possibly "losing" wild alleles
num_garden_ind<-sum(table(sp_genind@pop)[garden_pop_numbers[[sp]]])
sp_garden_genind <- sp_genind[1:num_garden_ind,]
#rename pops
levels(sp_garden_genind@pop) <- rep("Garden",length(garden_pop_numbers[[sp]]))
#create wild genind object
#NOTE- This is actually quite tricky because unlike garden populations, wild populations kept are scattered through the dataset for ZAIN
#So we have to create two vectors- a vector of "starting individuals" and "ending individuals"
#and use those vectors to populate a list which will go from starting to ending individual of each population, all glued together
#then you have to unlist this list to make a vector
wild_ind_list<-list()
for (i in wild_pop_numbers[[sp]]){
wild_ind_list[[i]]<-(cumsum(table(sp_genind@pop))-table(sp_genind@pop)+1)[i]:cumsum(table(sp_genind@pop))[i]
}
sp_wild_genind <- sp_genind[unlist(wild_ind_list),]
#rename pops
levels(sp_wild_genind@pop) <- rep("Wild",length(wild_pop_numbers[[sp]]))
num_wild_ind <- as.numeric(table(sp_wild_genind@pop))
#convert to the wild genpop object
sp_wild_genpop <- genind2genpop(sp_wild_genind)
#calculate the allele categories in the wild populations
sp_all_cat <- get.allele.cat(sp_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)
#subset to allele of interest e.g. exlcuding regional alleles
sp_all_cat <- sp_all_cat[1:5]
#################################
#	How many individuals have each allele
#################################
#create a list to store the number of individuals representing each allele
#This list is length of 5, the five allele categories we are concerned with
#the elements of the list are vectors... the vector is length equal to the number of alleles in each category
# each element of the vector will be the number of individuals having that allele
#for example, [[1]][1:3] might be 5,1, 10 which means five individuals, 0 individuals, and 10 individuals have those first three alleles, resepectively
num_indiv_rep_list <- list(vector(), vector(), vector(), vector(), vector())
num_indiv_rep_list_he <-  list(vector(), vector(), vector(), vector(), vector())
num_indiv_rep_list_ho <-  list(vector(), vector(), vector(), vector(), vector())
#This for loop goes through the 5 allele categories of interest
#It then goes through all the alleles in a category
#It then counts the number of individuals, the number of homozygotes, and the number of heterozygotes for that allele
#recall that sp_garden_genind@tab is a matrix of nrows= number of individuals and ncols = number of alleles
#so every cell of the matrix is an individual-allele combination, and the data in the cell are the number of copies of that allele in that individual
#An individual can have the allele in 2 copies (homozygote), 1 copy (heterozygote), or not have the allele (0)
for(cat in 1:length(sp_all_cat)){
num_alleles_in_cat <- length(sp_all_cat[[cat]])
for (a in 1:num_alleles_in_cat){
num_indiv_rep_list[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] > 0, na.rm=T)	#either he or ho
num_indiv_rep_list_he[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] == 1, na.rm=T) 	#he
num_indiv_rep_list_ho[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] == 2, na.rm=T)	#ho
}
}
############################################################
# Percent of alleles represented in greater than "dup" number of individuals
############################################################
#create data frame to save results
#In this case the results are the percent of alleles present in greater than "dup" number of individuals
#The he and ho stand for individuals in the heterozygous and homozygous states
percent_indiv_results <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
percent_indiv_results_he <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
percent_indiv_results_ho <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
#This loop goes through the number of "dups" from 1 to 10 (with 1 meaning no "backup")
#Then through the loop of allele categories (5)
#Within that loop it determines if the number of individuals with that allele is greater than "dup",
#then divides the number of alleles meeting that criteria by the total number of alleles
#thus returning the proportion of alleles contained in more than "dup" individuals
#The he and ho stand for individuals in the heterozygous and homozygous states
for(dup in dup_reps){
for(cat in 1:length(sp_all_cat)){
#create data frame to store results
percent_indiv_results[dup+1,cat] <- sum(num_indiv_rep_list[[cat]]>dup)/length(sp_all_cat[[cat]])
percent_indiv_results_he[dup+1,cat] <- sum(num_indiv_rep_list_he[[cat]]>dup)/length(sp_all_cat[[cat]])
percent_indiv_results_ho[dup+1,cat] <- sum(num_indiv_rep_list_ho[[cat]]>dup)/length(sp_all_cat[[cat]])
}
}
#round off
percent_indiv_results <- signif(percent_indiv_results*100,3)
percent_indiv_results_he <- signif(percent_indiv_results_he*100,3)
percent_indiv_results_ho <- signif(percent_indiv_results_ho*100,3)
#label columns and rows
colnames(percent_indiv_results) <- all_cat_list
colnames(percent_indiv_results_he) <- all_cat_list
colnames(percent_indiv_results_ho) <- all_cat_list
rownames(percent_indiv_results) <- paste0(c(1:10), " or more copies")
rownames(percent_indiv_results_he) <- paste0(c(1:10), " or more copies")
rownames(percent_indiv_results_ho) <- paste0(c(1:10), " or more copies")
#save percents as output files
write.csv(percent_indiv_results, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],".csv"))
write.csv(percent_indiv_results_he, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],"_he",".csv"))
write.csv(percent_indiv_results_ho, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],"_ho",".csv"))
}
