library(adegenet)
library(poppr)
library(hierfstat)
library(PopGenReport)
library(pegas)
library(diveRsity)
#########################
#   Load Data Files     #
#########################
#set working directory to load in data files
setwd("../../Data_Files")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "Data_Frames/", pattern = "_clean_df.csv")
#create scenario list
scenario_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
###########################################
#          Genetic Stats by Pop           #
###########################################
#create a list of pop types
pop_type_list <- c("Garden", "Wild")
###loops to generate genetic summary statistics for populations
##outer loop is by species
#inner loop is by wild or botanic garden
for(sp in 1:length(sp_genind_list)){
##write loop to calculate all summary stats
for(pop_type in 1:length(pop_type_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
#limit by pop_type
sp_poptype_df_temp <- sp_df_temp[sp_df_temp[,3] == paste0(pop_type_list[[pop_type]]),]
sp_poptype_genind_temp <- sp_genind_temp[rownames(sp_genind_temp@tab) %in% sp_poptype_df_temp[,1],]
##start genetic analyses
#create genetic summary of the genind file
sp_sum <- summary(sp_poptype_genind_temp)
#create poppr file
sp_poppr <- poppr(sp_poptype_genind_temp)
#save mean for final output table
sp_hexp_mean <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)),10]
#allele numbers by pop
sp_nall <- sp_sum$pop.n.all
#individual numbers
sp_ind <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)), 2:3]
#save allelic richness for comparison
sp_allrich_list <- allelic.richness(sp_poptype_genind_temp)$Ar
sp_allrich_mean <- colMeans(allelic.richness(sp_poptype_genind_temp)$Ar)
#create data frame
sp_allpop_gendiv_sumstat_df <- signif(cbind(sp_ind, sp_nall, sp_allrich_mean, sp_hexp_mean),3)
#name rows
rownames(sp_allpop_gendiv_sumstat_df) <- unique(sp_poptype_df_temp$Pop)
colnames(sp_allpop_gendiv_sumstat_df) <- c("Ind","MLG", "NAll", "All_Rich", "Hexp")
#write out data frame
write.csv(sp_allpop_gendiv_sumstat_df, paste0("../Analyses/Results/Sum_Stats/", pop_type_list[[pop_type]], "_", gsub("\\..*","",sp_genind_list[[sp]]),
"_gendiv_sumstats.csv"))
}
}
table(sp_genind_temp@pop)
seppop(sp_genind_temp)1:20
seppop(sp_genind_temp)[1:20]
table(sp_genind_temp@pop)
seppop(sp_genind_temp)
seppop(sp_genind_temp)[1:18]
table(sp_genind_temp@pop)
seppop(sp_genind_temp)[c(1:18,22:25, 27:31,33:35)]
seppop(sp_genind_temp)[18]
seppop(sp_genind_temp)[19]
seppop(sp_genind_temp)[20]
seppop(sp_genind_temp)[21]
seppop(sp_genind_temp)[22]
seppop(sp_genind_temp)[23]
seppop(sp_genind_temp)[24]
seppop(sp_genind_temp)[25]
seppop(sp_genind_temp)[26]
seppop(sp_genind_temp)[27]
seppop(sp_genind_temp)[278]
seppop(sp_genind_temp)[28]
seppop(sp_genind_temp)[29]
seppop(sp_genind_temp)[30]
seppop(sp_genind_temp)[31]
seppop(sp_genind_temp)[32]
seppop(sp_genind_temp)[33]
seppop(sp_genind_temp)[34]
seppop(sp_genind_temp)[35]
seppop(sp_genind_temp)[36]
repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])
table(repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])@pop)
length(repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])@pop)
length(table(repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])@pop))
###loops to generate genetic summary statistics for populations
##outer loop is by species
#inner loop is by wild or botanic garden
for(sp in 1:length(sp_genind_list)){
##write loop to calculate all summary stats
for(pop_type in 1:length(pop_type_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
if(sp == 3|sp == 4){
#limit by populations that are too small, wild
sp_genind_temp <- repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])
#limit by pop_type
sp_poptype_df_temp <- sp_df_temp[sp_df_temp[,3] == paste0(pop_type_list[[pop_type]]),]
sp_poptype_genind_temp <- sp_genind_temp[rownames(sp_genind_temp@tab) %in% sp_poptype_df_temp[,1],]
##start genetic analyses
#create genetic summary of the genind file
sp_sum <- summary(sp_poptype_genind_temp)
#create poppr file
sp_poppr <- poppr(sp_poptype_genind_temp)
#save mean for final output table
sp_hexp_mean <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)),10]
#allele numbers by pop
sp_nall <- sp_sum$pop.n.all
#individual numbers
sp_ind <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)), 2:3]
#save allelic richness for comparison
sp_allrich_list <- allelic.richness(sp_poptype_genind_temp)$Ar
sp_allrich_mean <- colMeans(allelic.richness(sp_poptype_genind_temp)$Ar)
#create data frame
sp_allpop_gendiv_sumstat_df <- signif(cbind(sp_ind, sp_nall, sp_allrich_mean, sp_hexp_mean),3)
#name rows
rownames(sp_allpop_gendiv_sumstat_df) <- unique(sp_poptype_df_temp$Pop)
colnames(sp_allpop_gendiv_sumstat_df) <- c("Ind","MLG", "NAll", "All_Rich", "Hexp")
#write out data frame
write.csv(sp_allpop_gendiv_sumstat_df, paste0("../Analyses/Results/Sum_Stats/", pop_type_list[[pop_type]], "_", gsub("\\..*","",sp_genind_list[[sp]]),
"_gendiv_sumstats.csv"))
}
}
}
sp_genind_temp
head(rownames(sp_genind_temp@tab))
###loops to generate genetic summary statistics for populations
##outer loop is by species
#inner loop is by wild or botanic garden
for(sp in 1:length(sp_genind_list)){
##write loop to calculate all summary stats
for(pop_type in 1:length(pop_type_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
if(sp == 3|sp == 4){
#limit by populations that are too small, wild
sp_genind_temp <- repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])
#limit by pop_type
sp_poptype_df_temp <- sp_df_temp[sp_df_temp[,3] == paste0(pop_type_list[[pop_type]]),]
sp_poptype_genind_temp <- sp_genind_temp[rownames(sp_genind_temp@tab) %in% sp_poptype_df_temp[,1],]
##start genetic analyses
#create genetic summary of the genind file
sp_sum <- summary(sp_poptype_genind_temp)
#create poppr file
sp_poppr <- poppr(sp_poptype_genind_temp)
#save mean for final output table
sp_hexp_mean <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)),10]
#allele numbers by pop
sp_nall <- sp_sum$pop.n.all
#individual numbers
sp_ind <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)), 2:3]
#save allelic richness for comparison
sp_allrich_list <- allelic.richness(sp_poptype_genind_temp)$Ar
sp_allrich_mean <- colMeans(allelic.richness(sp_poptype_genind_temp)$Ar)
#create data frame
sp_allpop_gendiv_sumstat_df <- signif(cbind(sp_ind, sp_nall, sp_allrich_mean, sp_hexp_mean),3)
#name rows
#rownames(sp_allpop_gendiv_sumstat_df) <- unique(sp_poptype_df_temp$Pop)
#colnames(sp_allpop_gendiv_sumstat_df) <- c("Ind","MLG", "NAll", "All_Rich", "Hexp")
#write out data frame
#write.csv(sp_allpop_gendiv_sumstat_df, paste0("../Analyses/Results/Sum_Stats/", pop_type_list[[pop_type]], "_", gsub("\\..*","",sp_genind_list[[sp]]),
#                                              "_gendiv_sumstats.csv"))
}
}
}
sp_allpop_gendiv_sumstat_df
unique(sp_poptype_df_temp$Pop)c(1:19, 23:26,28:32,34:35)]
unique(sp_poptype_df_temp$Pop)[c(1:19, 23:26,28:32,34:35)]
unique(sp_genind_temp@pop)
levels(sp_genind_temp@pop)
levels(sp_poptype_genind_temp@pop)
###loops to generate genetic summary statistics for populations
##outer loop is by species
#inner loop is by wild or botanic garden
for(sp in 1:length(sp_genind_list)){
##write loop to calculate all summary stats
for(pop_type in 1:length(pop_type_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
if(sp == 3|sp == 4){
#limit by populations that are too small, wild
sp_genind_temp <- repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])
#limit by pop_type
sp_poptype_df_temp <- sp_df_temp[sp_df_temp[,3] == paste0(pop_type_list[[pop_type]]),]
sp_poptype_genind_temp <- sp_genind_temp[rownames(sp_genind_temp@tab) %in% sp_poptype_df_temp[,1],]
##start genetic analyses
#create genetic summary of the genind file
sp_sum <- summary(sp_poptype_genind_temp)
#create poppr file
sp_poppr <- poppr(sp_poptype_genind_temp)
#save mean for final output table
sp_hexp_mean <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)),10]
#allele numbers by pop
sp_nall <- sp_sum$pop.n.all
#individual numbers
sp_ind <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)), 2:3]
#save allelic richness for comparison
sp_allrich_list <- allelic.richness(sp_poptype_genind_temp)$Ar
sp_allrich_mean <- colMeans(allelic.richness(sp_poptype_genind_temp)$Ar)
#create data frame
sp_allpop_gendiv_sumstat_df <- signif(cbind(sp_ind, sp_nall, sp_allrich_mean, sp_hexp_mean),3)
#name rows
rownames(sp_allpop_gendiv_sumstat_df) <- levels(sp_poptype_genind_temp@pop)
#colnames(sp_allpop_gendiv_sumstat_df) <- c("Ind","MLG", "NAll", "All_Rich", "Hexp")
#write out data frame
#write.csv(sp_allpop_gendiv_sumstat_df, paste0("../Analyses/Results/Sum_Stats/", pop_type_list[[pop_type]], "_", gsub("\\..*","",sp_genind_list[[sp]]),
#                                              "_gendiv_sumstats.csv"))
}
}
}
sp_allpop_gendiv_sumstat_df
###loops to generate genetic summary statistics for populations
##outer loop is by species
#inner loop is by wild or botanic garden
for(sp in 1:length(sp_genind_list)){
##write loop to calculate all summary stats
for(pop_type in 1:length(pop_type_list)){
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
#add loop to remove pops < 20 individuals for ZAIN
if(sp == 3|sp == 4){
#limit by populations that are too small, wild
sp_genind_temp <- repool(seppop(sp_genind_temp)[c(1:19, 23:26,28:32,34:35)])
#limit by pop_type
sp_poptype_df_temp <- sp_df_temp[sp_df_temp[,3] == paste0(pop_type_list[[pop_type]]),]
sp_poptype_genind_temp <- sp_genind_temp[rownames(sp_genind_temp@tab) %in% sp_poptype_df_temp[,1],]
##start genetic analyses
#create genetic summary of the genind file
sp_sum <- summary(sp_poptype_genind_temp)
#create poppr file
sp_poppr <- poppr(sp_poptype_genind_temp)
#save mean for final output table
sp_hexp_mean <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)),10]
#allele numbers by pop
sp_nall <- sp_sum$pop.n.all
#individual numbers
sp_ind <- sp_poppr[1:length(levels(sp_poptype_genind_temp@pop)), 2:3]
#save allelic richness for comparison
sp_allrich_list <- allelic.richness(sp_poptype_genind_temp)$Ar
sp_allrich_mean <- colMeans(allelic.richness(sp_poptype_genind_temp)$Ar)
#create data frame
sp_allpop_gendiv_sumstat_df <- signif(cbind(sp_ind, sp_nall, sp_allrich_mean, sp_hexp_mean),3)
#name rows
rownames(sp_allpop_gendiv_sumstat_df) <- levels(sp_poptype_genind_temp@pop)
colnames(sp_allpop_gendiv_sumstat_df) <- c("Ind","MLG", "NAll", "All_Rich", "Hexp")
#write out data frame
write.csv(sp_allpop_gendiv_sumstat_df, paste0("../Analyses/Results/Sum_Stats/", pop_type_list[[pop_type]], "_", gsub("\\..*","",sp_genind_list[[sp]]),
"_gendiv_sumstats.csv"))
}
}
}
