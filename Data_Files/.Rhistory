QUAC_PCA_df$Axis3 <- QUAC_PCA$li$Axis3
ggplot(QUAC_PCA_df, aes(as.numeric(Axis2), as.numeric(Axis3), col = Pop_Type,
shape = Pop)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", QUAC_pc1, "%)")) +
ylab(paste0("PC2 (", QUAC_pc2, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,17,18,3,4))
ggplot(QUAC_PCA_df, aes(as.numeric(Axis2), as.numeric(Axis3), col = Pop_Type,
shape = Pop)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", QUAC_pc2, "%)")) +
ylab(paste0("PC2 (", QUAC_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,17,18,3,4))
##ZAIN
pdf("../Analyses/Results/Clustering/QUAC_woK_PCA2_3.pdf", width = 10, height = 8)
ggplot(QUAC_PCA_df, aes(as.numeric(Axis2), as.numeric(Axis3), col = Pop_Type,
shape = Pop)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", QUAC_pc2, "%)")) +
ylab(paste0("PC2 (", QUAC_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,17,18,3,4))
dev.off()
##ZAIN
pdf("../Analyses/Results/Clustering/QUAC_woK_PCA2_3.pdf", width = 10, height = 8)
ggplot(QUAC_PCA_df, aes(as.numeric(Axis2), as.numeric(Axis3), col = Pop_Type,
shape = Pop)) +
geom_point(size = 4) +
xlab(paste0("PC2 (", QUAC_pc2, "%)")) +
ylab(paste0("PC3 (", QUAC_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,17,18,3,4))
dev.off()
##Final PCA code for ZAIN
#create tab object for genind
ZAIN_rebinned_tab <- tab(ZAIN_garden_wild_PCA_genind, freq=TRUE, NA.method="mean")
ZAIN_genind <- read.genepop("ZAIN_rebinned_allpop_clean.gen",
ncode = 3)
ZAIN_genind <- read.genepop("Adegenet_Files/ZAIN_rebinned_allpop_clean.gen",
ncode = 3)
#reorg the datafile
ZAIN_garden_ind <- sum(table(ZAIN_genind@pop)[1:10])
ZAIN_garden_genind <- ZAIN_genind[1:ZAIN_garden_ind,]
levels(ZAIN_garden_genind@pop) <- rep("Garden", 10)
#
ZAIN_wild_ind <- sum(table(ZAIN_genind@pop)[c(11:19, 23:26, 28:32, 34:35)])
#
ZAIN_wild_ind <- sum(table(ZAIN_genind@pop)[c(11:19, 23:26, 28:32, 34:35)])
ZAIN_wild_genind <- ZAIN_genind[(ZAIN_garden_ind+1):(ZAIN_garden_ind+ZAIN_wild_ind),]
#combine datafile
ZAIN_garden_wild_genind <- repool(ZAIN_garden_genind,
ZAIN_wild_genind)
#create tab object for genind
ZAIN_tab <- tab(ZAIN_garden_wild_genind, freq=TRUE, NA.method="mean")
#run PCA
ZAIN_PCA <- dudi.pca(ZAIN_tab, scale = FALSE, nf = 2, scannf = FALSE)
#create tab object for genind
ZAIN_tab <- tab(ZAIN_garden_wild_genind, freq=TRUE, NA.method="mean")
#run PCA
ZAIN_PCA <- dudi.pca(ZAIN_tab, scale = FALSE, nf = 2, scannf = FALSE)
#run PCA
ZAIN_PCA <- dudi.pca(ZAIN_tab, scale = FALSE, nf = 3, scannf = FALSE)
#create PCA data frame
ZAIN_PCA_df <- as.data.frame(cbind(as.numeric(ZAIN_PCA$li$Axis1),
as.numeric(ZAIN_PCA$li$Axis2),
as.numeric(ZAIN_PCA$li$Axis3)))
View(ZAIN_PCA_df)
#load data frame
ZAIN_df <- read.csv("CSV_Files/ZAIN_rebinned_allpop_clean_df.csv")
#specify wild vs. garden individual
ZAIN_PCA_df$Pop_Type <- ZAIN_df$Garden_Wild
#add variety
ZAIN_PCA_df$Variety <- ZAIN_pop_df$Variety
#specify wild vs. garden individual
ZAIN_PCA_df$Pop_Type <- c(rep(levels(ZAIN_garden_wild_PCA_genind@pop)[1],
as.numeric(table(ZAIN_garden_wild_PCA_genind@pop)[1])),
rep(levels(ZAIN_garden_wild_PCA_genind@pop)[2],
as.numeric(table(ZAIN_garden_wild_PCA_genind@pop)[2])))
levels(ZAIN_garden_wild_PCA_genind@pop)
levels(ZAIN_garden_wild_genind@pop)
levels(ZAIN_garden_genind@pop)
table(ZAIN_garden_genind@pop)
as.numeric(table(ZAIN_garden_genind@pop))
#specify wild vs. garden individual
ZAIN_PCA_df$Pop_Type <- c(rep("Garden",as.numeric(table(ZAIN_garden_genind@pop))),
rep("Wild", as.numeric(table(ZAIN_wild_genind@pop))))
as.numeric(table(ZAIN_garden_genind@pop))
as.numeric(table(ZAIN_wild_genind@pop))
sum(as.numeric(table(ZAIN_wild_genind@pop)))
#specify wild vs. garden individual
ZAIN_PCA_df$Pop_Type <- c(rep("Garden",as.numeric(table(ZAIN_garden_genind@pop))),
rep("Wild", sum(as.numeric(table(ZAIN_wild_genind@pop)))))
length(ZAIN_PCA_df[,1])
View(ZAIN_df)
#load pop df
ZAIN_pop_df <- read.csv("CSV_Files/ZAIN_pop_df.csv")
View(ZAIN_pop_df)
rownames(ZAIN_genind@tab) <- ZAIN_df$Sample.Name
#load pop df
ZAIN_pop_df <- read.csv("CSV_Files/ZAIN_pop_df.csv")
##reorg the datafile
#garden
ZAIN_garden_ind <- sum(table(ZAIN_genind@pop)[1:10])
ZAIN_garden_genind <- ZAIN_genind[1:ZAIN_garden_ind,]
levels(ZAIN_garden_genind@pop) <- rep("Garden", 10)
#wild
ZAIN_wild_ind <- sum(table(ZAIN_genind@pop)[c(11:19, 23:26, 28:32, 34:35)])
ZAIN_wild_genind <- ZAIN_genind[(ZAIN_garden_ind+1):(ZAIN_garden_ind+ZAIN_wild_ind),]
#combine datafile
ZAIN_garden_wild_genind <- repool(ZAIN_garden_genind,
ZAIN_wild_genind)
#create tab object for genind
ZAIN_tab <- tab(ZAIN_garden_wild_genind, freq=TRUE, NA.method="mean")
#run PCA
ZAIN_PCA <- dudi.pca(ZAIN_tab, scale = FALSE, nf = 3, scannf = FALSE)
#create PCA data frame
ZAIN_PCA_df <- as.data.frame(cbind(as.numeric(ZAIN_PCA$li$Axis1),
as.numeric(ZAIN_PCA$li$Axis2),
as.numeric(ZAIN_PCA$li$Axis3)))
tab(ZAIN_garden_wild_genind)
rownames(tab(ZAIN_garden_wild_genind))
#organize df
rownames(ZAIN_PCA_df) <- tab(ZAIN_garden_wild_genind)
#organize df
rownames(ZAIN_PCA_df) <- rownames(tab(ZAIN_garden_wild_genind))
#limit df by reduced pops
ZAIN_red_pop_df <- ZAIN_pop_df[rownames(ZAIN_pop_df) %in% rownames(ZAIN_PCA_df)]
View(ZAIN_red_pop_df)
#limit df by reduced pops
ZAIN_red_pop_df <- ZAIN_pop_df[rownames(ZAIN_pop_df) %in% rownames(ZAIN_PCA_df),]
is.data.frame(ZAIN_pop_df)
is.data.frame(ZAIN_PCA_df)
#limit df by reduced pops
ZAIN_red_pop_df <- ZAIN_pop_df[rownames(ZAIN_pop_df) %in% rownames(ZAIN_PCA_df),]
View(ZAIN_red_pop_df)
rownames(ZAIN_pop_df)
#limit df by reduced pops
ZAIN_red_pop_df <- ZAIN_pop_df[ZAIN_pop_df$Sample.Name %in% rownames(ZAIN_PCA_df),]
View(ZAIN_red_pop_df)
#specify wild vs. garden individual
ZAIN_PCA_df$Pop_Type <- ZAIN_red_pop_df$Pop_Type
#add variety
ZAIN_PCA_df$Variety <- ZAIN_red_pop_df$Variety
#name columns of the  PCA data frame
colnames(ZAIN_PCA_df) <- c("Axis1","Axis2","Pop_Type", "Variety")
View(ZAIN_PCA_df)
#name columns of the  PCA data frame
colnames(ZAIN_PCA_df) <- c("Axis1","Axis2","Axis3","Pop_Type", "Variety")
#calculate % variation explained by axis
ZAIN_pc1 <- signif(((ZAIN_PCA_df$eig[1])/sum(ZAIN_PCA_df$eig))*100, 3)
ZAIN_pc2 <- signif(((ZAIN_PCA_df$eig[2])/sum(ZAIN_PCA_df$eig))*100, 3)
ZAIN_pc3 <- signif(((ZAIN_PCA_df$eig[3])/sum(ZAIN_PCA_df$eig))*100, 3)
ggplot(ZAIN_PCA_df, aes(as.numeric(Axis1), as.numeric(Axis2), col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", ZAIN_pc1, "%)")) +
ylab(paste0("PC2 (", ZAIN_pc2, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ggplot(ZAIN_PCA_df, aes(Axis1, Axis2, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", ZAIN_pc1, "%)")) +
ylab(paste0("PC2 (", ZAIN_pc2, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
#calculate % variation explained by axis
ZAIN_pc1 <- signif(((ZAIN_PCA_df$eig[1])/sum(ZAIN_PCA_df$eig))*100, 3)
ZAIN_pc2 <- signif(((ZAIN_PCA_df$eig[2])/sum(ZAIN_PCA_df$eig))*100, 3)
ZAIN_pc3 <- signif(((ZAIN_PCA_df$eig[3])/sum(ZAIN_PCA_df$eig))*100, 3)
ggplot(ZAIN_PCA_df, aes(Axis1, Axis2, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", ZAIN_pc1, "%)")) +
ylab(paste0("PC2 (", ZAIN_pc2, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ZAIN_pc1
#calculate % variation explained by axis
ZAIN_pc1 <- signif(((ZAIN_PCA$eig[1])/sum(ZAIN_PCA$eig))*100, 3)
ZAIN_pc2 <- signif(((ZAIN_PCA$eig[2])/sum(ZAIN_PCA$eig))*100, 3)
ZAIN_pc1
ZAIN_pc2
ggplot(ZAIN_PCA_df, aes(Axis1, Axis2, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", ZAIN_pc1, "%)")) +
ylab(paste0("PC2 (", ZAIN_pc2, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ZAIN_pc3
ZAIN_pc3 <- signif(((ZAIN_PCA$eig[3])/sum(ZAIN_PCA$eig))*100, 3)
ZAIN_pc3
ggplot(ZAIN_PCA_df, aes(Axis1, Axis2, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC2 (", ZAIN_pc2, "%)")) +
ylab(paste0("PC3 (", ZAIN_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ggplot(ZAIN_PCA_df, aes(Axis2, Axis3, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC2 (", ZAIN_pc2, "%)")) +
ylab(paste0("PC3 (", ZAIN_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
#wild
ZAIN_wild_ind <- sum(table(ZAIN_genind@pop)[c(11:35)])
ZAIN_wild_genind <- ZAIN_genind[(ZAIN_garden_ind+1):(ZAIN_garden_ind+ZAIN_wild_ind),]
#combine datafile
ZAIN_garden_wild_genind <- repool(ZAIN_garden_genind,
ZAIN_wild_genind)
#create tab object for genind
ZAIN_tab <- tab(ZAIN_garden_wild_genind, freq=TRUE, NA.method="mean")
#run PCA
ZAIN_PCA <- dudi.pca(ZAIN_tab, scale = FALSE, nf = 3, scannf = FALSE)
#create PCA data frame
ZAIN_PCA_df <- as.data.frame(cbind(as.numeric(ZAIN_PCA$li$Axis1),
as.numeric(ZAIN_PCA$li$Axis2),
as.numeric(ZAIN_PCA$li$Axis3)))
#organize df
rownames(ZAIN_PCA_df) <- rownames(tab(ZAIN_garden_wild_genind))
#limit df by reduced pops
ZAIN_red_pop_df <- ZAIN_pop_df[ZAIN_pop_df$Sample.Name %in% rownames(ZAIN_PCA_df),]
#specify wild vs. garden individual
ZAIN_PCA_df$Pop_Type <- ZAIN_red_pop_df$Pop_Type
#add variety
ZAIN_PCA_df$Variety <- ZAIN_red_pop_df$Variety
#name columns of the  PCA data frame
colnames(ZAIN_PCA_df) <- c("Axis1","Axis2","Axis3","Pop_Type", "Variety")
#calculate % variation explained by axis
ZAIN_pc1 <- signif(((ZAIN_PCA$eig[1])/sum(ZAIN_PCA$eig))*100, 3)
ZAIN_pc2 <- signif(((ZAIN_PCA$eig[2])/sum(ZAIN_PCA$eig))*100, 3)
ZAIN_pc3 <- signif(((ZAIN_PCA$eig[3])/sum(ZAIN_PCA$eig))*100, 3)
ggplot(ZAIN_PCA_df, aes(Axis2, Axis3, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC2 (", ZAIN_pc2, "%)")) +
ylab(paste0("PC3 (", ZAIN_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ggplot(ZAIN_PCA_df, aes(Axis1, Axis2, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", ZAIN_pc2, "%)")) +
ylab(paste0("PC2 (", ZAIN_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ggplot(ZAIN_PCA_df, aes(Axis1, Axis2, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC1 (", ZAIN_pc1, "%)")) +
ylab(paste0("PC2 (", ZAIN_pc2, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ggplot(ZAIN_PCA_df, aes(Axis2, Axis3, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC2 (", ZAIN_pc2, "%)")) +
ylab(paste0("PC3 (", ZAIN_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
ZAIN_pc3
QUAC_pc3
##ZAIN
pdf("../Analyses/Results/Clustering/PCA/ZAIN_PCA2_3.pdf", width = 10, height = 8)
ggplot(ZAIN_PCA_df, aes(Axis2, Axis3, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC2 (", ZAIN_pc2, "%)")) +
ylab(paste0("PC3 (", ZAIN_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
dev.off()
ggplot(ZAIN_PCA_df, aes(Axis1, Axis3, col = Pop_Type,
shape = Variety)) +
geom_point(size = 4) +
xlab(paste0("PC2 (", ZAIN_pc1, "%)")) +
ylab(paste0("PC3 (", ZAIN_pc3, "%)")) +
theme_bw() +
scale_color_manual(values = c("mediumseagreen", "black")) +
scale_shape_manual(values = c(16,18,3))
library(adegenet)
#load in fa sample functions
source("../Analyses/Functions/Fa_sample_funcs.R")
#These numbers designate the populations for wild and garden, for Quercus and Zamia
#Used in code below to subset the genpop objects by wild and garden
#The ZAIN has some wild populations excluded- NOTE come back to this to discuss
garden_pop_numbers<-list(1:17,1:10)
wild_pop_numbers<-list(18:21,c(11:19, 23:26, 28:32, 34:35))
for (sp in 1:2){
#Right now just doing the first two files
gen_inp_filenames<-c("Adegenet_Files/QUAC_woK_allpop_clean.gen", "Adegenet_Files/ZAIN_rebinned_allpop_clean.gen", "Adegenet_Files/ZAIN_rebinned_sample_clean.gen")
outp_filenames<-c("QUAC_woK_indiv_rep_percents", "ZAIN_indiv_rep_percents", "ZAIN_red_indiv_rep_percents")
sp_genind <- read.genepop(gen_inp_filenames[sp], ncode = 3)
#allele categories list
all_cat_list <-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare")
#vector of duplicate reps (for 1 to 10 individuals)
dup_reps <- c(0:9)
#create garden genind.
#Note this cannot be done with seppop, because seppop will count only alleles in your subset, thus possibly "losing" wild alleles
num_garden_ind<-sum(table(sp_genind@pop)[garden_pop_numbers[[sp]]])
sp_garden_genind <- sp_genind[1:num_garden_ind,]
#rename pops
levels(sp_garden_genind@pop) <- rep("Garden",length(garden_pop_numbers[[sp]]))
#create wild genind object
#NOTE- This is actually quite tricky because unlike garden populations, wild populations kept are scattered through the dataset for ZAIN
#So we have to create two vectors- a vector of "starting individuals" and "ending individuals"
#and use those vectors to populate a list which will go from starting to ending individual of each population, all glued together
#then you have to unlist this list to make a vector
wild_ind_list<-list()
for (i in wild_pop_numbers[[sp]]){
wild_ind_list[[i]]<-(cumsum(table(sp_genind@pop))-table(sp_genind@pop)+1)[i]:cumsum(table(sp_genind@pop))[i]
}
sp_wild_genind <- sp_genind[unlist(wild_ind_list),]
#rename pops
levels(sp_wild_genind@pop) <- rep("Wild",length(wild_pop_numbers[[sp]]))
#convert to the wild genpop object
sp_wild_genpop <- genind2genpop(sp_wild_genind)
#calculate the allele categories in the wild populations
sp_all_cat <- get.allele.cat(sp_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)
#subset to allele of interest e.g. exlcuding regional alleles
sp_all_cat <- sp_all_cat[1:5]
#################################
#	How many individuals have each allele
#################################
#create a list to store the number of individuals representing each allele
#This list is length of 5, the five allele categories we are concerned with
#the elements of the list are vectors... the vector is length equal to the number of alleles in each category
# each element of the vector will be the number of individuals having that allele
#for example, [[1]][1:3] might be 5,1, 10 which means five individuals, 0 individuals, and 10 individuals have those first three alleles, resepectively
num_indiv_rep_list <- list(vector(), vector(), vector(), vector(), vector())
num_indiv_rep_list_he <-  list(vector(), vector(), vector(), vector(), vector())
num_indiv_rep_list_ho <-  list(vector(), vector(), vector(), vector(), vector())
#This for loop goes through the 5 allele categories of interest
#It then goes through all the alleles in a category
#It then counts the number of individuals, the number of homozygotes, and the number of heterozygotes for that allele
#recall that sp_garden_genind@tab is a matrix of nrows= number of individuals and ncols = number of alleles
#so every cell of the matrix is an individual-allele combination, and the data in the cell are the number of copies of that allele in that individual
#An individual can have the allele in 2 copies (homozygote), 1 copy (heterozygote), or not have the allele (0)
for(cat in 1:length(sp_all_cat)){
num_alleles_in_cat <- length(sp_all_cat[[cat]])
for (a in 1:num_alleles_in_cat){
num_indiv_rep_list[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] > 0, na.rm=T)	#either he or ho
num_indiv_rep_list_he[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] == 1, na.rm=T) 	#he
num_indiv_rep_list_ho[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] == 2, na.rm=T)	#ho
}
}
############################################################
# Percent of alleles represented in greater than "dup" number of individuals
############################################################
#create data frame to save results
#In this case the results are the percent of alleles present in greater than "dup" number of individuals
#The he and ho stand for individuals in the heterozygous and homozygous states
percent_indiv_results <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
percent_indiv_results_he <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
percent_indiv_results_ho <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
#This loop goes through the number of "dups" from 1 to 10 (with 1 meaning no "backup")
#Then through the loop of allele categories (5)
#Within that loop it determines if the number of individuals with that allele is greater than "dup",
#then divides the number of alleles meeting that criteria by the total number of alleles
#thus returning the proportion of alleles contained in more than "dup" individuals
#The he and ho stand for individuals in the heterozygous and homozygous states
for(dup in dup_reps){
for(cat in 1:length(sp_all_cat)){
#create data frame to store results
percent_indiv_results[dup+1,cat] <- sum(num_indiv_rep_list[[cat]]>dup)/length(sp_all_cat[[cat]])
percent_indiv_results_he[dup+1,cat] <- sum(num_indiv_rep_list_he[[cat]]>dup)/length(sp_all_cat[[cat]])
percent_indiv_results_ho[dup+1,cat] <- sum(num_indiv_rep_list_ho[[cat]]>dup)/length(sp_all_cat[[cat]])
}
}
#round off
percent_indiv_results <- signif(percent_indiv_results*100,3)
percent_indiv_results_he <- signif(percent_indiv_results_he*100,3)
percent_indiv_results_ho <- signif(percent_indiv_results_ho*100,3)
#label columns and rows
colnames(percent_indiv_results) <- all_cat_list
colnames(percent_indiv_results_he) <- all_cat_list
colnames(percent_indiv_results_ho) <- all_cat_list
rownames(percent_indiv_results) <- paste0(c(1:10), " or more copies")
rownames(percent_indiv_results_he) <- paste0(c(1:10), " or more copies")
rownames(percent_indiv_results_ho) <- paste0(c(1:10), " or more copies")
#save percents as output files
write.csv(percent_indiv_results, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],".csv"))
write.csv(percent_indiv_results_he, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],"_he",".csv"))
write.csv(percent_indiv_results_ho, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],"_ho",".csv"))
}
sp_wild_genpop
table(sp_wild_genind@pop)
as.numeric(table(sp_wild_genind@pop))
for (sp in 1:2){
#Right now just doing the first two files
gen_inp_filenames<-c("Adegenet_Files/QUAC_woK_allpop_clean.gen", "Adegenet_Files/ZAIN_rebinned_allpop_clean.gen", "Adegenet_Files/ZAIN_rebinned_sample_clean.gen")
outp_filenames<-c("QUAC_woK_indiv_rep_percents", "ZAIN_indiv_rep_percents", "ZAIN_red_indiv_rep_percents")
sp_genind <- read.genepop(gen_inp_filenames[sp], ncode = 3)
#allele categories list
all_cat_list <-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare")
#vector of duplicate reps (for 1 to 10 individuals)
dup_reps <- c(0:9)
#create garden genind.
#Note this cannot be done with seppop, because seppop will count only alleles in your subset, thus possibly "losing" wild alleles
num_garden_ind<-sum(table(sp_genind@pop)[garden_pop_numbers[[sp]]])
sp_garden_genind <- sp_genind[1:num_garden_ind,]
#rename pops
levels(sp_garden_genind@pop) <- rep("Garden",length(garden_pop_numbers[[sp]]))
#create wild genind object
#NOTE- This is actually quite tricky because unlike garden populations, wild populations kept are scattered through the dataset for ZAIN
#So we have to create two vectors- a vector of "starting individuals" and "ending individuals"
#and use those vectors to populate a list which will go from starting to ending individual of each population, all glued together
#then you have to unlist this list to make a vector
wild_ind_list<-list()
for (i in wild_pop_numbers[[sp]]){
wild_ind_list[[i]]<-(cumsum(table(sp_genind@pop))-table(sp_genind@pop)+1)[i]:cumsum(table(sp_genind@pop))[i]
}
sp_wild_genind <- sp_genind[unlist(wild_ind_list),]
#rename pops
levels(sp_wild_genind@pop) <- rep("Wild",length(wild_pop_numbers[[sp]]))
num_wild_ind <- as.numeric(table(sp_wild_genind@pop))
#convert to the wild genpop object
sp_wild_genpop <- genind2genpop(sp_wild_genind)
#calculate the allele categories in the wild populations
sp_all_cat <- get.allele.cat(sp_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)
#subset to allele of interest e.g. exlcuding regional alleles
sp_all_cat <- sp_all_cat[1:5]
#################################
#	How many individuals have each allele
#################################
#create a list to store the number of individuals representing each allele
#This list is length of 5, the five allele categories we are concerned with
#the elements of the list are vectors... the vector is length equal to the number of alleles in each category
# each element of the vector will be the number of individuals having that allele
#for example, [[1]][1:3] might be 5,1, 10 which means five individuals, 0 individuals, and 10 individuals have those first three alleles, resepectively
num_indiv_rep_list <- list(vector(), vector(), vector(), vector(), vector())
num_indiv_rep_list_he <-  list(vector(), vector(), vector(), vector(), vector())
num_indiv_rep_list_ho <-  list(vector(), vector(), vector(), vector(), vector())
#This for loop goes through the 5 allele categories of interest
#It then goes through all the alleles in a category
#It then counts the number of individuals, the number of homozygotes, and the number of heterozygotes for that allele
#recall that sp_garden_genind@tab is a matrix of nrows= number of individuals and ncols = number of alleles
#so every cell of the matrix is an individual-allele combination, and the data in the cell are the number of copies of that allele in that individual
#An individual can have the allele in 2 copies (homozygote), 1 copy (heterozygote), or not have the allele (0)
for(cat in 1:length(sp_all_cat)){
num_alleles_in_cat <- length(sp_all_cat[[cat]])
for (a in 1:num_alleles_in_cat){
num_indiv_rep_list[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] > 0, na.rm=T)	#either he or ho
num_indiv_rep_list_he[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] == 1, na.rm=T) 	#he
num_indiv_rep_list_ho[[cat]][a] <- sum(sp_garden_genind@tab[,sp_all_cat[[cat]]][,a] == 2, na.rm=T)	#ho
}
}
############################################################
# Percent of alleles represented in greater than "dup" number of individuals
############################################################
#create data frame to save results
#In this case the results are the percent of alleles present in greater than "dup" number of individuals
#The he and ho stand for individuals in the heterozygous and homozygous states
percent_indiv_results <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
percent_indiv_results_he <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
percent_indiv_results_ho <- matrix(nrow = length(dup_reps),
ncol = length(sp_all_cat))
#This loop goes through the number of "dups" from 1 to 10 (with 1 meaning no "backup")
#Then through the loop of allele categories (5)
#Within that loop it determines if the number of individuals with that allele is greater than "dup",
#then divides the number of alleles meeting that criteria by the total number of alleles
#thus returning the proportion of alleles contained in more than "dup" individuals
#The he and ho stand for individuals in the heterozygous and homozygous states
for(dup in dup_reps){
for(cat in 1:length(sp_all_cat)){
#create data frame to store results
percent_indiv_results[dup+1,cat] <- sum(num_indiv_rep_list[[cat]]>dup)/length(sp_all_cat[[cat]])
percent_indiv_results_he[dup+1,cat] <- sum(num_indiv_rep_list_he[[cat]]>dup)/length(sp_all_cat[[cat]])
percent_indiv_results_ho[dup+1,cat] <- sum(num_indiv_rep_list_ho[[cat]]>dup)/length(sp_all_cat[[cat]])
}
}
#round off
percent_indiv_results <- signif(percent_indiv_results*100,3)
percent_indiv_results_he <- signif(percent_indiv_results_he*100,3)
percent_indiv_results_ho <- signif(percent_indiv_results_ho*100,3)
#label columns and rows
colnames(percent_indiv_results) <- all_cat_list
colnames(percent_indiv_results_he) <- all_cat_list
colnames(percent_indiv_results_ho) <- all_cat_list
rownames(percent_indiv_results) <- paste0(c(1:10), " or more copies")
rownames(percent_indiv_results_he) <- paste0(c(1:10), " or more copies")
rownames(percent_indiv_results_ho) <- paste0(c(1:10), " or more copies")
#save percents as output files
write.csv(percent_indiv_results, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],".csv"))
write.csv(percent_indiv_results_he, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],"_he",".csv"))
write.csv(percent_indiv_results_ho, paste("../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results",outp_filenames[sp],"_ho",".csv"))
}
