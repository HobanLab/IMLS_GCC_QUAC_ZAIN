#create a list of all the botanic gardens for each species
sp_bg_names <- unique(x[,2])
#create data frame to store results
sp_bg_maternal <- matrix(nrow = length(sp_bg_names), ncol = 1)
#code calculate maternal lines by garden
for(garden in 1:length(sp_bg_names)){
#count unique maternal lines for each botanic garden
sp_bg_maternal[garden,1] <- length(unique(sp_garden_accessions[sp_garden_accessions[,2] == paste0(sp_bg_names[[garden]]),]$accession_simple))
}
rownames(sp_bg_maternal) <- sp_bg_names
colnames(sp_bg_maternal) <- "mat_acc"
return(sp_bg_maternal)
}
sort(sp_garden_accessions[,2])
?order()
sp_garden_accessions[sort(sp_garden_accessions[,2])]
sp_garden_accessions[order(sp_garden_accessions$weight),]
sp_garden_accessions[order(sp_garden_accessions$Source_Location),]
head(sp_garden_accessions[order(sp_garden_accessions$Source_Location),])
head(sp_temp_df[order(sp_temp_df[,2]),])
#########################################
#           Relatedness Df Code         #
#########################################
##Function to reduce data frames by half-sibling relatedness
halfsib_relate_df_loiselle <- function(x){
x <- x[order(x[,2]),]
#first need to run the relatedness analysis
relatedness_df <- Demerelate(x[,-3], object = T, value = "loiselle", NA.rm	= TRUE)
#create a population name list for each data frame
pop_names <- unique(x[x[,3] == "Garden",][,2])
#create a matrix
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 2)
#then create a loop to take the name of every population and
#assess the level of relatedness in each pop or botanic garden
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
halfsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.125))
#now clean the front
halfsibs_clean_front <- gsub("^.*\\.","", halfsibs_names)
#clean the back for the list of halfsibs
halfsibs_clean_back <- gsub("^.*\\_","", halfsibs_clean_front)
#create list of halfsibs
halfsib_list <- unique(halfsibs_clean_back)
#create data frame with
relate_pop_df[pop,1] <- length(x[x[,2] == pop_names[[pop]],][,1])
relate_pop_df[pop,2] <- relate_pop_df[pop,1] - length(halfsib_list)
}
rownames(relate_pop_df) <- pop_names
colnames(relate_pop_df) <- c("Tot_Ind", "Half_Sibs")
return(relate_pop_df)
}
#########################################
#           Relatedness Df Code         #
#########################################
accession_count <- function(x){
x <- x[order(x[,2]),]
#add a column with cleaned accession names
sp_garden_accessions <- x %>% mutate(accession_simple = gsub("\\*.*","",x$Accession))
#create a list of all the botanic gardens for each species
sp_bg_names <- unique(x[,2])
#create data frame to store results
sp_bg_maternal <- matrix(nrow = length(sp_bg_names), ncol = 1)
#code calculate maternal lines by garden
for(garden in 1:length(sp_bg_names)){
#count unique maternal lines for each botanic garden
sp_bg_maternal[garden,1] <- length(unique(sp_garden_accessions[sp_garden_accessions[,2] == paste0(sp_bg_names[[garden]]),]$accession_simple))
}
rownames(sp_bg_maternal) <- sp_bg_names
colnames(sp_bg_maternal) <- "mat_acc"
return(sp_bg_maternal)
}
#########################
#   Load Data Files     #
#########################
#set working directory to load in data files
setwd("../../Data_Files")
#load in accession records
sp_accession_list <- list.files(path = "Data_Frames",
pattern = "accession")
sp_df_list <- list.files(path = "Data_Frames", pattern = "clean_df.csv")
#
species_names <- c("QUAC", "ZAIN")
#list of scenarios
scenario_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_garden_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
write.csv(relate_df, paste0("../Analyses/Results/Garden_Wild_Comparison/", scenario_list[[m]], "relate_df.csv"))
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
write.csv(mat_df, paste0("../Analyses/Results/Garden_Wild_Comparison/", species_names[[a]],"mat_df.csv"))
}
}
#load in accession records
sp_accession_list <- list.files(path = "Data_Frames",
pattern = "accession")
sp_df_list <- c("QUAC_woK_allpop_clean_df.csv","ZAIN_rebinned_allpop_clean_df.csv")
rel_mat_df <- cbind(relate_df, mat_df)
head(rel_mat_df )
sp_list <- c("QUAC", "ZAIN")
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_garden_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, paste0("../Analyses/Results/Garden_Wild_Comparison/", sp_list[[m]], rel_mat_df, ".csv"))
}
}
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_garden_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, paste0("../Analyses/Results/Garden_Wild_Comparison/", sp_list[[m]], rel_mat_df, ".csv"))
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_garden_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, paste0("../Analyses/Results/Garden_Wild_Comparison/", sp_list[[m]], "_rel_mat_df.csv"))
}
}
sp_df_list[[1]]
length(sp_df_list)
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_garden_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_garden_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_garden_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
sp_temp_df
unique(sp_temp_df$Garden_Wild)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
head(sp_accessions[,1])
head(sp_garden_accessions[,1])
head(sp_temp_garden_df[,1])
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
sp_accessions
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
sp_temp_accession_df <- sp_accessions[!sp_accessions[,1] %in% sp_temp_garden_df[,1],]
sp_accessions[,1]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
identical(sp_temp_accession_df, sp_temp_garden_df)
View(sp_temp_garden_df)
View(sp_temp_accession_df)
unique(sp_accessions[,1])
length(unique(sp_accessions[,1]))
length(sp_temp_garden_df[,1])
sp_accessions[!sp_accessions[,1] %in% sp_temp_garden_df[,1],]
length(sp_accessions[!sp_accessions[,1] %in% sp_temp_garden_df[,1],][,1])
292-16
View(sp_temp_df)
length(sp_temp_garden_df[,1])
sp_temp_garden_df[!sp_temp_garden_df[,1] %in% sp_accessions[,1],]
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
rel_mat_df
rel_mat_df <- cbind(relate_df, mat_df)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
mat_df
relate_df
#load in accession records
sp_accession_list <- list.files(path = "Data_Frames",
pattern = "accession")
sp_df_list <- c("QUAC_woK_allpop_clean_df.csv","ZAIN_rebinned_allpop_clean_df.csv")
sp_list <- c("QUAC", "ZAIN")
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
#########################################
#           Relatedness Df Code         #
#########################################
accession_count <- function(x){
x <- x[order(x[,2]),]
#add a column with cleaned accession names
sp_garden_accessions <- x %>% mutate(accession_simple = gsub("\\*.*","",x$Accession))
#create a list of all the botanic gardens for each species
sp_bg_names <- unique(x[,2])
#create data frame to store results
sp_bg_maternal <- matrix(nrow = length(sp_bg_names), ncol = 1)
#code calculate maternal lines by garden
for(garden in 1:length(sp_bg_names)){
#count unique maternal lines for each botanic garden
sp_bg_maternal[garden,1] <- length(unique(sp_garden_accessions[sp_garden_accessions[,2] == paste0(sp_bg_names[[garden]]),]$accession_simple))
}
rownames(sp_bg_maternal) <- sp_bg_names
colnames(sp_bg_maternal) <- "mat_acc"
return(sp_bg_maternal)
}
#########################################
#           Relatedness Df Code         #
#########################################
##Function to reduce data frames by half-sibling relatedness
halfsib_relate_df_loiselle <- function(x){
x <- x[order(x[,2]),]
#first need to run the relatedness analysis
relatedness_df <- Demerelate(x[,-3], object = T, value = "loiselle", NA.rm	= TRUE)
#create a population name list for each data frame
pop_names <- unique(x[x[,3] == "Garden",][,2])
#create a matrix
relate_pop_df <- matrix(nrow = length(pop_names), ncol = 2)
#then create a loop to take the name of every population and
#assess the level of relatedness in each pop or botanic garden
for(pop in 1:length(pop_names)){
#next, determine the names of halfsibs
halfsibs_names <- names(which(unlist(relatedness_df$Empirical_Relatedness[pop_names[[pop]]]) > 0.125))
#now clean the front
halfsibs_clean_front <- gsub("^.*\\.","", halfsibs_names)
#clean the back for the list of halfsibs
halfsibs_clean_back <- gsub("^.*\\_","", halfsibs_clean_front)
#create list of halfsibs
halfsib_list <- unique(halfsibs_clean_back)
#create data frame with
relate_pop_df[pop,1] <- length(x[x[,2] == pop_names[[pop]],][,1])
relate_pop_df[pop,2] <- relate_pop_df[pop,1] - length(halfsib_list)
}
rownames(relate_pop_df) <- pop_names
colnames(relate_pop_df) <- c("Tot_Ind", "Half_Sibs")
return(relate_pop_df)
}
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_garden_accessions)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_temp_accession_df)
if(m == 1 & a == 1){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
unique(sp_temp_accession_df[,2])
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
#load in data frame with maternal accession information
sp_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
sp_accessions[,1]
sp_temp_garden_df[,1]
###################################
#     Maternal plant records      #
###################################
#loop over scenarios to calculate the relatedness levels based on half siblings
for(m in 1:length(sp_df_list)){
#loop over maternal accession information
for(a in 1:length(sp_accession_list)){
#load in data frame for relatedness analysis
sp_temp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[m]]))
#load in data frame with maternal accession information
sp_accessions <- read.csv(paste0("Data_Frames/",sp_accession_list[[a]]))
#run relatedness code to generate relatedness data frame
relate_df <- halfsib_relate_df_loiselle(sp_temp_df)
#limit accession data by cleaned data
sp_temp_garden_df <- sp_temp_df[sp_temp_df$Garden_Wild == "Garden",]
if(m == 1 & a == 1){
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_temp_accession_df)
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rel_mat_df.csv")
}
if(m == 2 & a == 2){
sp_temp_accession_df <- sp_accessions[sp_accessions[,1] %in% sp_temp_garden_df[,1],]
#run maternal accession code
mat_df <- accession_count(sp_temp_accession_df)
rel_mat_df <- cbind(relate_df, mat_df)
write.csv(rel_mat_df, "../Analyses/Results/Garden_Wild_Comparison/ZAIN_rel_mat_df.csv")
}
}
}
