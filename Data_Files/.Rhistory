#     Allelic representation code      #
########################################
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#create allele existing df
sp_all_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#create df of wild alleles captured by gardens
sp_wild_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##data frame to record allele capture code
sp_allele_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create allele existing df
sp_all_red_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create df of wild alleles captured by gardens
sp_wild_red_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - data frame to record allele capture code
sp_allele_red_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("CSV_Files/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- sum(sp_wild_genpop@tab[sp_allele_cat[[cat]]] > dup_reps[[dup]])
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_red_exist_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "% (", signif(sp_all_red_exist_df[dup,cat],3), ")")
}
}
}
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist2", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap2", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap2", n_drop_file, "_wo_smallpops.csv"))
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist2", n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap2", n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap2", n_drop_file, ".csv"))
}
}
########################################
#     Allelic representation code      #
########################################
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#create allele existing df
sp_all_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#create df of wild alleles captured by gardens
sp_wild_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##data frame to record allele capture code
sp_allele_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create allele existing df
sp_all_red_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - create df of wild alleles captured by gardens
sp_wild_red_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#without ZAIN small pops - data frame to record allele capture code
sp_allele_red_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(species_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("CSV_Files/", sp_df_list[[sp]]))
##organize genind object
#add individual names to each row of the tab
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
#add pop names to the genind object
levels(sp_genind_temp@pop) <- unique(sp_df_temp$Pop)
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(levels(sp_garden_genind@pop)))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+5]]])
#rename
levels(sp_wild_genind@pop) <- rep("Wild", length(levels(sp_wild_genind@pop)))
#repool genind objects
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(seppop(sp_garden_wild_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_cap <- colSums(seppop(sp_garden_wild_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_exist_df[dup, cat] <- sum(sp_wild_genpop@tab[sp_allele_cat[[cat]]] > dup_reps[[dup]])
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
#add loop to calculate diversity in ZAIN without small pops
if(sp == 3|sp == 4|sp == 5){
#loop to remove small pops from ZAIN and run diversity representation code
for(pop in 1:length(ZAIN_wild_red_list)){
##organize into pop types
#separate into wild genind object
sp_wild_red_genind <- repool(seppop(sp_genind_temp)[ZAIN_wild_red_list[[pop]]])
#rename
levels(sp_wild_red_genind@pop) <- rep("Wild", length(levels(sp_wild_red_genind@pop)))
#repool genind objects
sp_garden_wild_red_genind <- repool(sp_garden_genind, sp_wild_red_genind)
#convert the wild genind object to a genpop object
sp_wild_red_genpop <- genind2genpop(seppop(sp_garden_wild_red_genind)[2]$Wild)
#create documents for comparison
n_ind_W <- nrow(sp_wild_red_genind@tab);  n_ind_G <- nrow(sp_garden_genind@tab);
sp_alleles_red_cap <- colSums(seppop(sp_garden_wild_red_genind)[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_red_cat <- get.allele.cat(sp_wild_red_genpop, 1, 1, n_ind_W, n_drop = ndrop, glob_only = TRUE)
#exterior loop to look at alleles by frequency category
#interior loop to alleles by "duplication" amount - how many copies of each allele
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating alleles that exist by allelic category
sp_all_red_exist_df[dup, cat] <- sum(sp_wild_red_genpop@tab[sp_allele_cat[[cat]]] > dup_reps[[dup]])
#now determine how many wild alleles were captured per category
sp_wild_red_cap_df[dup, cat] <- round(sum(sp_alleles_red_cap[sp_allele_red_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_red_cat[[cat]]),4)
#code to store as one data frame
sp_allele_red_cap[dup, cat] <- paste0(signif((sp_wild_red_cap_df[dup,cat]*100),3), "% (", signif(sp_all_red_exist_df[dup,cat],3), ")")
}
}
}
#without ZAIN small pops - alleles existing
rownames(sp_all_red_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_red_exist_df) <- list_allele_cat
#without ZAIN small pops - representing alleles
rownames(sp_wild_red_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_red_cap_df) <- list_allele_cat
#without ZAIN small pops - comparing wild allele representation ex situ
rownames(sp_allele_red_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_red_cap) <- list_allele_cat
write.csv(sp_all_red_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist2", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_wild_red_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap2", n_drop_file, "_wo_smallpops.csv"))
write.csv(sp_allele_red_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap2", n_drop_file, "_wo_smallpops.csv"))
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_exist2", n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_wildcap2", n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",species_list[[sp]], "_all_cap2", n_drop_file, ".csv"))
}
}
num_rep_list <- list(list(), list(), list(), list(), list())
num_rep_list_he <- list(list(), list(), list(), list(), list())
num_rep_list_ho <- list(list(), list(), list(), list(), list())
###################################
#     Trying with Sean's Code     #
###################################
#create garden genind
num_garden_ind<-sum(table(QUAC_woK_genind@pop)[1:17])
library(adegenet)
library(sjmisc)
###########################
#     Load Data Files     #
###########################
setwd("../../Data_Files")
#first try code on JUST QUAC without Kessler
QUAC_woK_genind <- read.genepop("Adegenet_Files/QUAC_woK_allpop_clean.gen",
ncode = 3)
#load in fa sample functions
source("../Analyses/Functions/Fa_sample_funcs.R")
#allele categories list
all_cat_list <-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare")
#list of duplicate reps
dup_reps <- c(0:9)
QUAC_garden_genind
#################################################################
#     Calculate Individual Numbers That Contain Each Allele     #
#################################################################
##convert to garden/wild genind object
QUAC_garden_genind <- repool(seppop(QUAC_woK_genind)[1:17])
#rename pops
levels(QUAC_garden_genind@pop) <- rep("Garden",17)
#create wild genind object
QUAC_wild_genind <- repool(seppop(QUAC_woK_genind)[18:21])
#rename pops
levels(QUAC_wild_genind@pop) <- rep("Wild",4)
#recombine into garden/wild genind object
QUAC_garden_wild_genind <- repool(QUAC_garden_genind, QUAC_wild_genind)
#convert to the wild genpop object
QUAC_wild_genpop <- genind2genpop(seppop(QUAC_garden_wild_genind)[[2]])
#calculate how alleles are represented ex situ
QUAC_all_rep <- colSums(seppop(QUAC_garden_wild_genind)[[1]]@tab,na.rm=T)
#calculate the allele categories in the wild populations
QUAC_all_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)
#remove regional alleles
QUAC_all_cat <- QUAC_all_cat[1:5]
###################################
#     Trying with Sean's Code     #
###################################
#create garden genind
num_garden_ind<-sum(table(QUAC_woK_genind@pop)[1:17])
QUAC_garden_genind <- QUAC_woK_genind[1:num_garden_ind,]
#rename pops
levels(QUAC_garden_genind@pop) <- rep("Garden",17)
#create wild genind object
num_wild_ind <- sum(table(QUAC_woK_genind@pop)[18:21])
QUAC_wild_genind <- QUAC_woK_genind[(num_garden_ind+1):(num_garden_ind+num_wild_ind),]
#rename pops
levels(QUAC_wild_genind@pop) <- rep("Wild",4)
#convert to the wild genpop object
QUAC_wild_genpop <- genind2genpop(seppop(QUAC_wild_genind)[[2]])
QUAC_wild_genpop
QUAC_wild_genind
QUAC_wild_genind@pop
###################################
#     Trying with Sean's Code     #
###################################
#create garden genind
num_garden_ind<-sum(table(QUAC_woK_genind@pop)[1:17])
QUAC_garden_genind <- QUAC_woK_genind[1:num_garden_ind,]
#rename pops
levels(QUAC_garden_genind@pop) <- rep("Garden",17)
#create wild genind object
num_wild_ind <- sum(table(QUAC_woK_genind@pop)[18:21])
QUAC_wild_genind <- QUAC_woK_genind[(num_garden_ind+1):(num_garden_ind+num_wild_ind),]
table(QUAC_wild_genind@pop)
#rename pops
levels(QUAC_wild_genind@pop) <- rep("Wild",4)
#convert to the wild genpop object
QUAC_wild_genpop <- genind2genpop(QUAC_wild_genind)
QUAC_wild_genpop
#calculate how alleles are represented ex situ
QUAC_all_rep <- colSums(QUAC_garden_genind@tab,na.rm=T)
#calculate the allele categories in the wild populations
QUAC_all_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)
#remove regional alleles
QUAC_all_cat <- QUAC_all_cat[1:5]
num_rep_list <- list(list(), list(), list(), list(), list())
num_rep_list <- list(list(), list(), list(), list(), list())
num_rep_list_he <- list(list(), list(), list(), list(), list())
num_rep_list_ho <- list(list(), list(), list(), list(), list())
for(cat in 1:length(QUAC_all_cat)){
num_alleles_in_cat <- length(QUAC_all_cat[[cat]])
for (a in 1:num_alleles_in_cat){
num_rep_list[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] > 0, na.rm=T)
num_rep_list_he[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 1, na.rm=T)
num_rep_list_ho[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 2, na.rm=T)
}
}
for(dup in dup_reps){
for(cat in 1:length(QUAC_all_cat)){
#create data frame to store results
QUAC_rep_df[dup+1,cat] <- sum(num_rep_list[[cat]]>dup)/length(QUAC_all_cat[[cat]])
QUAC_rep_df_he[dup+1,cat] <- sum(num_rep_list_he[[cat]]>dup)/length(QUAC_all_cat[[cat]])
QUAC_rep_df_ho[dup+1,cat] <- sum(num_rep_list_ho[[cat]]>dup)/length(QUAC_all_cat[[cat]])
}
}
#create data frame to save results
QUAC_rep_df <- matrix(nrow = length(dup_reps),
ncol = length(QUAC_all_cat))
QUAC_rep_df_he <- matrix(nrow = length(dup_reps),
ncol = length(QUAC_all_cat))
QUAC_rep_df_ho <- matrix(nrow = length(dup_reps),
ncol = length(QUAC_all_cat))
for(dup in dup_reps){
for(cat in 1:length(QUAC_all_cat)){
#create data frame to store results
QUAC_rep_df[dup+1,cat] <- sum(num_rep_list[[cat]]>dup)/length(QUAC_all_cat[[cat]])
QUAC_rep_df_he[dup+1,cat] <- sum(num_rep_list_he[[cat]]>dup)/length(QUAC_all_cat[[cat]])
QUAC_rep_df_ho[dup+1,cat] <- sum(num_rep_list_ho[[cat]]>dup)/length(QUAC_all_cat[[cat]])
}
}
QUAC_rep_df_he
QUAC_rep_df
QUAC_rep_df_ho
QUAC_rep_df <- signif(QUAC_rep_df*100,3)
colnames(QUAC_rep_df) <- all_cat_list
rownames(QUAC_rep_df) <- paste0(c(1:10), " or more copies")
write.csv(QUAC_rep_df, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rep_df.csv")
#write out homo matrix
QUAC_rep_df_he <- signif(QUAC_rep_df_he*100,3)
#write out homo matrix
QUAC_rep_df_he <- signif(QUAC_rep_df_he*100,3)
colnames(QUAC_rep_df_he) <- all_cat_list
rownames(QUAC_rep_df_he) <- paste0(c(1:10), " or more copies")
write.csv(QUAC_rep_df_he, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rep_he_df.csv")
#write out homo matrix
QUAC_rep_df_ho <- signif(QUAC_rep_df_ho*100,3)
colnames(QUAC_rep_df_ho) <- all_cat_list
rownames(QUAC_rep_df_ho) <- paste0(c(1:10), " or more copies")
write.csv(QUAC_rep_df_ho, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rep_ho_df.csv")
for(dup in dup_reps){
for(cat in 1:length(QUAC_all_cat)){
#create data frame to store results
QUAC_rep_df[dup+1,cat] <- sum(num_rep_list[[cat]]>dup)/length(QUAC_all_cat[[cat]])
QUAC_rep_df_he[dup+1,cat] <- sum(num_rep_list_he[[cat]]>dup)/length(QUAC_all_cat[[cat]])
QUAC_rep_df_ho[dup+1,cat] <- sum(num_rep_list_ho[[cat]]>dup)/length(QUAC_all_cat[[cat]])
}
}
QUAC_rep_df_he
#write out het matrix
QUAC_rep_df_he <- signif(QUAC_rep_df_he*100,3)
colnames(QUAC_rep_df_he) <- all_cat_list
rownames(QUAC_rep_df_he) <- paste0(c(1:10), " or more copies")
write.csv(QUAC_rep_df_he, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rep_he_df.csv")
#write out homo matrix
QUAC_rep_df_ho <- signif(QUAC_rep_df_ho*100,3)
colnames(QUAC_rep_df_ho) <- all_cat_list
rownames(QUAC_rep_df_ho) <- paste0(c(1:10), " or more copies")
write.csv(QUAC_rep_df_ho, "../Analyses/Results/Garden_Wild_Comparison/QUAC_rep_ho_df.csv")
####ZAIN
#load in ZAIN data file
ZAIN_genind <- read.genepop("Adegenet_Files/ZAIN_rebinned_allpop_clean.gen",
ncode = 3)
#create garden genind
ZAIN_garden_ind <- sum(table(ZAIN_genind@pop)[1:10])
ZAIN_garden_genind <- ZAIN_genind[1:ZAIN_garden_ind,]
#create wild genind object
ZAIN_wild_ind <- sum(table(ZAIN_genind@pop)[c(11:19, 23:26, 28:32, 34:35)])
ZAIN_wild_genind <- ZAIN_genind[(ZAIN_garden_ind+1):(ZAIN_garden_ind+ZAIN_wild_ind),]
#convert to the wild genpop object
ZAIN_wild_genpop <- genind2genpop(ZAIN_wild_genind)
#calculate how alleles are represented ex situ
ZAIN_all_rep <- colSums(ZAIN_garden_genind@tab,na.rm=T)
#calculate the allele categories in the wild populations
ZAIN_all_cat <- get.allele.cat(ZAIN_wild_genpop, 1, 1, ZAIN_wild_ind, n_drop = 0, glob_only = TRUE)
#remove regional alleles
ZAIN_all_cat <- ZAIN_all_cat[1:5]
##create a list to store the individual numbers
#list
ZAIN_num_rep_list <- list(list(), list(), list(), list(), list())
##create a list to store the individual numbers
#list
ZAIN_num_rep_list <- list(list(), list(), list(), list(), list())
ZAIN_num_rep_list_he <- list(list(), list(), list(), list(), list())
ZAIN_num_rep_list_ho <- list(list(), list(), list(), list(), list())
#create garden genind
ZAIN_garden_ind <- sum(table(ZAIN_genind@pop)[1:10])
ZAIN_garden_genind <- ZAIN_genind[1:ZAIN_garden_ind,]
#create wild genind object
ZAIN_wild_ind <- sum(table(ZAIN_genind@pop)[c(11:19, 23:26, 28:32, 34:35)])
ZAIN_wild_genind <- ZAIN_genind[(ZAIN_garden_ind+1):(ZAIN_garden_ind+ZAIN_wild_ind),]
#convert to the wild genpop object
ZAIN_wild_genpop <- genind2genpop(ZAIN_wild_genind)
#calculate how alleles are represented ex situ
ZAIN_all_rep <- colSums(ZAIN_garden_genind@tab,na.rm=T)
#calculate the allele categories in the wild populations
ZAIN_all_cat <- get.allele.cat(ZAIN_wild_genpop, 1, 1, ZAIN_wild_ind, n_drop = 0, glob_only = TRUE)
#remove regional alleles
ZAIN_all_cat <- ZAIN_all_cat[1:5]
##create a list to store the individual numbers
#list
ZAIN_num_rep_list <- list(list(), list(), list(), list(), list())
ZAIN_num_rep_list_he <- list(list(), list(), list(), list(), list())
ZAIN_num_rep_list_ho <- list(list(), list(), list(), list(), list())
for(cat in 1:length(ZAIN_all_cat)){
ZAIN_num_alleles_in_cat <- length(ZAIN_all_cat[[cat]])
for (a in 1:ZAIN_num_alleles_in_cat){
ZAIN_num_rep_list[[cat]][a] <- sum(ZAIN_garden_genind@tab[,ZAIN_all_cat[[cat]]][,a] > 0, na.rm=T)
ZAIN_num_rep_list_he[[cat]][a] <- sum(ZAIN_garden_genind@tab[,ZAIN_all_cat[[cat]]][,a] == 1, na.rm=T)
ZAIN_num_rep_list_ho[[cat]][a] <- sum(ZAIN_garden_genind@tab[,ZAIN_all_cat[[cat]]][,a] == 2, na.rm=T)
}
}
#create data frame to save results
ZAIN_rep_df <- matrix(nrow = length(dup_reps),
ncol = length(ZAIN_all_cat))
ZAIN_rep_df_he <- matrix(nrow = length(dup_reps),
ncol = length(ZAIN_all_cat))
ZAIN_rep_df_ho <- matrix(nrow = length(dup_reps),
ncol = length(ZAIN_all_cat))
length(QUAC_all_cat[[1]])
length(QUAC_all_cat[[2]])
length(QUAC_all_cat[[3]])
QUAC_wild_genpop@tab[QUAC_all_rep[[1]]]
QUAC_wild_genpop@tab[QUAC_all_cat[[1]]]
length(QUAC_wild_genpop@tab[QUAC_all_cat[[1]]] > 0)
length(QUAC_wild_genpop@tab[QUAC_all_cat[[5]]] > 0)
length(QUAC_wild_genpop@tab[QUAC_all_cat[[5]]] > 10)
sum(QUAC_wild_genpop@tab[QUAC_all_cat[[5]]] > 10)
QUAC_wild_genpop@tab[QUAC_all_cat[[5]]]
length(QUAC_wild_genpop@tab[QUAC_all_cat[[5]]] > 10)
length(QUAC_wild_genpop@tab[QUAC_all_cat[[5]]] > 1)
QUAC_wild_genpop@tab[QUAC_all_cat[[5]]]
QUAC_wild_genind@tab[QUAC_all_cat[[5]]]
QUAC_all_cat[[5]]
QUAC_wild_genind@tab
QUAC_wild_genpop@tab
QUAC_wild_genpop@tab[QUAC_all_cat[[1]]]
sum(QUAC_wild_genpop@tab[QUAC_all_cat[[1]]] > 10)
sum(QUAC_wild_genpop@tab[QUAC_all_cat[[5]]] > 10)
QUAC_wild_genpop@tab[QUAC_all_cat[[5]]]
QUAC_all_cat[[5]]
length(sp_allele_cat[[5]])
length(QUAC_all_cat[[5]])
length(QUAC_all_cat[[5]] > 0 )
length(QUAC_all_cat[[5]] > 10)
length(QUAC_all_cat[[5]])
QUAC_wild_genpop@tab[QUAC_all_cat[[5]]]
quantile(c(1:10))
quantile(c(1:10), 0.95)
