library(adegenet)
library(poppr)
library(hierfstat)
library(PopGenReport)
library(pegas)
library(diveRsity)
library(parallel)
library(doParallel)
#########################
#   Load Data Files     #
#########################
#set working directory to load in data files
setwd("../../Data_Files")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "CSV_Files/", pattern = "_clean_df.csv")
#list out all the final scenarios for analyzing
scenario_list <- c("QUAC_wK", "QUAC_woK",
"ZAIN_og_allpops", "ZAIN_rebinned_allpops", "ZAIN_sample")
#list out wild populations
wild_pop_list <- list(c(18:22), c(18:21), c(11:25), c(11:25), c(11:25))
############################################################
#  Null Alleles, HWE Deviation, Linkage Disequilibrium     #
############################################################
#genind list
sp_genind_ls <- list()
sp_genind_wild_ls <- list()
#run HWE deviation, linkage disequilibrium, and null alleles for wild pops
for(sp in 1:length(scenario_list)){
#load genepop files as genind objects
sp_genind_ls[[sp]] <- read.genepop(paste0("Adegenet_Files/", sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("CSV_Files/", sp_df_list[[sp]]))
#organize genind object
levels(sp_genind_ls[[sp]]@pop) <- unique(sp_df_temp[,2])
#limit checks to wild only populations
sp_genind_wild_ls[[sp]] <- repool(seppop(sp_genind_ls[[sp]])[wild_pop_list[[sp]]])
##HWE devitations
#run HWE deviations by pop
sp_HWE_pop <- seppop(sp_genind_wild_ls[[sp]]) %>% lapply(hw.test, B = 1000)
#create df by pop for HWE devitations
sp_HWE_pop_df <- sapply(sp_HWE_pop, "[", i = TRUE, j = 3)
#round to the 3rd digit
sp_HWE_wild_df <- signif(sp_HWE_pop_df, 3)
#write out HWE deviation data files
write.csv(sp_HWE_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]],
"_HWE_dev_wild.csv"))
#calculate % of null alleles/locus
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#run null allele calculations over all genind objects
sp_null_all <- parLapply(cl, sp_genind_wild_ls, null.all)
#create null allele frequency summary data frame
sp_null_all_wild_df <- signif(data.frame(sp_null_all[[sp]]$null.allele.freq$summary2),3)
#stop clustering
stopCluster(cl)
#write out to CSV
write.csv(sp_null_all_wild_df, paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]] ,
"_null_all_wild_df.csv"))
##calculate linkage disequilibrium
#use parallelization because this step takes quite a while without
#Calculate the number of cores
cores <- detectCores() - 1
#Initiate cluster
cl <- makeCluster(cores)
#calculate linkage disequilbrium
sp_ld <- parLapply(cl, sp_genind_wild_ls, pair.ia, sample = 1000)
#convert to a data frame
sp_ld_wild_df <- data.frame(round(sp_ld[[sp]], digits = 2))
#write out
write.csv(sp_ld_wild_df, paste0("../Analyses/Results/Sum_Stats/",
scenario_list[[sp]], "_LD_wild_df.csv"))
#stop clustering
stopCluster(cl)
}
