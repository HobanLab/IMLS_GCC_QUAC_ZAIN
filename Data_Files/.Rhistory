#######################
#     Load files      #
#######################
##set working directory to load in data files
setwd("../../Data_Files")
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#################################
#     Allelic capture code      #
#################################
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#create allele existing df
sp_all_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#create df of wild alleles captured by gardens
sp_wild_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##data frame to record allele capture code
sp_allele_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(scenarios_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
#seppop genind - we only want to use the wild pops to calculate the alleles existing for capture
sp_seppop <- seppop(sp_genind_temp)
#calculate number of individuals per pop
n_ind_p_pop <- as.numeric(table(sp_seppop[[2]]@pop))
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(sp_seppop[[2]])
#create documents for comparison
n_ind_W<-table(sp_genind_temp@pop)[2];  n_ind_G<-table(sp_genind_temp@pop)[1];
sp_alleles_cap <- colSums(sp_seppop[[1]]@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, as.numeric(n_ind_p_pop), n_drop = ndrop, glob_only = TRUE)
#create a data frame with all of the alleles existing by category
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
}
}
#list out the scenarios
scenarios_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files", pattern = "_clean.gen")
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files",sp_genind_list[[1]]), ncode = 3)
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
library(tidyr)
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files",sp_genind_list[[1]]), ncode = 3)
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[1]]), ncode = 3)
table(sp_genind_temp@pop)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[1]]))
#df files
sp_df_list <- list.files(path = "Data_Frames", pattern = "_clean_df.csv")
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[1]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
length(unique(sp_df_temp$Pop))
length(table(sp_genind_temp@pop))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,3])
unique(sp_df_temp[,3])
levels(sp_genind_temp@pop) <- unique(sp_df_temp[,2])
pop_list
#pop list
pop_list <- list(c(1:17), c(1:17), c(1:10), c(1:10),
c(18:22), c(18:21), c(11:35), c(11:35))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[1]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(pop_list[[1]]))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[1+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[1+4]]))
table(sp_wild_genind@pop)
as.numeric(table(sp_wild_genind@pop))
genind2genpop(sp_wild_genind[[2]])
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(sp_wild_genind)
sp_wild_genpop
#create documents for comparison
n_ind_W <- table(sp_genind_temp@pop)[2];  n_ind_G<-table(sp_genind_temp@pop)[1];
n_ind_W
n_ind_G
#create documents for comparison
n_ind_W <- table(sp_garden_genind@pop)[2];  n_ind_G<-table(sp_garden_genind@pop)[1];
n_ind_W
table(sp_garden_genind@pop)
#repool garden and wild individuals
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
n_ind_W <- table(sp_garden_wild_genind@pop)[2]
n_ind_W
n_ind_G<-table(sp_garden_genind@pop)[1]
n_ind_G
colSums(sp_garden_wild_genind[[1]]@tab,na.rm=T)
seppop(sp_garden_wild_genind)[1]
sp_alleles_cap <- colSums(sp_garden_genind@tab,na.rm=T)
sp_alleles_cap
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(scenarios_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(pop_list[[sp]]))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[sp+4]]))
#repool garden and wild individuals
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#calculate number of individuals per pop
n_ind_p_pop <- as.numeric(table(sp_wild_genind@pop))
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(sp_wild_genind)
#create documents for comparison
n_ind_W <- table(sp_garden_wild_genind@pop)[2];  n_ind_G<-table(sp_garden_genind@pop)[1];
sp_alleles_cap <- colSums(sp_garden_genind@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, as.numeric(n_ind_p_pop), n_drop = ndrop, glob_only = TRUE)
#create a data frame with all of the alleles existing by category
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
}
}
#load in function to calculate allele frequency categories
source("../Analyses/Functions/Fa_sample_funcs.R")
#create functions to run code
colMax <- function(data) sapply(data, max, na.rm = TRUE)
#################################
#     Allelic capture code      #
#################################
#list out allele categories
list_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
##create table for % alleles captured by frequency and how many duplicates were present
#create list with duplicates
dup_reps <- c(0:9)
#create a table to store % alleles captured by gardens pops where no alleles are dropped
sp_allele_cap_table_ndrop0 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create a table to store % alleles captured by garden pops where alleles are dropped if there are fewer than 2
sp_allele_cap_table_ndrop2 <- matrix(nrow = length(dup_reps), ncol = length(list_allele_cat))
#create arrays and lists to store results
sp_allele_cat <- list()
#create allele existing df
sp_all_exist_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
#create df of wild alleles captured by gardens
sp_wild_cap_df <- matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##data frame to record allele capture code
sp_allele_cap <-matrix(nrow = (length(dup_reps)), ncol = length(list_allele_cat))
##run loop to generate allelic capture table
#the outer loop is calculating how many copies of each allele in each category exists
#the inner loop is calculating the percent capture of each allele in each frequency category
for(sp in 1:length(scenarios_list)){  #loop over every scenario
for(ndrop in c(0,2)){     #loop to include very rare or not
#ndrop or not
if(ndrop == 0) n_drop_file <- "_ndrop0"
if(ndrop == 2) n_drop_file <- "_ndrop2"
#load genepop files as genind objects
sp_genind_temp <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#load data frames
sp_df_temp <- read.csv(paste0("Data_Frames/", sp_df_list[[sp]]))
#organize genind object
rownames(sp_genind_temp@tab) <- sp_df_temp[,1]
##organize into pops - garden
#separate into garden genind object
sp_garden_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp]]])
#rename pops to be garden only
levels(sp_garden_genind@pop) <- rep("Garden", length(pop_list[[sp]]))
##organize into pop types
#separate into wild genind object
sp_wild_genind <- repool(seppop(sp_genind_temp)[pop_list[[sp+4]]])
#rename to wild only
levels(sp_wild_genind@pop) <- rep("Wild", length(pop_list[[sp+4]]))
#repool garden and wild individuals
sp_garden_wild_genind <- repool(sp_garden_genind, sp_wild_genind)
#calculate number of individuals per pop
n_ind_p_pop <- as.numeric(table(sp_wild_genind@pop))
#convert the wild genind object to a genpop object
sp_wild_genpop <- genind2genpop(sp_wild_genind)
#create documents for comparison
n_ind_W <- table(sp_garden_wild_genind@pop)[2];  n_ind_G<-table(sp_garden_genind@pop)[1];
sp_alleles_cap <- colSums(sp_garden_genind@tab,na.rm=T)
#first calculate the frequency categories of alleles in the wild individuals
sp_allele_cat <- get.allele.cat(sp_wild_genpop, 1, 1, as.numeric(n_ind_p_pop), n_drop = ndrop, glob_only = TRUE)
#create a data frame with all of the alleles existing by category
for(cat in 1:length(list_allele_cat)){
for(dup in 1:length(dup_reps)){
#calculating
sp_all_exist_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]]))
#now determine how many wild alleles were captured per category
sp_wild_cap_df[dup, cat] <- round(sum(sp_alleles_cap[sp_allele_cat[[cat]]] > dup_reps[[dup]])/length(sp_allele_cat[[cat]]),4)
#code to store as one data frame
sp_allele_cap[dup, cat] <- paste0(signif((sp_wild_cap_df[dup,cat]*100),3), "% (", signif(sp_all_exist_df[dup,cat],3), ")")
}
}
##format tables
#alleles existing
rownames(sp_all_exist_df) <- paste0(c(1:10), " or more copies")
colnames(sp_all_exist_df) <- list_allele_cat
#percent capture of allele types by gardens
rownames(sp_wild_cap_df) <- paste0(c(1:10), " or more copies")
colnames(sp_wild_cap_df) <- list_allele_cat
#comparison of percent of wild alleles captured in garden
rownames(sp_allele_cap) <- paste0(c(1:10), " or more copies")
colnames(sp_allele_cap) <- list_allele_cat
##write out data frames
write.csv(sp_all_exist_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_wild_cap_df, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
write.csv(sp_allele_cap, paste0("../Analyses/Results/Garden_Wild_Comparison/",scenarios_list[[sp]], n_drop_file, ".csv"))
}
}
