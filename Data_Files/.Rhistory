sp_pop_names <- unique(sp_df[,2])
#name populations
levels(sp_genind@pop) <- sp_pop_names
#limit data frame object to wild individuals
sp_wild_df <- sp_df[sp_df[,3] == "Wild",]
#wild population name list
sp_wild_pop_names <- unique(sp_wild_df[,2])
#limit genind object to wild individuals
sp_wild_genind <- sp_genind[rownames(sp_genind@tab) %in% sp_wild_df[,1],]
#run hierfstat on
sp_hierfstat <- genind2hierfstat(sp_wild_genind)
#run pairwise Fst code
sp_pwfst_df <- pairwise.neifst(sp_hierfstat)
##Geographic analyses for each population
#calculate mean longitude and latitude for each population
sp_mean_lon <- matrix()
sp_mean_lat <- matrix()
#loops for mean lat/lon
for(pop in sp_wild_pop_names){
sp_mean_lon[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,4])
}
#loop to calculate the mean lat by population
for(pop in sp_wild_pop_names){
sp_mean_lat[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,5])
}
#now combine into dataframes
sp_coord_df <- cbind(sp_mean_lon, sp_mean_lat)[-1,]
#create geographic distance matrix
sp_dist_df <- matrix(nrow = length(sp_wild_pop_names), ncol = length(sp_wild_pop_names))
for(r1 in 1:length(sp_wild_pop_names)){
for(r2 in 1:length(sp_wild_pop_names)){
sp_dist_df[r1,r2] <-  distm(sp_coord_df[r1,], sp_coord_df[r2,], fun = distGeo)/1000
}
}
#linear regression between fst and distance
reg <- as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df)
#saving summary statistics - R2 and p-value
sp_IBD_df[scenario_list,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[scenario_list,2] <- summary(reg)$coefficients[2,4]
}
#linear regression between fst and distance
reg <- as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df)
#saving summary statistics - R2 and p-value
sp_IBD_df[scenario_list,1] <- as.numeric(summary(reg)[9])
as.numeric(summary(reg)[9])
reg
reg <- as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df)
reg
sp_pwfst_df
sp_dist_df
#linear regression between fst and distance
reg <- lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
reg
as.numeric(sp_pwfst_df)
as.numeric(sp_dist_df)
sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
#loop to calculate the relationship between pairwise Fst and distance between
#wild populations
for(sp in 1:length(scenario_list)){
#read in genepop file as a genind object
sp_genind <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#read in data frame
sp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[sp]]))
#name rows as individuals
rownames(sp_genind@tab) <- sp_df[,1]
#create population data frames
sp_pop_names <- unique(sp_df[,2])
#name populations
levels(sp_genind@pop) <- sp_pop_names
#limit data frame object to wild individuals
sp_wild_df <- sp_df[sp_df[,3] == "Wild",]
#wild population name list
sp_wild_pop_names <- unique(sp_wild_df[,2])
#limit genind object to wild individuals
sp_wild_genind <- sp_genind[rownames(sp_genind@tab) %in% sp_wild_df[,1],]
#run hierfstat on
sp_hierfstat <- genind2hierfstat(sp_wild_genind)
#run pairwise Fst code
sp_pwfst_df <- pairwise.neifst(sp_hierfstat)
##Geographic analyses for each population
#calculate mean longitude and latitude for each population
sp_mean_lon <- matrix()
sp_mean_lat <- matrix()
#loops for mean lat/lon
for(pop in sp_wild_pop_names){
sp_mean_lon[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,4])
}
#loop to calculate the mean lat by population
for(pop in sp_wild_pop_names){
sp_mean_lat[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,5])
}
#now combine into dataframes
sp_coord_df <- cbind(sp_mean_lon, sp_mean_lat)[-1,]
#create geographic distance matrix
sp_dist_df <- matrix(nrow = length(sp_wild_pop_names), ncol = length(sp_wild_pop_names))
for(r1 in 1:length(sp_wild_pop_names)){
for(r2 in 1:length(sp_wild_pop_names)){
sp_dist_df[r1,r2] <-  distm(sp_coord_df[r1,], sp_coord_df[r2,], fun = distGeo)/1000
}
}
sp_pwfst_df <- sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
#linear regression between fst and distance
reg <- lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
#saving summary statistics - R2 and p-value
sp_IBD_df[scenario_list,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[scenario_list,2] <- summary(reg)$coefficients[2,4]
}
sp_pwfst_df <- sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
sp_pwfst_df
#loop to calculate the relationship between pairwise Fst and distance between
#wild populations
for(sp in 1:length(scenario_list)){
#read in genepop file as a genind object
sp_genind <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#read in data frame
sp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[sp]]))
#name rows as individuals
rownames(sp_genind@tab) <- sp_df[,1]
#create population data frames
sp_pop_names <- unique(sp_df[,2])
#name populations
levels(sp_genind@pop) <- sp_pop_names
#limit data frame object to wild individuals
sp_wild_df <- sp_df[sp_df[,3] == "Wild",]
#wild population name list
sp_wild_pop_names <- unique(sp_wild_df[,2])
#limit genind object to wild individuals
sp_wild_genind <- sp_genind[rownames(sp_genind@tab) %in% sp_wild_df[,1],]
#run hierfstat on
sp_hierfstat <- genind2hierfstat(sp_wild_genind)
#run pairwise Fst code
sp_pwfst_df <- pairwise.neifst(sp_hierfstat)
##Geographic analyses for each population
#calculate mean longitude and latitude for each population
sp_mean_lon <- matrix()
sp_mean_lat <- matrix()
#loops for mean lat/lon
for(pop in sp_wild_pop_names){
sp_mean_lon[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,4])
}
#loop to calculate the mean lat by population
for(pop in sp_wild_pop_names){
sp_mean_lat[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,5])
}
#now combine into dataframes
sp_coord_df <- cbind(sp_mean_lon, sp_mean_lat)[-1,]
#create geographic distance matrix
sp_dist_df <- matrix(nrow = length(sp_wild_pop_names), ncol = length(sp_wild_pop_names))
for(r1 in 1:length(sp_wild_pop_names)){
for(r2 in 1:length(sp_wild_pop_names)){
sp_dist_df[r1,r2] <-  distm(sp_coord_df[r1,], sp_coord_df[r2,], fun = distGeo)/1000
}
}
sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
#linear regression between fst and distance
reg <- lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
#saving summary statistics - R2 and p-value
sp_IBD_df[scenario_list,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[scenario_list,2] <- summary(reg)$coefficients[2,4]
}
sp_pwfst_df
sp_dist_df
lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
lm(sp_pwfst_df~sp_dist_df)
summary(lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df)))
#linear regression between fst and distance
reg <- lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
#saving summary statistics - R2 and p-value
sp_IBD_df[scenario_list,1] <- as.numeric(summary(reg)[9])
as.numeric(summary(reg)[9])
summary(reg)$coefficients[2,4]
sp_IBD_df
as.numeric(summary(reg)[9])
summary(reg)$coefficients[2,4]
#saving summary statistics - R2 and p-value
sp_IBD_df[,1] <- as.numeric(summary(reg)[9])
sp_IBD_df
sp_IBD_df
sp_IBD_df[,2] <- summary(reg)$coefficients[2,4]
sp_IBD_df
#loop to calculate the relationship between pairwise Fst and distance between
#wild populations
for(sp in 1:length(scenario_list)){
#read in genepop file as a genind object
sp_genind <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#read in data frame
sp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[sp]]))
#name rows as individuals
rownames(sp_genind@tab) <- sp_df[,1]
#create population data frames
sp_pop_names <- unique(sp_df[,2])
#name populations
levels(sp_genind@pop) <- sp_pop_names
#limit data frame object to wild individuals
sp_wild_df <- sp_df[sp_df[,3] == "Wild",]
#wild population name list
sp_wild_pop_names <- unique(sp_wild_df[,2])
#limit genind object to wild individuals
sp_wild_genind <- sp_genind[rownames(sp_genind@tab) %in% sp_wild_df[,1],]
#run hierfstat on
sp_hierfstat <- genind2hierfstat(sp_wild_genind)
#run pairwise Fst code
sp_pwfst_df <- pairwise.neifst(sp_hierfstat)
##Geographic analyses for each population
#calculate mean longitude and latitude for each population
sp_mean_lon <- matrix()
sp_mean_lat <- matrix()
#loops for mean lat/lon
for(pop in sp_wild_pop_names){
sp_mean_lon[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,4])
}
#loop to calculate the mean lat by population
for(pop in sp_wild_pop_names){
sp_mean_lat[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,5])
}
#now combine into dataframes
sp_coord_df <- cbind(sp_mean_lon, sp_mean_lat)[-1,]
#create geographic distance matrix
sp_dist_df <- matrix(nrow = length(sp_wild_pop_names), ncol = length(sp_wild_pop_names))
for(r1 in 1:length(sp_wild_pop_names)){
for(r2 in 1:length(sp_wild_pop_names)){
sp_dist_df[r1,r2] <-  distm(sp_coord_df[r1,], sp_coord_df[r2,], fun = distGeo)/1000
}
}
sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
#linear regression between fst and distance
reg <- lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
#saving summary statistics - R2 and p-value
sp_IBD_df[sp,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[sp,2] <- summary(reg)$coefficients[2,4]
}
sp_IBD_df
scenario_list[[1]]
plot(sp_pwfst_df~sp_dist_df)
plot(sp_pwfst_df~sp_dist_df, pch = 17)
plot(sp_pwfst_df~sp_dist_df, pch = 10)
plot(sp_pwfst_df~sp_dist_df, pch = 16)
abline(reg)
plot(sp_pwfst_df~sp_dist_df, pch = 16, xlim = c(0, max(sp_dist_df)))
max(sp_dist_df)
plot(sp_pwfst_df~sp_dist_df, pch = 16, xlim = c(0, max(sp_dist_df)), ylim = c(0,1))
abline(reg)
plot(sp_pwfst_df~sp_dist_df, pch = 16, xlim = c(0, max(sp_dist_df)), ylim = c(0,1),
xlab = "Distance (km)", ylab = "PW Fst")
abline(reg)
legend('topleft', legend = rp_IBD, bty = 'n')
rp_IBD <- vector('expression',2)
rp_IBD[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(sp_IBD_df[sp,1],dig=3)))[2]
rp_IBD[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(sp_IBD_df[sp,2], digits = 2)))[2]
legend('topleft', legend = rp_IBD, bty = 'n')
rownames(sp_IBD_df) <- scenario_list
colnames(sp_IBD_df) <- c("R2", "p-value")
sp_IBD_df
#############################
#     Fst Calculations      #
#############################
#data frame for the relationship
sp_IBD_df <- matrix(nrow = length(scenario_list), ncol = 2)
#loop to calculate the relationship between pairwise Fst and distance between
#wild populations
for(sp in 1:length(scenario_list)){
#read in genepop file as a genind object
sp_genind <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#read in data frame
sp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[sp]]))
#name rows as individuals
rownames(sp_genind@tab) <- sp_df[,1]
#create population data frames
sp_pop_names <- unique(sp_df[,2])
#name populations
levels(sp_genind@pop) <- sp_pop_names
#limit data frame object to wild individuals
sp_wild_df <- sp_df[sp_df[,3] == "Wild",]
#wild population name list
sp_wild_pop_names <- unique(sp_wild_df[,2])
#limit genind object to wild individuals
sp_wild_genind <- sp_genind[rownames(sp_genind@tab) %in% sp_wild_df[,1],]
#run hierfstat on
sp_hierfstat <- genind2hierfstat(sp_wild_genind)
#run pairwise Fst code
sp_pwfst_df <- pairwise.neifst(sp_hierfstat)
##Geographic analyses for each population
#calculate mean longitude and latitude for each population
sp_mean_lon <- matrix()
sp_mean_lat <- matrix()
#loops for mean lat/lon
for(pop in sp_wild_pop_names){
sp_mean_lon[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,4])
}
#loop to calculate the mean lat by population
for(pop in sp_wild_pop_names){
sp_mean_lat[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,5])
}
#now combine into dataframes
sp_coord_df <- cbind(sp_mean_lon, sp_mean_lat)[-1,]
#create geographic distance matrix
sp_dist_df <- matrix(nrow = length(sp_wild_pop_names), ncol = length(sp_wild_pop_names))
for(r1 in 1:length(sp_wild_pop_names)){
for(r2 in 1:length(sp_wild_pop_names)){
sp_dist_df[r1,r2] <-  distm(sp_coord_df[r1,], sp_coord_df[r2,], fun = distGeo)/1000
}
}
#replace NAs with 0s in the PW Fst data frame
sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
#linear regression between fst and distance
reg <- lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
#saving summary statistics - R2 and p-value
sp_IBD_df[sp,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[sp,2] <- summary(reg)$coefficients[2,4]
rp_IBD <- vector('expression',2)
rp_IBD[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(sp_IBD_df[sp,1],dig=3)))[2]
rp_IBD[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(sp_IBD_df[sp,2], digits = 2)))[2]
#write out data frame
pdf(paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]], ".pdf"), width = 10, height = 8)
plot(sp_pwfst_df~sp_dist_df, pch = 16, xlim = c(0, max(sp_dist_df)), ylim = c(0,1),
xlab = "Distance (km)", ylab = "PW Fst")
abline(reg)
legend('topleft', legend = rp_IBD, bty = 'n')
dev.off
}
rownames(sp_IBD_df) <- scenario_list
colnames(sp_IBD_df) <- c("R2", "p-value")
write.csv("../Analyses/Results/Sum_Stats/sp_IBD_df.csv")
write.csv(sp_IBD_df,"../Analyses/Results/Sum_Stats/sp_IBD_df.csv")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
#############################
#     Fst Calculations      #
#############################
#data frame for the relationship
sp_IBD_df <- matrix(nrow = length(scenario_list), ncol = 2)
#loop to calculate the relationship between pairwise Fst and distance between
#wild populations
for(sp in 1:length(scenario_list)){
#read in genepop file as a genind object
sp_genind <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#read in data frame
sp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[sp]]))
#name rows as individuals
rownames(sp_genind@tab) <- sp_df[,1]
#create population data frames
sp_pop_names <- unique(sp_df[,2])
#name populations
levels(sp_genind@pop) <- sp_pop_names
#limit data frame object to wild individuals
sp_wild_df <- sp_df[sp_df[,3] == "Wild",]
#wild population name list
sp_wild_pop_names <- unique(sp_wild_df[,2])
#limit genind object to wild individuals
sp_wild_genind <- sp_genind[rownames(sp_genind@tab) %in% sp_wild_df[,1],]
#run hierfstat on
sp_hierfstat <- genind2hierfstat(sp_wild_genind)
#run pairwise Fst code
sp_pwfst_df <- pairwise.neifst(sp_hierfstat)
##Geographic analyses for each population
#calculate mean longitude and latitude for each population
sp_mean_lon <- matrix()
sp_mean_lat <- matrix()
#loops for mean lat/lon
for(pop in sp_wild_pop_names){
sp_mean_lon[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,4])
}
#loop to calculate the mean lat by population
for(pop in sp_wild_pop_names){
sp_mean_lat[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,5])
}
#now combine into dataframes
sp_coord_df <- cbind(sp_mean_lon, sp_mean_lat)[-1,]
#create geographic distance matrix
sp_dist_df <- matrix(nrow = length(sp_wild_pop_names), ncol = length(sp_wild_pop_names))
for(r1 in 1:length(sp_wild_pop_names)){
for(r2 in 1:length(sp_wild_pop_names)){
sp_dist_df[r1,r2] <-  distm(sp_coord_df[r1,], sp_coord_df[r2,], fun = distGeo)/1000
}
}
#replace NAs with 0s in the PW Fst data frame
sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
#linear regression between fst and distance
reg <- lm(as.numeric(sp_pwfst_df) ~ as.numeric(sp_dist_df))
#saving summary statistics - R2 and p-value
sp_IBD_df[sp,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[sp,2] <- summary(reg)$coefficients[2,4]
rp_IBD <- vector('expression',2)
rp_IBD[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(sp_IBD_df[sp,1],dig=3)))[2]
rp_IBD[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(sp_IBD_df[sp,2], digits = 2)))[2]
#write out data frame
pdf(paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]], ".pdf"), width = 10, height = 8)
plot(sp_pwfst_df~sp_dist_df, pch = 16, xlim = c(0, max(sp_dist_df)), ylim = c(0,max(sp_pwfst_df)),
xlab = "Distance (km)", ylab = "PW Fst")
abline(reg)
legend('topleft', legend = rp_IBD, bty = 'n')
dev.off
}
dev.off()
dev.off()
dev.off()
dev.off()
rownames(sp_IBD_df) <- scenario_list
colnames(sp_IBD_df) <- c("R2", "p-value")
write.csv(sp_IBD_df,"../Analyses/Results/Sum_Stats/sp_IBD_df.csv")
write.csv(sp_IBD_df,"../Analyses/Results/Sum_Stats/sp_IBD_df.csv")
lower.tri(sp_dist_df)
lower.tri(sp_dist_df)[lower.tri(sp_dist_df)]
lower.tri(sp_dist_df)[lower.tri(sp_dist_df),]
sp_dist_df[lower.tri(sp_dist_df)]
#linear regression between fst and distance
reg <- lm(sp_pwfst_df[lower.tri(sp_pwfst_df)] ~ sp_dist_df[lower.tri(sp_dist_df)])
reg
is.numeric(sp_pwfst_df[lower.tri(sp_pwfst_df)])
is.numeric(sp_dist_df[lower.tri(sp_dist_df)])
#linear regression between fst and distance
reg <- lm(sp_pwfst_df[lower.tri(sp_pwfst_df)] ~ sp_dist_df[lower.tri(sp_dist_df)])
#saving summary statistics - R2 and p-value
sp_IBD_df[sp,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[sp,2] <- summary(reg)$coefficients[2,4]
rp_IBD <- vector('expression',2)
rp_IBD[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(sp_IBD_df[sp,1],dig=3)))[2]
rp_IBD[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(sp_IBD_df[sp,2], digits = 2)))[2]
plot(sp_pwfst_df~sp_dist_df, pch = 16, xlim = c(0, max(sp_dist_df)), ylim = c(0,max(sp_pwfst_df)),
xlab = "Distance (km)", ylab = "PW Fst")
abline(reg)
legend('topleft', legend = rp_IBD, bty = 'n')
#############################
#     Fst Calculations      #
#############################
#data frame for the relationship
sp_IBD_df <- matrix(nrow = length(scenario_list), ncol = 2)
#loop to calculate the relationship between pairwise Fst and distance between
#wild populations
for(sp in 1:length(scenario_list)){
#read in genepop file as a genind object
sp_genind <- read.genepop(paste0("Adegenet_Files/",sp_genind_list[[sp]]), ncode = 3)
#read in data frame
sp_df <- read.csv(paste0("Data_Frames/",sp_df_list[[sp]]))
#name rows as individuals
rownames(sp_genind@tab) <- sp_df[,1]
#create population data frames
sp_pop_names <- unique(sp_df[,2])
#name populations
levels(sp_genind@pop) <- sp_pop_names
#limit data frame object to wild individuals
sp_wild_df <- sp_df[sp_df[,3] == "Wild",]
#wild population name list
sp_wild_pop_names <- unique(sp_wild_df[,2])
#limit genind object to wild individuals
sp_wild_genind <- sp_genind[rownames(sp_genind@tab) %in% sp_wild_df[,1],]
#run hierfstat on
sp_hierfstat <- genind2hierfstat(sp_wild_genind)
#run pairwise Fst code
sp_pwfst_df <- pairwise.neifst(sp_hierfstat)
##Geographic analyses for each population
#calculate mean longitude and latitude for each population
sp_mean_lon <- matrix()
sp_mean_lat <- matrix()
#loops for mean lat/lon
for(pop in sp_wild_pop_names){
sp_mean_lon[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,4])
}
#loop to calculate the mean lat by population
for(pop in sp_wild_pop_names){
sp_mean_lat[pop] <- mean(sp_wild_df[sp_wild_df[,2] == pop,][,5])
}
#now combine into dataframes
sp_coord_df <- cbind(sp_mean_lon, sp_mean_lat)[-1,]
#create geographic distance matrix
sp_dist_df <- matrix(nrow = length(sp_wild_pop_names), ncol = length(sp_wild_pop_names))
for(r1 in 1:length(sp_wild_pop_names)){
for(r2 in 1:length(sp_wild_pop_names)){
sp_dist_df[r1,r2] <-  distm(sp_coord_df[r1,], sp_coord_df[r2,], fun = distGeo)/1000
}
}
#replace NAs with 0s in the PW Fst data frame
sp_pwfst_df[is.na(sp_pwfst_df)] <- 0
#linear regression between fst and distance
reg <- lm(sp_pwfst_df[lower.tri(sp_pwfst_df)] ~ sp_dist_df[lower.tri(sp_dist_df)])
#saving summary statistics - R2 and p-value
sp_IBD_df[sp,1] <- as.numeric(summary(reg)[9])
sp_IBD_df[sp,2] <- summary(reg)$coefficients[2,4]
rp_IBD <- vector('expression',2)
rp_IBD[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(sp_IBD_df[sp,1],dig=3)))[2]
rp_IBD[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(sp_IBD_df[sp,2], digits = 2)))[2]
#write out data frame
pdf(paste0("../Analyses/Results/Sum_Stats/", scenario_list[[sp]], ".pdf"), width = 10, height = 8)
plot(sp_pwfst_df~sp_dist_df, pch = 16, xlim = c(0, max(sp_dist_df)), ylim = c(0,max(sp_pwfst_df)),
xlab = "Distance (km)", ylab = "PW Fst")
abline(reg)
legend('topleft', legend = rp_IBD, bty = 'n')
dev.off
}
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
rownames(sp_IBD_df) <- scenario_list
colnames(sp_IBD_df) <- c("R2", "p-value")
write.csv(sp_IBD_df,"../Analyses/Results/Sum_Stats/sp_IBD_df.csv")
