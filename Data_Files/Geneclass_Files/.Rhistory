###########################
#     Load Data Files     #
###########################
setwd("G:/Shared drives/Emily_Schumacher/Project_Folders/GCC_QUAC_ZAIN/Data_Files/Assignment_Testing")
#load in all geneclass output files
sp_geneclass_output <- list.files(pattern = "output.csv")
###################################
#     Assess assignment test      #
###################################
#create final matrix to store results
assign_success_df <- matrix(nrow = length(sp_geneclass_output), ncol = 1)
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
sp_geneclass_df <- na.omit(sp_geneclass_df)
for(atest in 1:length(sp_geneclass_df[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df$match_TF[atest] <- sp_geneclass_df$First_Pop[atest] ==
sp_geneclass_df$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df[sp_geneclass_df$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
assign_success_df
head(sp_geneclass_df)
grep("NWS", sp_geneclass_df$Wild_Source)
sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
sp_geneclass_df[is.na(sp_geneclass_df)] == "None"
sp_geneclass_df[is.na(sp_geneclass_df)]
is.na(sp_geneclass_df$Wild_Source)
View(sp_geneclass_df)
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
sp_geneclass_df3 <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
###################################
#     Assess assignment test      #
###################################
#create final matrix to store results
assign_success_df <- matrix(nrow = length(sp_geneclass_output), ncol = 1)
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
sp_geneclass_df3 <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df3$match_TF[atest] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df3[sp_geneclass_df3$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df3[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
rownames(assign_success_df) <- strsplit(sp_geneclass_output, split='_output.csv', fixed=TRUE)
write.csv(assign_success_df, "assign_success_df.csv")
###################################
#     Assess assignment test      #
###################################
#create final matrix to store results
assign_success_df <- matrix(nrow = length(sp_geneclass_output), ncol = 1)
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
# sp_geneclass_df3 <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
#for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
# sp_geneclass_df3$match_TF[atest] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
#}
#create a data frame that saves a success and failure
#assign_success <- length(sp_geneclass_df3[sp_geneclass_df3$match_TF == "TRUE",][,1])
#total individuals
#assign_total <- length(sp_geneclass_df3[,1])
#assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
sp_geneclass_df2
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
sp_geneclass_df3 <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
#for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
# sp_geneclass_df3$match_TF[atest] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
#}
#create a data frame that saves a success and failure
#assign_success <- length(sp_geneclass_df3[sp_geneclass_df3$match_TF == "TRUE",][,1])
#total individuals
#assign_total <- length(sp_geneclass_df3[,1])
#assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
sp_geneclass_df3 <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
#for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
# sp_geneclass_df3$match_TF[atest] <- sp_geneclass_df3$First_Pop[atest] ==
#sp_geneclass_df3$Wild_Source[atest]
#}
#create a data frame that saves a success and failure
#assign_success <- length(sp_geneclass_df3[sp_geneclass_df3$match_TF == "TRUE",][,1])
#total individuals
#assign_total <- length(sp_geneclass_df3[,1])
#assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
View(sp_geneclass_df3)
for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df3[atest,14] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
}
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
sp_geneclass_df3 <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
sp_geneclass_df3$match_TF <- NA
for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df3[atest,14] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
}
View(sp_geneclass_df3)
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
sp_geneclass_df3 <- sp_geneclass_df2[-grep("NWS", sp_geneclass_df2$Wild_Source),]
sp_geneclass_df3$match_TF <- NA
for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df3[atest,14] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df3[sp_geneclass_df3$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df3[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
assign_success_df
###################################
#     Assess assignment test      #
###################################
#create final matrix to store results
assign_success_df <- matrix(nrow = length(sp_geneclass_output), ncol = 1)
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
sp_geneclass_df3 <- sp_geneclass_df2[-grep("NWS", sp_geneclass_df2$Wild_Source),]
sp_geneclass_df3$match_TF <- NA
for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df3[atest,14] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df3[sp_geneclass_df3$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df3[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df2 <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
sp_geneclass_df3 <- sp_geneclass_df2[-grep("NWS", sp_geneclass_df2$Wild_Source),]
#sp_geneclass_df3$match_TF <- NA
for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df3$match_TF[atest] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df3[sp_geneclass_df3$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df3[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
for(atest in 1:length(sp_geneclass_df3[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df3$match_TF[atest] <- sp_geneclass_df3$First_Pop[atest] ==
sp_geneclass_df3$Wild_Source[atest]
}
length(sp_geneclass_df3[,1]
)
sp_geneclass_df2[-grep("NWS", sp_geneclass_df2$Wild_Source),]
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
#sp_geneclass_df3 <- sp_geneclass_df2[-grep("NWS", sp_geneclass_df2$Wild_Source),]
#sp_geneclass_df3$match_TF <- NA
for(atest in 1:length(sp_geneclass_df[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df$match_TF[atest] <- sp_geneclass_df$First_Pop[atest] ==
sp_geneclass_df$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df[sp_geneclass_df$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
rownames(assign_success_df) <- strsplit(sp_geneclass_output, split='_output.csv', fixed=TRUE)
assign_success_df
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
#sp_geneclass_df3 <- sp_geneclass_df2[-grep("NWS", sp_geneclass_df2$Wild_Source),]
#sp_geneclass_df3$match_TF <- NA
if(df == 9:16){
sp_geneclass_df <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
}
for(atest in 1:length(sp_geneclass_df[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df$match_TF[atest] <- sp_geneclass_df$First_Pop[atest] ==
sp_geneclass_df$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df[sp_geneclass_df$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
warnings()
length(sp_geneclass_output)
#create a column with a match area
for(df in 1:length(sp_geneclass_output)){
#load in the output df
sp_geneclass_df <- read.csv(sp_geneclass_output[[df]])
##data frame cleaning steps
#first, remove rows that do not have a wild source pop
sp_geneclass_df <- na.omit(sp_geneclass_df)
#second, remove rows that do not have a specific wild source pop
#sp_geneclass_df3 <- sp_geneclass_df2[-grep("NWS", sp_geneclass_df2$Wild_Source),]
#sp_geneclass_df3$match_TF <- NA
if(df == 9|df == 10|df == 11|df == 12|df == 13|df == 14| df ==15|df == 16){
sp_geneclass_df <- sp_geneclass_df[-grep("NWS", sp_geneclass_df$Wild_Source),]
}
for(atest in 1:length(sp_geneclass_df[,1])){
#create a column that saves the number of successes for each
sp_geneclass_df$match_TF[atest] <- sp_geneclass_df$First_Pop[atest] ==
sp_geneclass_df$Wild_Source[atest]
}
#create a data frame that saves a success and failure
assign_success <- length(sp_geneclass_df[sp_geneclass_df$match_TF == "TRUE",][,1])
#total individuals
assign_total <- length(sp_geneclass_df[,1])
assign_success_df[df,] <- signif((assign_success/assign_total)*100, 3)
}
rownames(assign_success_df) <- strsplit(sp_geneclass_output, split='_output.csv', fixed=TRUE)
assign_success_df
write.csv(assign_success_df, "assign_success_df.csv")
write.csv(assign_success_df, "assign_success_df.csv")
