a<-c(10,12,14,16)
b<-c(10,12,14)
a%in%b
25!
?factorial
factorial(4)
factorial(25)/(factorial(10)*factorial(15))
factorial(25)/(factorial(10)*factorial(15))*.5^25*.5^15
factorial(25)/(factorial(12)*factorial(13))*.5^25*.5^13
factorial(25)/(factorial(12)*factorial(13))*.5^12*.5^13
binom(250,.5)
?pbinom
dbinom(250,.5)
?dbinom
rbinom(12,25,.5)
rbinom(250,25,.5)
hist(rbinom(250,25,.5))
hist(rbinom(250,25,.56))
par(mfrow=c(2,1))
hist(rbinom(250,25,.56))
hist(rbinom(250,25,.5))
hist(rbinom(250,25,.56),xlim=c(0,25))
hist(rbinom(250,25,.5),xlim=c(0,25))
hist(rbinom(25,25,.5),xlim=c(0,25))
hist(rbinom(25,25,.56),xlim=c(0,25))
900/16500
32/8260
30/1390
5000/3
5000*.3
1/9
23/.36
64*.36
64*.3
63*.3
6/.35
8/.47
30/1390
32/8260
257/60000
200/37.5
250/37.5
68+97+100+40
/4
305/4
2/3 +1/9
.7777777/2
39.51+52.28
36.23+7.22+42.09+192.60+5.08
47.42+34.72
63.02+19.72+59.17+46.14+16.59+63.96
11.47+39.53
95000/52
95000/52*2
45000/52*2
245 + 114+114
532 +267+ 274
155+134+284
129+143+255
2.5*100
/35
250/35
310/35
310/35/8
45000/52
/37.5
45000/52/37.5
23*535
12300*.27
14200/535
.999^10
.999^100
.999^30
.9995^100
.999^8
1381+568
1381+568+3183*.8
1381+568+3183*.9
1381+568+3183*.85
1381+568+3183*.88
2000/35
24.15*.1.05
24.15*1.05
17.53*1.05
45*1.28
45*1.28*1.5
37.5*25*1.3
37.5*25*1.3*3
3178/3
1381/2
1381/2+ 1059
1381/2+ 1059+1059
762/141
762/174
log(50)
407+2428+206+1170
250*5
250*5/60
10000*5000
10000*50
350/130000
52*37.5*50
52*37.5*40
2500/40
3000/40
1000/40
24000*.07
60*2*50
60*2*40
40*37.5*52
60*70
*50
60_70
13*40
20*20*17
1923*6
1923*6*1.28
1923*6*.25
4580/80
*36
4580/80*36
27/3.8
3.8*52
3.8*26
9/15
20/135
360/.56
137/.21
20.51*37.5*52
1300*2+2210+2050
-9185
1300*2+2210+2050-9185
2325+2300
17500-4625
2300+2300+1000+2300+4000
-17500
2300+2300+1000+2300+4000-17500
80/150
12.92+8.33
library(adegenet)#
library(sjmisc)#
#
############################
#     Load Data Files     ##
############################
setwd("../../Data_Files")
getwd()
setwd("/Users/shoban/git/")
dir()
dir()
setwd("/Users/shoban/git/IMLS_GCC_QUAC_ZAIN/")
setwd("../../Data_Files")#
#
#first try code on JUST QUAC without Kessler #
QUAC_woK_genind <- read.genepop("Adegenet_Files/QUAC_woK_allpop_clean.gen",#
                                ncode = 3)
dir()
setwd("/Users/shoban/git/IMLS_GCC_QUAC_ZAIN/Analyses/")
dir()
setwd("/Users/shoban/git/IMLS_GCC_QUAC_ZAIN/Data_Files//")
#first try code on JUST QUAC without Kessler #
QUAC_woK_genind <- read.genepop("Adegenet_Files/QUAC_woK_allpop_clean.gen",#
                                ncode = 3)#
#
#load in fa sample functions#
source("../Analyses/Functions/Fa_sample_funcs.R")#
#
#allele categories list#
all_cat_list <-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare")#
#
#list of duplicate reps
dup_reps <- c(0:9)
get.allele.cat
#create garden genind#
num_garden_ind<-sum(table(QUAC_woK_genind@pop)[1:17])#
#
QUAC_garden_genind <- QUAC_woK_genind[1:num_garden_ind,]#
#
#rename pops#
levels(QUAC_garden_genind@pop) <- rep("Garden",17)#
#
#create wild genind object #
num_wild_ind <- sum(table(QUAC_woK_genind@pop)[18:21])#
#
QUAC_wild_genind <- QUAC_woK_genind[(num_garden_ind+1):(num_garden_ind+num_wild_ind),]#
#
#rename pops #
levels(QUAC_wild_genind@pop) <- rep("Wild",4)
#rename pops #
levels(QUAC_wild_genind@pop) <- rep("Wild",4)#
#
#recombine into garden/wild genind object#
#QUAC_garden_wild_genind <- repool(QUAC_garden_genind, QUAC_wild_genind)#
#
#convert to the wild genpop object#
QUAC_wild_genpop <- genind2genpop(QUAC_wild_genind)#
#
#calculate how alleles are represented ex situ#
QUAC_all_rep <- colSums(QUAC_garden_genind@tab,na.rm=T)#
#
#calculate the allele categories in the wild populations#
QUAC_all_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)	#
#
#remove regional alleles #
QUAC_all_cat <- QUAC_all_cat[1:5]#
#
##create a list to store the individual numbers #
#list #
#
num_rep_list <- list(list(), list(), list(), list(), list())#
num_rep_list_he <- list(list(), list(), list(), list(), list())#
num_rep_list_ho <- list(list(), list(), list(), list(), list())#
#
for(cat in 1:length(QUAC_all_cat)){#
  num_alleles_in_cat <- length(QUAC_all_cat[[cat]])#
  for (a in 1:num_alleles_in_cat){#
    num_rep_list[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] > 0, na.rm=T)#
    num_rep_list_he[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 1, na.rm=T)#
    num_rep_list_ho[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 2, na.rm=T)#
  }#
}
num_rep_list
num_rep_list[[1]]
unlist(num_rep_list[[1]])
str(num_rep_list)
num_rep_list <- list(list(), list(), list(), list(), list())#
num_rep_list_he <- list(list(), list(), list(), list(), list())#
num_rep_list_ho <- list(list(), list(), list(), list(), list())#
#
for(cat in 1:length(QUAC_all_cat)){#
  num_alleles_in_cat <- length(QUAC_all_cat[[cat]])#
  for (a in 1:num_alleles_in_cat){#
      num_rep_list[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] > 0, na.rm=T)#
      num_rep_list_he[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 1, na.rm=T)#
      num_rep_list_ho[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 2, na.rm=T)#
#
  }#
}
QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]]
num_alleles_in_cat
num_rep_list[[cat]]
QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] > 0
QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a]
sort(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a])
length(sort(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a]))
sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] > 0, na.rm=T)
num_rep_list
#create data frame to save results  #
QUAC_rep_df <- matrix(nrow = length(dup_reps),#
                      ncol = length(QUAC_all_cat))#
QUAC_rep_df_he <- matrix(nrow = length(dup_reps),#
                      ncol = length(QUAC_all_cat))#
QUAC_rep_df_ho <- matrix(nrow = length(dup_reps),#
                      ncol = length(QUAC_all_cat))#
#
for(dup in dup_reps){#
  for(cat in 1:length(QUAC_all_cat)){#
    #create data frame to store results#
    QUAC_rep_df[dup+1,cat] <- sum(num_rep_list[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
QUAC_rep_df_he[dup+1,cat] <- sum(num_rep_list_he[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
QUAC_rep_df_ho[dup+1,cat] <- sum(num_rep_list_ho[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
  }#
}
num_rep_list[[cat]]
num_rep_list[[cat]]>5
for(dup in dup_reps){#
  for(cat in 1:length(QUAC_all_cat)){#
    #create data frame to store results#
    QUAC_rep_df[dup+1,cat] <- sum(num_rep_list[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
QUAC_rep_df_he[dup+1,cat] <- sum(num_rep_list_he[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
QUAC_rep_df_ho[dup+1,cat] <- sum(num_rep_list_ho[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
  }#
}
QUAC_rep_df
QUAC_rep_df
num_rep_list
num_rep_list[[cat]]>
5
sum(num_rep_list[[cat]]>dup)
dup
dup<-2
sum(num_rep_list[[cat]]>dup)
#first we will work on QUAC without Kessler #
QUAC_woK_genind <- read.genepop("Adegenet_Files/QUAC_woK_allpop_clean.gen", ncode = 3)#
#
#load in fa sample functions#
source("../Analyses/Functions/Fa_sample_funcs.R")#
#allele categories list#
all_cat_list <-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare")#
#vector of duplicate reps#
 dup_reps <- c(0:9)#
#
#create garden genind. Note this cannot be done with seppop, because seppop will count only alleles in your subset, thus possibly "losing" wild alleles#
num_garden_ind<-sum(table(QUAC_woK_genind@pop)[1:17])#
QUAC_garden_genind <- QUAC_woK_genind[1:num_garden_ind,]#
#rename pops#
levels(QUAC_garden_genind@pop) <- rep("Garden",17)#
#
#create wild genind object #
num_wild_ind <- sum(table(QUAC_woK_genind@pop)[18:21])#
QUAC_wild_genind <- QUAC_woK_genind[(num_garden_ind+1):(num_garden_ind+num_wild_ind),]#
#rename pops #
levels(QUAC_wild_genind@pop) <- rep("Wild",4)#
#
#convert to the wild genpop object#
QUAC_wild_genpop <- genind2genpop(QUAC_wild_genind)#
#
#calculate the allele categories in the wild populations#
QUAC_all_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)	#
#
#remove regional alleles #
QUAC_all_cat <- QUAC_all_cat[1:5]#
#
##################################
#	How many individuals have each allele#
##################################
#
#create a list to store the number of individuals representing each allele #
#This list is length of 5, the five allele categories we are concerned with#
#the elements of the list are vectors... the vector is length of the number of alleles in each category#
#within each element of the vector will be the number of individuals having that allele#
#for example, [[1]][1:3] might be 5,1, 10 which means five individuals, 0 individuals, and 10 individuals have those first three alleles, resepectively#
num_indiv_rep_list <- list(vector(), vector(), vector(), vector(), vector())#
num_indiv_rep_list_he <-  list(vector(), vector(), vector(), vector(), vector())#
num_indiv_rep_list_ho <-  list(vector(), vector(), vector(), vector(), vector())#
#
#This for loop goes through the 5 allele categories of interest#
#It then goes through all the alleles in a category#
#It then counts the number of individuals, the number of homozygotes, and the number of heterozygotes for that allele#
#recall that QUAC_garden_genind@tab is a matrix of nrows= number of individuals and ncols = number of alleles#
#so every cell of the matrix is an individual-allele combination, and the data in the cell are the number of copies of that allele in that individual#
#An individual can have the allele in 2 copies (homozygote), 1 copy (heterozygote), or not have the allele (0)#
for(cat in 1:length(QUAC_all_cat)){#
  num_alleles_in_cat <- length(QUAC_all_cat[[cat]])#
  for (a in 1:num_alleles_in_cat){#
    num_indiv_rep_list[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] > 0, na.rm=T)#
    num_indiv_rep_list_he[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 1, na.rm=T)#
    num_indiv_rep_list_ho[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 2, na.rm=T)#
  }#
}#
#
#############################################################
# Percent of alleles represented in greater than "dup" number of individuals#
#############################################################
#
#create data frame to save results  #
#In this case the results are the precent of alleles present in greater than "dup" number of individuals#
#The he and ho stand for individuals in the heterozygous and homozygous states#
percent_indiv_results <- matrix(nrow = length(dup_reps),#
                      ncol = length(QUAC_all_cat))#
#
percent_indiv_results_he <- matrix(nrow = length(dup_reps),#
                         ncol = length(QUAC_all_cat))#
percent_indiv_results_ho <- matrix(nrow = length(dup_reps),#
                         ncol = length(QUAC_all_cat))#
#
#This loop goes through the number of "dups" from 1 to 10 (with 1 meaning no "backup")#
#Then through the loop of allele categories (5)#
#Within that loop it determines if the number of individuals with that allele is greater than "dup", #
#then divides the number of alleles meeting that criteria by the total number of alleles #
#thus returning the proportion of alleles contained in more than "dup" individuals#
#The he and ho stand for individuals in the heterozygous and homozygous states#
for(dup in dup_reps){#
  for(cat in 1:length(QUAC_all_cat)){#
    #create data frame to store results #
    percent_indiv_results[dup+1,cat] <- sum(num_rep_list[[cat]]>dup)/length(num_rep_list[[cat]])#
    percent_indiv_results_he[dup+1,cat] <- sum(num_rep_list_he[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
    percent_indiv_results_ho[dup+1,cat] <- sum(num_rep_list_ho[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
  }#
}#
#write out matrix#
QUAC_rep_df <- signif(QUAC_rep_df*100,3)#
colnames(QUAC_rep_df) <- all_cat_list#
rownames(QUAC_rep_df) <- paste0(c(1:10), " or more copies")
#first we will work on QUAC without Kessler #
QUAC_woK_genind <- read.genepop("Adegenet_Files/QUAC_woK_allpop_clean.gen", ncode = 3)#
#
#load in fa sample functions#
source("../Analyses/Functions/Fa_sample_funcs.R")#
#allele categories list#
all_cat_list <-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare")#
#vector of duplicate reps#
 dup_reps <- c(0:9)#
#
#create garden genind. Note this cannot be done with seppop, because seppop will count only alleles in your subset, thus possibly "losing" wild alleles#
num_garden_ind<-sum(table(QUAC_woK_genind@pop)[1:17])#
QUAC_garden_genind <- QUAC_woK_genind[1:num_garden_ind,]#
#rename pops#
levels(QUAC_garden_genind@pop) <- rep("Garden",17)#
#
#create wild genind object #
num_wild_ind <- sum(table(QUAC_woK_genind@pop)[18:21])#
QUAC_wild_genind <- QUAC_woK_genind[(num_garden_ind+1):(num_garden_ind+num_wild_ind),]#
#rename pops #
levels(QUAC_wild_genind@pop) <- rep("Wild",4)#
#
#convert to the wild genpop object#
QUAC_wild_genpop <- genind2genpop(QUAC_wild_genind)#
#
#calculate the allele categories in the wild populations#
QUAC_all_cat <- get.allele.cat(QUAC_wild_genpop, 1, 1, num_wild_ind, n_drop = 0, glob_only = TRUE)	#
#
#remove regional alleles #
QUAC_all_cat <- QUAC_all_cat[1:5]#
#
##################################
#	How many individuals have each allele#
##################################
#
#create a list to store the number of individuals representing each allele #
#This list is length of 5, the five allele categories we are concerned with#
#the elements of the list are vectors... the vector is length of the number of alleles in each category#
#within each element of the vector will be the number of individuals having that allele#
#for example, [[1]][1:3] might be 5,1, 10 which means five individuals, 0 individuals, and 10 individuals have those first three alleles, resepectively#
num_indiv_rep_list <- list(vector(), vector(), vector(), vector(), vector())#
num_indiv_rep_list_he <-  list(vector(), vector(), vector(), vector(), vector())#
num_indiv_rep_list_ho <-  list(vector(), vector(), vector(), vector(), vector())#
#
#This for loop goes through the 5 allele categories of interest#
#It then goes through all the alleles in a category#
#It then counts the number of individuals, the number of homozygotes, and the number of heterozygotes for that allele#
#recall that QUAC_garden_genind@tab is a matrix of nrows= number of individuals and ncols = number of alleles#
#so every cell of the matrix is an individual-allele combination, and the data in the cell are the number of copies of that allele in that individual#
#An individual can have the allele in 2 copies (homozygote), 1 copy (heterozygote), or not have the allele (0)#
for(cat in 1:length(QUAC_all_cat)){#
  num_alleles_in_cat <- length(QUAC_all_cat[[cat]])#
  for (a in 1:num_alleles_in_cat){#
    num_indiv_rep_list[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] > 0, na.rm=T)#
    num_indiv_rep_list_he[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 1, na.rm=T)#
    num_indiv_rep_list_ho[[cat]][a] <- sum(QUAC_garden_genind@tab[,QUAC_all_cat[[cat]]][,a] == 2, na.rm=T)#
  }#
}#
#
#############################################################
# Percent of alleles represented in greater than "dup" number of individuals#
#############################################################
#
#create data frame to save results  #
#In this case the results are the precent of alleles present in greater than "dup" number of individuals#
#The he and ho stand for individuals in the heterozygous and homozygous states#
percent_indiv_results <- matrix(nrow = length(dup_reps),#
                      ncol = length(QUAC_all_cat))#
#
percent_indiv_results_he <- matrix(nrow = length(dup_reps),#
                         ncol = length(QUAC_all_cat))#
percent_indiv_results_ho <- matrix(nrow = length(dup_reps),#
                         ncol = length(QUAC_all_cat))#
#
#This loop goes through the number of "dups" from 1 to 10 (with 1 meaning no "backup")#
#Then through the loop of allele categories (5)#
#Within that loop it determines if the number of individuals with that allele is greater than "dup", #
#then divides the number of alleles meeting that criteria by the total number of alleles #
#thus returning the proportion of alleles contained in more than "dup" individuals#
#The he and ho stand for individuals in the heterozygous and homozygous states#
for(dup in dup_reps){#
  for(cat in 1:length(QUAC_all_cat)){#
    #create data frame to store results #
    percent_indiv_results[dup+1,cat] <- sum(num_rep_list[[cat]]>dup)/length(num_rep_list[[cat]])#
    percent_indiv_results_he[dup+1,cat] <- sum(num_rep_list_he[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
    percent_indiv_results_ho[dup+1,cat] <- sum(num_rep_list_ho[[cat]]>dup)/length(QUAC_all_cat[[cat]])#
  }#
}#
#write out matrix#
percent_indiv_results <- signif(percent_indiv_results*100,3)#
colnames(percent_indiv_results) <- all_cat_list#
rownames(percent_indiv_results) <- paste0(c(1:10), " or more copies")#
#
write.csv(percent_indiv_results, "../Analyses/Results/Garden_Wild_Comparison/percent_indiv_results.csv")
percent_indiv_results
percent_indiv_results_he
percent_indiv_results_ho
