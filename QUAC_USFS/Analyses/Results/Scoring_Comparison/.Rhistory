str_detect(email_tests, "(?i)^e")
str_detect(email_tests, "(?i)^e\\")
str_detect(email_tests, "(?i)^e\\[\\(?i)mail]\\")
str_detect(email_tests, "(?i)^e\\[\\w+]\\")
str_detect(email_tests, "(?i)^e")
str_detect(email_tests, "(?i)^e\\[\\mail\\]\\")
str_detect(email_tests, "(?i)^e\[\mail\]\")
str_detect(email_tests, "(?i)^e[\mail\]\")
str_detect(email_tests, "(?i)^e\[mail\]\")
str_detect(email_tests, "(?i)^e\[mail\]")
str_detect(email_tests, "(?i)^e\\[mail\\]")
str_detect(email_tests, "(?i)^e\\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\\s[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\[[Mm]ail\\]")
str_detect(email_tests, "(?i)^e\\.\\[[Mm]ail\\]")
str_detect(email_tests, "(?i)^e\\[[Mm]ail\\]")
str_detect(email_tests, "(?i)^e\\.\\[Mm]ail\\")
str_detect(email_tests, "(?i)^e\\.[Mm]ail\\")
str_detect(email_tests, "(?i)^e.[Mm]ail\\")
str_detect(email_tests, "(?i)^e.\\[Mm]ail")
str_detect(email_tests, "(?i)^e.[Mm]ail")
str_detect(email_tests, "(?i)^e.(?i)mail")
str_detect(email_tests, "(?i)^e.\\(?i)mail")
str_detect(email_tests, "(?i)^e\\.(?i)mail")
str_detect(email_tests, "(?i)^e.(?i)mail")
str_detect(email_tests, "(?i)^e.\[(\^e)\](?i)mail")
str_detect(email_tests, "(?i)^e.\[(\^e)\]\(?i)mail")
pattern <- pattern <- "(?i)e[\\-\\s]?mail"
pattern <- "(?i)e[\\-\\s]?mail"
str_detect(email_tests, pattern)
as.numeric("74%")
str_detect(percent_string, "[$\\%\\]")
percent_string <- "74%"
pattern <- "\\$%\\"
str_detect(percent_string, pattern)
library(sp)
sessionInfo
sessionInfo()
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
library(tidyr)
#######################
#     Load files      #
#######################
#set working directory to load in data files
setwd("../../Data_Files")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/Garden_Wild", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "Data_Frames", pattern = "_clean_df.csv")
#list out allele categories
list_sp_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#list of scenarios
species_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#load in function to calculate allele frequency categories
source("../Analyses/RScripts/Fa_sample_funcs.R")
install.packages("hiphop")
library(hiphop)
###############################
#     Parentage Analysis      #
###############################
#create genotype file
genotype <- c("AA", "Aa", "aa")
#hiphop table
gentable_name <- c("offspring","dam","sire","hot.dam","hot.sire","hot.parents", "hiphop","hothiphop.parents")
#hiphop table
gentable_names <- c("offspring","dam","sire","hot.dam","hot.sire","hot.parents", "hiphop","hothiphop.parents")
#fill in table
gentable <- as.data.frame(array(NA,dim = c(length(genotype)^3,length(gentable_names)), dimnames=list(NULL,gentable_names)))
View(gentable)
#add genotypes
gentable$offspring<-rep(genotype, each=length(genotype)*length(genotype))
View(gentable)
gentable$dam<-rep(genotype, length(genotype)*length(genotype))
gentable$dam<-rep(genotype, length(genotype)*length(genotype))
gentable$sire<-rep(genotype, length(genotype), each=length(genotype))
#test for HOT - Homozygous Opposite Test
gentable$hot.dam<-ifelse((gentable$offspring=="AA" & gentable$dam=="aa") | (gentable$offspring=="aa" & gentable$dam=="AA"), 1,0)
gentable$hot.parents<-ifelse(((gentable$offspring=="AA" & (gentable$sire=="aa" | gentable$dam=="aa")) | (gentable$offspring=="aa" & (gentable$sire=="AA" | gentable$dam=="AA"))),1,0)
#test for HOT - Homozygous Opposite Test
#mother and child pair
gentable$hot.dam<-ifelse((gentable$offspring=="AA" & gentable$dam=="aa") | (gentable$offspring=="aa" & gentable$dam=="AA"), 1,0)
# the HOT test for the offspring-sire dyad
gentable$hot.sire<-ifelse( (gentable$offspring=="AA" & gentable$sire=="aa") | (gentable$offspring=="aa" & gentable$sire=="AA"), 1,0)
# the HOT test for the offspring-dam-sire triad
gentable$hot.parents<-ifelse(((gentable$offspring=="AA" & (gentable$sire=="aa" | gentable$dam=="aa")) | (gentable$offspring=="aa" & (gentable$sire=="AA" | gentable$dam=="AA"))),1,0)
# the hiphop for the dam-sire combination
gentable$hiphop<-ifelse( (gentable$offspring=="Aa" & gentable$sire=="aa" & gentable$dam=="aa") | (gentable$offspring=="Aa" & gentable$sire=="AA" &  gentable$dam=="AA"), 1,0)
gentable$hothiphop.parents<-gentable$hot.parents+gentable$hiphop
print(gentable)
individuals
head(individuals)
head(genotype)
head(genotypes)
genotypes
genotypes[1:5,1:13]
##working through trial dataset
ind2018 <- subset(individuals, individuals$year==2018)
inspection <- inspect(ind=ind2018, gen=genotypes)
head(inspection)
head(inspection)
inspection[which(inspection$sampled==0),]
print(c(length(unique(ind2018$individual[which(ind2018$type=="offspring")])), length(unique(ind2018$individual[which(ind2018$type=="adult female")])), length(unique(ind2018$individual[which(ind2018$type=="adult male")]))))
combinations<-hothiphop(ind=ind2018, gen=genotypes)
inspect
hothiphop
#to find the best match
best_hothiphop<-topmatch(x=combinations, ranking="hothiphop.parents")
best_hothiphop[1:8,]
install.packages("PolyPatEx")
library(PolyPatEx)
# Create data frame
example <- data.frame(indiv = c("A", "B", "C", "D", "E"),
height_0 = c(15, 10, 12, 9, 17),
height_10 = c(20, 18, 14, 15, 19),
height_20 = c(23, 24, 18, 17, 26))
# View the data frame
head(example)
# Calculating the mean for each row in the data frame
row.avg <- apply(X = example[, 2:4], MARGIN = 1, FUN = mean)
# View row.avg
row.avg
# Calculating the mean for each column in the data frame
col.avg <- apply(example[, 2:4], 2, mean)
# View col.avg
col.avg
mean(15,20,23)
mean(10,18,24)
mean(12, 14, 18)
mean(12,14,18)
mean(example[,2:4])
mean(example[1,2:4])
example[,2:4]
example[2,2:4]
mean(as.numeric(example[2,2:4]))
# Set seed so that the randomly-generated numbers are the same each time
set.seed(123)
# Create a list using randomly-generated numbers
plants <- list(height = runif(10, min = 10, max = 20),
mass = runif(10, min = 5, max = 10),
flowers = sample(1:10, 10))
# View the list
plants
lapply(plants, mean)
# Use sapply to find the mean of each list element
sapply(plants, mean)
# Load library to use the pivot_longer() function
library(tidyverse)
# Pivot the data so that the data are in long format instead of wide format
example <- pivot_longer(example, cols = 2:4, names_to = "time", values_to = "height")
# Use sub() to get rid of the string "height_" in front of the time values
example$time <- sub("height_", "", example$time)
# View data
head(example)
tapply(X = vector.to.analyze, INDEX = vector.to.group.by, FUN = function.you.want)
# Use tapply() to find average height by time grouping
tapply(X = example$height, INDEX = example$time, mean)
#install.packages("tidyverse")
#install.packages("psych")
#install.packages("ggpubr")
#install.packages("zoo")
#install.packages("formattable")
#install.packages("RcppRoll")
#install.packages("naniar")
library(dplyr)
library(tidyverse)
install.packages("psych")
install.packages("ggpubr")
install.packages("zoo")
#install.packages("tidyverse")
#install.packages("psych")
#install.packages("ggpubr")
#install.packages("zoo")
#install.packages("formattable")
#install.packages("RcppRoll")
#install.packages("naniar")
library(dplyr)
library(tidyverse)
library(psych)
library(ggpubr)
library(zoo)
library(RcppRoll)
data_frame <- read.csv("C:/Users/eschumacher/Downloads/pin_945_precut.csv")
View(data_frame)
data_frame[,"Time"]
data_frame[,c("Angle1X":"Angle2Y")]
output_df <- matrix(nrow = 60, ncol = 4)
library(adegenet)
library(hierfstat)
library(geosphere)
library(parallel)
library(foreach)
library(doParallel)
#########################
#   Load Data Files     #
#########################
#set working directory
setwd("../../Data_Files")
#list data files
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "Data_Frames/", pattern = "_clean_df.csv")
#wild df coords
sp_coord_df <- list.files(path = "Data_Frames/", pattern = "wild_coord_df")
.libsPaths()
.libPaths()
source("~/.Rprofile")
library(Demerelate)
install.packages("Demerelate")
install.packages("C:/Users/eschumacher/Downloads/PolyPatEx-master.zip", repos = NULL, type = "win.binary")
library(PolyPatEx-master)
library(PolyPatEx)
install.packages("C:/Users/eschumacher/Downloads/R-4.0.0-win.exe", repos = NULL)
install.packages("C:/Users/eschumacher/Downloads/PolyPatEx-master.zip", repos = NULL, type = "win.binary")
install.packages('GapAnalysis',repos='http://cran.us.r-project.org')
install.packages("C:/Users/eschumacher/Downloads/GapAnalysis-master.zip", repos = NULL, type = "win.binary")
library(GapAnalysis-master)
wget https://CRAN.R-project.org/package=GapAnalysis
install.packages("https://CRAN.R-project.org/package=GapAnalysis", repos=NULL, type="source")
install.packages("C:/Users/eschumacher/Downloads/GapAnalysis_1.0.2.tar.gz", repos = NULL, type = "source")
install.packages("GapAnalysis", type = "source")
install.packages('GapAnalysis',repos='http://cran.us.r-project.org')
install.packages("C:/Users/eschumacher/Downloads/GapAnalysis_1.0.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/GapAnalysis_1.0.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/GapAnalysis_1.0.2.tar.gz", repos = NULL, type = "source")
install.packages('GapAnalysis',repos='http://cran.us.r-project.org')
library(devtools)
remotes::install_github("CIAT-DAPA/GapAnalysis")
library(GapAnalysis)
####################
library(devtools)
remotes::install_github("cran/Demerelate")
library(Demerelate)
install.packages('Demerelate',repos='http://cran.us.r-project.org')
library(urltools)
library(rtools)
library(Rtools)
require(devtools)
require(devtools)
install_version("Demerelate", version = "0.9-3", repos = "http://cran.us.r-project.org")
install.packages("https://cran.r-project.org/src/contrib/Archive/Demerelate/", repos=NULL, type="source")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9-3 (1).tar.gz", repos = NULL, type = "source")
####################
library(devtools)
remotes::install_github("cran/Demerelate")
install.packages("https://cran.r-project.org/src/contrib/Archive/fts/", repos=NULL, type="source")
require(devtools)
install_version("Demerelate", version = "0.9-3", repos = "http://cran.us.r-project.org")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.8-0.tar.gz", repos = NULL, type = "source")
find_rtools()
find_rtools()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MSstats")
#########################
#   Load Data Files     #
##########################
#set working directory
setwd("C:/Users/eschumacher/Documents/GitHub/GCC_QUAC_ZAIN/QUAC_USFS/Data_Files")
#convert arp2gen
arp2gen("Genepop_Files/USFS_QUAC_arp.arp")
library(diveRsity)
library(adegenet)
library(poppr)
install.packages("diveRsity")
install.packages("C:/Users/eschumacher/Downloads/diveRsity_1.9.90.tar.gz", repos = NULL, type = "source")
#convert arp2gen
list.files("Genepop_Files")
#convert arp2gen
USFS_QUAC_gen <- read.genepop("Genepop_Files/USFS_QUAC_genepop.genepop", ncode = 2)
#convert arp2gen
USFS_QUAC_gen <- read.genepop("Genepop_Files/USFS_QUAC_genepop.gen", ncode = 2)
table(pop(USFS_QUAC_gen))
#read in USFS QUAC data file
USFS_QUAC_df <- read.csv("CSV_Files/USFS_QUAC_Scores_df.csv")
View(USFS_QUAC_df)
USFS_QUAC_df <- USFS_QUAC_df[1:214,]
unique(USFS_QUAC_df$Pop)
unique(USFS_QUAC_df[,2])
#read in USFS QUAC data file
USFS_QUAC_df <- read.csv("CSV_Files/USFS_QUAC_Scores_df.csv")
View(USFS_QUAC_df)
#read in USFS QUAC data file
USFS_QUAC_df <- read.csv("CSV_Files/USFS_QUAC_Scores_df.csv")
#read in USFS QUAC data file
USFS_QUAC_df <- read.csv("CSV_Files/USFS_QUAC_Scores_df.csv")
View(USFS_QUAC_df)
rm(USFS_QUAC_df)
#read in USFS QUAC data file
USFS_QUAC_df <- read.csv("CSV_Files/USFS_QUAC_Scores_df.csv")
View(USFS_QUAC_df)
USFS_QUAC_df <- USFS_QUAC_df[1:206,]
#pop name list
pop_list <- unique(USFS_QUAC_df$Pop)
levels(USFS_QUAC_gen@pop)
#name populations
levels(USFS_QUAC_gen@pop) <- pop_list
table(USFS_QUAC_gen@pop)
###############################################
#     Binning Reorganizing Genind Objects     #
###############################################
###separate by clones and wild individuals
##Scion individuals
QUAC_scions_gen <- repool(seppop(USFS_QUAC_gen)[1:4])
levels(QUAC_scions_gen@pop)
length(levels(QUAC_scions_gen@pop))
###############################################
#     Binning Reorganizing Genind Objects     #
###############################################
##separate by clones and wild individuals
#Scion individuals genind object
QUAC_scions_gen <- repool(seppop(USFS_QUAC_gen)[1:4])
#rename levels
levels(QUAC_scions_gen@pop) <- rep("Scions", rep(length(levels(QUAC_scions_gen@pop))))
#wild individuals wild genind object
QUAC_wild_gen <- repool(seppop(USFS_QUAC_gen)[5:8])
#rename levels
levels(QUAC_wild_gen@pop) <- rep("Wild", rep(length(levels(QUAC_wild_gen@pop))))
#repool into one genind object
QUAC_scion_wild_gen <- repool(QUAC_scions_gen, QUAC_wild_gen)
table(QUAC_scion_wild_gen@pop)
#create a loci list
QUAC_scion_wild_genpop <- genind2genpop(QUAC_scion_wild_gen)
colnames(USFS_QUAC_df)
colnames(USFS_QUAC_df)[2:30]
length(colnames(USFS_QUAC_df))
colnames(USFS_QUAC_df)[2:length(colnames(USFS_QUAC_df))]
colnames(USFS_QUAC_df)[3:length(colnames(USFS_QUAC_df))]
#create loci list
loci <- colnames(USFS_QUAC_df)[3:length(colnames(USFS_QUAC_df))]
gsub("\\..*","",loci)
unique(gsub("\\..*","",loci))
#clean list to just locus name
clean_loci <- unique(gsub("\\..*","",loci))
colnames(QUAC_scion_wild_genpop@tab)
clean_loci
clean_loci[4]
clean_loci[4] <- "1F02"
clean_loci
clean_loci[[1]]
QUAC_scion_wild_genpop[,which(grepl(clean_loci[[1]],colnames(QUAC_scion_wild_genpop@tab)))]@tab
#create data frame of each locus
QUAC_scoring <- QUAC_scion_wild_genpop[,which(grepl(clean_loci[[1]],colnames(QUAC_scion_wild_genpop@tab)))]@tab
for(p in 1:2) QUAC_scoring[p,] <- QUAC_scoring[p,]/sum(QUAC_scoring[p,])
QUAC_scoring
#reorder data frame
QUAC_scoring <- QUAC_scoring[,sort(colnames(QUAC_scoring))]
QUAC_scoring
#set working directory
setwd("../Analyses/Results/Scoring_Comparison")
pdf("QUAC_scoring_comparison_barplots.pdf",width=20,height=9)
#2023 scoring barplots
for(a in clean_loci){
#create data frame of each locus
QUAC_scoring <- QUAC_scion_wild_genpop[,which(grepl(a,colnames(QUAC_scion_wild_genpop@tab)))]@tab
#turn into percentages
for(p in 1:2) QUAC_scoring[p,] <- QUAC_scoring[p,]/sum(QUAC_scoring[p,])
#reorder data frame
QUAC_scoring <- QUAC_scoring[,sort(colnames(QUAC_scoring))]
#now plot
QUAC_barplot <- barplot(QUAC_scoring, las = 2, beside = TRUE, col = c("darkgreen", "darkseagreen1"),
legend.text =  c("2023","2020"), ylim = c(0,1), main = paste0(a),
names = gsub("^.*\\.","",colnames(QUAC_scoring)))
}
dev.off()
##load in the rebinned genind object
QUAC_rebinned_genind <- read.genind("USFS_QUAC_rebinned_genepop.gen", ncode = 2)
##load in the rebinned genind object
QUAC_rebinned_genind <- read.genepop("USFS_QUAC_rebinned_genepop.gen", ncode = 2)
##############3
#     Rebinned
##############
setwd("../Data_Files/Genepop_Files")
##############3
#     Rebinned
##############
setwd("../../../Data_Files/Genepop_Files")
##load in the rebinned genind object
QUAC_rebinned_genind <- read.genepop("USFS_QUAC_rebinned_genepop.gen", ncode = 2)
##Code to plot ZAIN genind objects following rebinning analysis was performed
#create pdf
setwd("../.../Analyses/")
pdf("QUAC_scoring_comparison_barplots_post_rebinning.pdf",width=20,height=9)
#loop to compare scoring between 2021 Scoring and 2011 Scoring
for(a in clean_loci){
#create data frame of each locus
QUAC_scoring <- QUAC_rebinned_genind[,which(grepl(a,colnames(QUAC_rebinned_genind@tab)))]@tab
#loop to standardize score count by percent for each group - wild and garden individuals
for(p in 1:2) QUAC_scoring[p,] <- QUAC_scoring[p,]/sum(QUAC_scoring[p,])
#reorder data frame for alleles to be plotted in numerical order
QUAC_scoring <- QUAC_scoring[,sort(colnames(QUAC_scoring))]
#plot barplots by locus
QUAC_rebinned_barplot <- barplot(QUAC_scoring, las = 2, beside = TRUE, col = c("darkgreen", "darkseagreen1"),
legend.text =  c("2023","2020"), ylim = c(0,1), main = paste0(a),
names = gsub("^.*\\.","",colnames(QUAC_scoring)))
}
##Code to plot ZAIN genind objects following rebinning analysis was performed
#create pdf
setwd("../.../Analyses/")
dev.off()
##Code to plot ZAIN genind objects following rebinning analysis was performed
#create pdf
setwd("../.../Analyses/Results/Scoring_Comparison")
##Code to plot ZAIN genind objects following rebinning analysis was performed
#create pdf
setwd("../Analyses/Results/Scoring_Comparison")
##Code to plot ZAIN genind objects following rebinning analysis was performed
#create pdf
setwd("../../Analyses/Results/Scoring_Comparison")
pdf("QUAC_scoring_comparison_barplots_post_rebinning.pdf",width=20,height=9)
#loop to compare scoring between 2021 Scoring and 2011 Scoring
for(a in clean_loci){
#create data frame of each locus
QUAC_scoring <- QUAC_rebinned_genind[,which(grepl(a,colnames(QUAC_rebinned_genind@tab)))]@tab
#loop to standardize score count by percent for each group - wild and garden individuals
for(p in 1:2) QUAC_scoring[p,] <- QUAC_scoring[p,]/sum(QUAC_scoring[p,])
#reorder data frame for alleles to be plotted in numerical order
QUAC_scoring <- QUAC_scoring[,sort(colnames(QUAC_scoring))]
#plot barplots by locus
QUAC_rebinned_barplot <- barplot(QUAC_scoring, las = 2, beside = TRUE, col = c("darkgreen", "darkseagreen1"),
legend.text =  c("2023","2020"), ylim = c(0,1), main = paste0(a),
names = gsub("^.*\\.","",colnames(QUAC_scoring)))
}
dev.off()
table(QUAC_rebinned_genind@pop)
QUAC_rebinned_barplot
QUAC_scoring
barplot(QUAC_scoring, las = 2, beside = TRUE, col = c("darkgreen", "darkseagreen1"),
legend.text =  c("2023","2020"), ylim = c(0,1), main = paste0(a),
names = gsub("^.*\\.","",colnames(QUAC_scoring)))
QUAC_rebinned_genind[,which(grepl(clean_loci[[1]],colnames(QUAC_rebinned_genind@tab)))]@tab
#convert to genind object
QUAC_rebinned_genepop <- genind2genpop(QUAC_rebinned_genind)
#loop to compare scoring between 2021 Scoring and 2011 Scoring
for(a in clean_loci){
#create data frame of each locus
QUAC_scoring <- QUAC_rebinned_genepop[,which(grepl(a,colnames(QUAC_rebinned_genepop@tab)))]@tab
#loop to standardize score count by percent for each group - wild and garden individuals
for(p in 1:2) QUAC_scoring[p,] <- QUAC_scoring[p,]/sum(QUAC_scoring[p,])
#reorder data frame for alleles to be plotted in numerical order
QUAC_scoring <- QUAC_scoring[,sort(colnames(QUAC_scoring))]
#plot barplots by locus
QUAC_rebinned_barplot <- barplot(QUAC_scoring, las = 2, beside = TRUE, col = c("darkgreen", "darkseagreen1"),
legend.text =  c("2023","2020"), ylim = c(0,1), main = paste0(a),
names = gsub("^.*\\.","",colnames(QUAC_scoring)))
}
dev.off()
QUAC_rebinned_barplot
barplot(QUAC_scoring, las = 2, beside = TRUE, col = c("darkgreen", "darkseagreen1"),
legend.text =  c("2023","2020"), ylim = c(0,1), main = paste0(a),
names = gsub("^.*\\.","",colnames(QUAC_scoring)))
QUAC_scoring
seppop(QUAC_rebinned_genind)
seppop(QUAC_rebinned_genind)[1:4]
repool(seppop(QUAC_rebinned_genind)[1:4])
length(levels(QUAC_rb_scion))
length(levels(QUAC_rb_scion@pop))
#repool object into wild and garden
#scion
QUAC_rb_scion <- repool(seppop(QUAC_rebinned_genind)[1:4])
length(levels(QUAC_rb_scion))
length(levels(QUAC_rb_scion@pop))
#rename levels
levels(QUAC_rb_scion@pop) <- rep("Scion", length(levels(QUAC_rb_scion@pop)))
#wild
QUAC_rb_scion <- repool(seppop(QUAC_rebinned_genind)[5:8])
#repool object into wild and garden
#scion
QUAC_rb_scion <- repool(seppop(QUAC_rebinned_genind)[1:4])
#rename levels
levels(QUAC_rb_scion@pop) <- rep("Scion", length(levels(QUAC_rb_scion@pop)))
#wild
QUAC_rb_wild <- repool(seppop(QUAC_rebinned_genind)[5:8])
#rename level
levels(QUAC_rb_wild@pop) <- rep("Wild", length(levels(QUAC_rb_wild@pop)))
#repool scion and garden
QUAC_rb_scion_wild_genind <- repool(QUAC_rb_scion, QUAC_rb_wild)
#convert to genind object
QUAC_rebinned_genepop <- genind2genpop(QUAC_rb_scion_wild_genind)
table(QUAC_rb_scion_wild_genind@pop)
#repool scion and garden
QUAC_rb_scion_wild_genind <- repool(QUAC_rb_scion, QUAC_rb_wild)
#convert to genind object
QUAC_rebinned_genepop <- genind2genpop(QUAC_rb_scion_wild_genind)
##Code to plot ZAIN genind objects following rebinning analysis was performed
#create pdf
setwd("../../Analyses/Results/Scoring_Comparison")
pdf("QUAC_scoring_comparison_barplots_post_rebinning.pdf",width=20,height=9)
#loop to compare scoring between 2021 Scoring and 2011 Scoring
for(a in clean_loci){
#create data frame of each locus
QUAC_scoring <- QUAC_rebinned_genepop[,which(grepl(a,colnames(QUAC_rebinned_genepop@tab)))]@tab
#loop to standardize score count by percent for each group - wild and garden individuals
for(p in 1:2) QUAC_scoring[p,] <- QUAC_scoring[p,]/sum(QUAC_scoring[p,])
#reorder data frame for alleles to be plotted in numerical order
QUAC_scoring <- QUAC_scoring[,sort(colnames(QUAC_scoring))]
#plot barplots by locus
QUAC_rebinned_barplot <- barplot(QUAC_scoring, las = 2, beside = TRUE, col = c("darkgreen", "darkseagreen1"),
legend.text =  c("2023","2020"), ylim = c(0,1), main = paste0(a),
names = gsub("^.*\\.","",colnames(QUAC_scoring)))
}
dev.off()
dev.off()
